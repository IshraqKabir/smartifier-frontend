{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport { google } from \"googleapis\";\n/*******/\n\n/* CONFIGURATION */\n\n/*******/\n\nvar googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  // e.g. asdfghjkljhgfdsghjk.apps.googleusercontent.com\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  // e.g. _ASDFA%DFASDFASDFASD#FAD-\n  redirect: process.env.GOOGLE_REDIRECT_URL // this must match your google api settings\n\n};\nvar defaultScope = [\"https://www.googleapis.com/auth/plus.me\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\"];\n/*****/\n\n/* HELPERS */\n\n/*****/\n\nfunction createConnection() {\n  return new google.auth.OAuth2(googleConfig.clientId, googleConfig.clientSecret, googleConfig.redirect);\n}\n\nfunction getConnectionUrl(auth) {\n  return auth.generateAuthUrl({\n    access_type: \"offline\",\n    prompt: \"consent\",\n    scope: defaultScope\n  });\n}\n\nfunction getGooglePlusApi(auth) {\n  return google.plus({\n    version: \"v1\",\n    auth: auth\n  });\n}\n/****/\n\n/* MAIN */\n\n/****/\n\n/**\n * Part 1: Create a Google URL and send to the client to log in the user.\n */\n\n\nfunction urlGoogle() {\n  var auth = createConnection();\n  var url = getConnectionUrl(auth);\n  return url;\n}\n/**\n * Part 2: Take the \"code\" parameter which Google gives us once when the user logs in, then get the user's email and id.\n */\n\n\nfunction getGoogleAccountFromCode(_x) {\n  return _getGoogleAccountFromCode.apply(this, arguments);\n}\n\nfunction _getGoogleAccountFromCode() {\n  _getGoogleAccountFromCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(code) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.post(\"https://oauth2.googleapis.com/token\", {\n              code: code,\n              client_id: googleConfig.clientId,\n              client_secret: googleConfig.clientSecret,\n              redirect_uri: googleConfig.redirect,\n              grant_type: \"authorization_code\",\n              headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n              }\n            }).then(function (res) {\n              return res.data;\n            })[\"catch\"](function (err) {\n              return err;\n            });\n\n          case 2:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              data: data\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getGoogleAccountFromCode.apply(this, arguments);\n}\n\nexport default /*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var get, url, code, user;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            get = req.query.get;\n\n            if (!(get === \"link\")) {\n              _context.next = 7;\n              break;\n            }\n\n            res.statusCode = 200;\n            url = urlGoogle();\n            res.json({\n              url: url\n            });\n            _context.next = 21;\n            break;\n\n          case 7:\n            if (!(get === \"user\")) {\n              _context.next = 20;\n              break;\n            }\n\n            if (req.query.code) {\n              _context.next = 12;\n              break;\n            }\n\n            res.statusCode = 500;\n            _context.next = 18;\n            break;\n\n          case 12:\n            code = req.query.code;\n            _context.next = 15;\n            return getGoogleAccountFromCode(code);\n\n          case 15:\n            user = _context.sent;\n            res.statusCode = 200;\n            res.json({\n              user: user\n            });\n\n          case 18:\n            _context.next = 21;\n            break;\n\n          case 20:\n            res.statusCode = 500;\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/pages/api/auth/google.ts"],"names":["axios","google","googleConfig","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","redirect","GOOGLE_REDIRECT_URL","defaultScope","createConnection","auth","OAuth2","getConnectionUrl","generateAuthUrl","access_type","prompt","scope","getGooglePlusApi","plus","version","urlGoogle","url","getGoogleAccountFromCode","code","post","client_id","client_secret","redirect_uri","grant_type","headers","then","res","data","err","req","get","query","statusCode","json","user"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { google } from \"googleapis\";\n\n/*******/\n/* CONFIGURATION */\n/*******/\n\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID, // e.g. asdfghjkljhgfdsghjk.apps.googleusercontent.com\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET, // e.g. _ASDFA%DFASDFASDFASD#FAD-\n  redirect: process.env.GOOGLE_REDIRECT_URL, // this must match your google api settings\n};\n\nconst defaultScope = [\n  \"https://www.googleapis.com/auth/plus.me\",\n  \"https://www.googleapis.com/auth/userinfo.email\",\n  \"https://www.googleapis.com/auth/userinfo.profile\",\n];\n\n/*****/\n/* HELPERS */\n/*****/\n\nfunction createConnection() {\n  return new google.auth.OAuth2(\n    googleConfig.clientId,\n    googleConfig.clientSecret,\n    googleConfig.redirect\n  );\n}\n\nfunction getConnectionUrl(auth) {\n  return auth.generateAuthUrl({\n    access_type: \"offline\",\n    prompt: \"consent\",\n    scope: defaultScope,\n  });\n}\n\nfunction getGooglePlusApi(auth) {\n  return google.plus({ version: \"v1\", auth });\n}\n\n/****/\n/* MAIN */\n/****/\n\n/**\n * Part 1: Create a Google URL and send to the client to log in the user.\n */\nfunction urlGoogle() {\n  const auth = createConnection();\n  const url = getConnectionUrl(auth);\n  return url;\n}\n\n/**\n * Part 2: Take the \"code\" parameter which Google gives us once when the user logs in, then get the user's email and id.\n */\nasync function getGoogleAccountFromCode(code) {\n  const data = await axios\n    .post(`https://oauth2.googleapis.com/token`, {\n      code: code,\n      client_id: googleConfig.clientId,\n      client_secret: googleConfig.clientSecret,\n      redirect_uri: googleConfig.redirect,\n      grant_type: \"authorization_code\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n    })\n    .then((res) => res.data)\n    .catch((err) => err);\n\n  // const auth = createConnection();\n  // const data = await auth.getToken(code);\n  return { data };\n}\n\nexport default async (req, res) => {\n  const { get } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = urlGoogle();\n    res.json({ url });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const { code } = req.query;\n\n      const user = await getGoogleAccountFromCode(code);\n\n      res.statusCode = 200;\n      res.json({ user });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}