{"ast":null,"code":"import { google } from \"googleapis\";\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  redirect: process.env.GOOGLE_REDIRECT_URL\n}; // generate a url that asks permissions for Blogger and Google Calendar scopes\n\nconst scopes = [\"https://www.googleapis.com/auth/blogger\", \"https://www.googleapis.com/auth/calendar\"];\nconst oauth2Client = new google.auth.OAuth2(googleConfig.clientId, googleConfig.clientSecret, googleConfig.redirect);\n\nfunction createConnection() {\n  return new google.auth.OAuth2(googleConfig.clientId, googleConfig.clientSecret, googleConfig.redirect);\n}\n\nfunction getGoogleUrl() {\n  const url = oauth2Client.generateAuthUrl({\n    // 'online' (default) or 'offline' (gets refresh_token)\n    access_type: \"offline\",\n    // If you only need one scope you can pass it as a string\n    scope: scopes\n  });\n  return url;\n}\n\nfunction getGooglePlusApi(auth) {\n  return google.plus({\n    version: \"v1\",\n    auth\n  });\n}\n\nasync function getUserFromCode(code) {\n  let auth = createConnection();\n  const data = await auth.getToken(code);\n  const tokens = data.tokens;\n  auth = createConnection();\n  auth.setCredentials(tokens);\n  const plus = getGooglePlusApi(auth);\n  const me = await plus.people.get({\n    userId: \"me\"\n  });\n  const userGoogleId = me.data.id;\n  const userGoogleEmail = me.data.email;\n  return {\n    id: userGoogleId,\n    email: userGoogleEmail,\n    tokens: tokens\n  }; // const data = await oauth2Client.getToken(code);\n  // const tokens = data.tokens;\n  // return {\n  //   data: data,\n  //   tokens: tokens,\n  // };\n}\n\nexport default (async (req, res) => {\n  const {\n    get\n  } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = getGoogleUrl();\n    res.json({\n      url\n    });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const {\n        code\n      } = req.query;\n      const user = await getUserFromCode(code);\n      res.statusCode = 200;\n      res.json({\n        user\n      });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n}); // function createConnection() {\n//   return new google.auth.OAuth2(\n//     googleConfig.clientId,\n//     googleConfig.clientSecret,\n//     googleConfig.redirect\n//   );\n// }\n// function getConnectionUrl(auth: any) {\n//   return auth.generateAuthUrl({\n//     access_type: \"offline\",\n//     prompt: \"consent\",\n//     scope: scopes,\n//   });\n// }\n// function urlGoogle() {\n//   const auth = createConnection();\n//   const url = getConnectionUrl(auth);\n//   return url;\n// }","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/pages/api/auth/google.ts"],"names":["google","googleConfig","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","redirect","GOOGLE_REDIRECT_URL","scopes","oauth2Client","auth","OAuth2","createConnection","getGoogleUrl","url","generateAuthUrl","access_type","scope","getGooglePlusApi","plus","version","getUserFromCode","code","data","getToken","tokens","setCredentials","me","people","get","userId","userGoogleId","id","userGoogleEmail","email","req","res","query","statusCode","json","user"],"mappings":"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","sourcesContent":["import { google } from \"googleapis\";\n\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  redirect: process.env.GOOGLE_REDIRECT_URL,\n};\n\n// generate a url that asks permissions for Blogger and Google Calendar scopes\nconst scopes = [\n  \"https://www.googleapis.com/auth/blogger\",\n  \"https://www.googleapis.com/auth/calendar\",\n];\n\nconst oauth2Client = new google.auth.OAuth2(\n  googleConfig.clientId,\n  googleConfig.clientSecret,\n  googleConfig.redirect\n);\n\nfunction createConnection() {\n  return new google.auth.OAuth2(\n    googleConfig.clientId,\n    googleConfig.clientSecret,\n    googleConfig.redirect\n  );\n}\n\nfunction getGoogleUrl() {\n  const url = oauth2Client.generateAuthUrl({\n    // 'online' (default) or 'offline' (gets refresh_token)\n    access_type: \"offline\",\n\n    // If you only need one scope you can pass it as a string\n    scope: scopes,\n  });\n\n  return url;\n}\n\nfunction getGooglePlusApi(auth) {\n  return google.plus({ version: \"v1\", auth });\n}\n\nasync function getUserFromCode(code) {\n  let auth: any = createConnection();\n  const data = await auth.getToken(code);\n  const tokens = data.tokens;\n  auth = createConnection();\n  auth.setCredentials(tokens);\n  const plus = getGooglePlusApi(auth);\n  const me: any = await plus.people.get({ userId: \"me\" });\n  const userGoogleId = me.data.id;\n  const userGoogleEmail = me.data.email;\n\n  return {\n    id: userGoogleId,\n    email: userGoogleEmail,\n    tokens: tokens,\n  };\n  // const data = await oauth2Client.getToken(code);\n  // const tokens = data.tokens;\n  // return {\n  //   data: data,\n  //   tokens: tokens,\n  // };\n}\n\nexport default async (req, res) => {\n  const { get } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = getGoogleUrl();\n    res.json({ url });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const { code } = req.query;\n\n      const user = await getUserFromCode(code);\n\n      res.statusCode = 200;\n      res.json({ user });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n};\n\n// function createConnection() {\n//   return new google.auth.OAuth2(\n//     googleConfig.clientId,\n//     googleConfig.clientSecret,\n//     googleConfig.redirect\n//   );\n// }\n\n// function getConnectionUrl(auth: any) {\n//   return auth.generateAuthUrl({\n//     access_type: \"offline\",\n//     prompt: \"consent\",\n//     scope: scopes,\n//   });\n// }\n\n// function urlGoogle() {\n//   const auth = createConnection();\n//   const url = getConnectionUrl(auth);\n\n//   return url;\n// }\n"]},"metadata":{},"sourceType":"module"}