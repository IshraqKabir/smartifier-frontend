{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/Post/SinglePost/PostBody/PostBody.tsx\";\nimport React from \"react\";\nimport parse from \"html-react-parser\";\nimport PostBodyImage from \"./PostBodyImage/PostBodyImage\";\nimport PostBodyText from \"./PostBodyText/PostBodyText\";\nconst options = {\n  replace: ({\n    attribs,\n    children\n  }) => {\n    console.log(children);\n    console.log(attribs);\n    console.log(\"end\");\n    let image;\n\n    if (children) {\n      children.forEach(child => {\n        if (child.name == \"img\") {\n          var _child$attribs;\n\n          console.log(\"returning\");\n          console.log(child);\n          console.log(attribs);\n          image = /*#__PURE__*/_jsxDEV(PostBodyImage, {\n            src: child.attribs.src,\n            caption: (_child$attribs = child.attribs) === null || _child$attribs === void 0 ? void 0 : _child$attribs.alt,\n            isWide: attribs[\"data-layout\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this);\n        }\n      });\n      if (image) return image; // check if text\n\n      if (children) {\n        if (children[0] && children[0].type) {\n          const child = children[0];\n          return /*#__PURE__*/_jsxDEV(PostBodyText, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 18\n          }, this);\n        }\n      }\n    }\n  }\n};\n\nconst PostBody = ({\n  body\n}) => {\n  const el = parse(`${body}`, options);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: el\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n\nexport default PostBody;","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/Post/SinglePost/PostBody/PostBody.tsx"],"names":["React","parse","PostBodyImage","PostBodyText","options","replace","attribs","children","console","log","image","forEach","child","name","src","alt","type","PostBody","body","el"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAA8C,mBAA9C;AAGA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AAEA,MAAMC,OAA+B,GAAG;AACtCC,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,KAAgC;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,QAAIC,KAAJ;;AACA,QAAIH,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACI,OAAT,CAAkBC,KAAD,IAAW;AAC1B,YAAIA,KAAK,CAACC,IAAN,IAAc,KAAlB,EAAyB;AAAA;;AACvBL,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAI,UAAAA,KAAK,gBACH,QAAC,aAAD;AACE,YAAA,GAAG,EAAEE,KAAK,CAACN,OAAN,CAAcQ,GADrB;AAEE,YAAA,OAAO,oBAAEF,KAAK,CAACN,OAAR,mDAAE,eAAeS,GAF1B;AAGE,YAAA,MAAM,EAAET,OAAO,CAAC,aAAD;AAHjB;AAAA;AAAA;AAAA;AAAA,kBADF;AAOD;AACF,OAbD;AAeA,UAAII,KAAJ,EAAW,OAAOA,KAAP,CAhBC,CAkBZ;;AACA,UAAIH,QAAJ,EAAc;AACZ,YAAIA,QAAQ,CAAC,CAAD,CAAR,IAAeA,QAAQ,CAAC,CAAD,CAAR,CAAYS,IAA/B,EAAqC;AACnC,gBAAMJ,KAAK,GAAGL,QAAQ,CAAC,CAAD,CAAtB;AACA,8BAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD;AACF;AACF;AACF;AAhCqC,CAAxC;;AAuCA,MAAMU,QAA0B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC/C,QAAMC,EAAE,GAAGlB,KAAK,CAAE,GAAEiB,IAAK,EAAT,EAAYd,OAAZ,CAAhB;AAEA,sBAAO;AAAA,cAAMe;AAAN;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAJD;;AAMA,eAAeF,QAAf","sourcesContent":["import React from \"react\";\n\nimport parse, { HTMLReactParserOptions } from \"html-react-parser\";\nimport { Element } from \"domhandler/lib/node\";\nimport { backend_url } from \"../../../../url\";\nimport PostBodyImage from \"./PostBodyImage/PostBodyImage\";\nimport PostBodyText from \"./PostBodyText/PostBodyText\";\n\nconst options: HTMLReactParserOptions = {\n  replace: ({ attribs, children }: any) => {\n    console.log(children);\n    console.log(attribs);\n    console.log(\"end\");\n    let image;\n    if (children) {\n      children.forEach((child) => {\n        if (child.name == \"img\") {\n          console.log(\"returning\");\n          console.log(child);\n          console.log(attribs);\n          image = (\n            <PostBodyImage\n              src={child.attribs.src}\n              caption={child.attribs?.alt}\n              isWide={attribs[\"data-layout\"]}\n            />\n          );\n        }\n      });\n\n      if (image) return image;\n\n      // check if text\n      if (children) {\n        if (children[0] && children[0].type) {\n          const child = children[0];\n          return <PostBodyText />\n        }\n      }\n    }\n  },\n};\n\ninterface IProps {\n  body: string;\n}\n\nconst PostBody: React.FC<IProps> = ({ body }) => {\n  const el = parse(`${body}`, options);\n\n  return <div>{el}</div>;\n};\n\nexport default PostBody;\n"]},"metadata":{},"sourceType":"module"}