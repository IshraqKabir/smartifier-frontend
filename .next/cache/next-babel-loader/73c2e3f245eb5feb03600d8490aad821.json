{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Box, makeStyles, Typography, withStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Timer = ({\n  start_time,\n  duration\n}) => {\n  const {\n    0: secondsRemaining,\n    1: setSecondsRemaining\n  } = useState(getTimeRemainingInSeconds(start_time, duration));\n  const {\n    0: timeRemaining,\n    1: setTimeRemaing\n  } = useState(\"\");\n  const {\n    0: percentage,\n    1: setPercentage\n  } = useState(getPercentage(start_time, duration));\n  const classes = useStyles({\n    percentage,\n    secondsRemaining\n  });\n  useEffect(() => {\n    setInterval(() => {\n      setSecondsRemaining(getTimeRemainingInSeconds(start_time, duration));\n    }, 500);\n  }, []);\n  useEffect(() => {\n    if (secondsRemaining <= 0) {\n      setTimeRemaing(\"Test Finished\");\n    } else {\n      setPercentage(getPercentage(start_time, duration));\n      setTimeRemaing(parseSecondsToClock(secondsRemaining));\n    }\n  }, [secondsRemaining]);\n  return /*#__PURE__*/_jsx(Container, {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: classes.loader,\n      children: /*#__PURE__*/_jsx(Time, {\n        variant: \"h6\",\n        children: `${timeRemaining}`\n      })\n    })\n  });\n};\n\nexport default Timer;\nconst Container = withStyles({\n  root: {\n    position: \"fixed\",\n    top: 100,\n    zIndex: 4000,\n    left: 0,\n    textAlign: \"center\",\n    right: 0,\n    backgroundColor: \"transparent\",\n    fontWeight: \"bold\",\n    [\"@media (max-width: 700px)\"]: {\n      top: 135\n    }\n  }\n})(Box);\nconst MINUTE_LEFT_FOR_WARNING = 1;\nconst useStyles = makeStyles({\n  loader: {\n    display: \"relative\",\n    backgroundColor: props => {\n      const {\n        secondsRemaining\n      } = props;\n\n      if (secondsRemaining <= MINUTE_LEFT_FOR_WARNING * 60) {\n        return \"#cc3300\";\n      }\n\n      return \"#209434\";\n    },\n    opacity: 1,\n    width: props => {\n      const {\n        percentage\n      } = props;\n      return `${percentage}%`;\n    }\n  }\n});\nconst Time = withStyles({\n  root: {\n    color: \"white\",\n    opacity: 1\n  }\n})(Typography);\n\nfunction getTimeRemainingInSeconds(start_time, duration) {\n  const totalDurationInSeconds = getSecondsFromDuration(duration);\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  const secondsLeft = (end.getTime() - now.getTime()) / 1000;\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration) {\n  const [hours, mins, seconds] = duration.split(\":\");\n  let totalSeconds = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining) {\n  const mins = Math.floor(secondsRemaining / 60);\n  const seconds = Math.floor(secondsRemaining % 60);\n  return `${mins < 10 ? `0${mins}` : mins}:${seconds < 10 ? `0${seconds}` : seconds}`;\n}\n\nfunction getPercentage(start_time, duration) {\n  const totalDurationInSeconds = getSecondsFromDuration(duration);\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  const percentage = (now.getTime() - start.getTime()) / (totalDurationInSeconds * 10);\n  return percentage + 1;\n}","map":null,"metadata":{},"sourceType":"module"}