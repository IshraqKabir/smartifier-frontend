{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/Question/Question.tsx\";\nimport { Box, Slide, withStyles } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nexport default function Question({\n  question,\n  currentQuestionIndex,\n  index\n}) {\n  const {\n    0: isVisible,\n    1: setIsVisible\n  } = useState(index == currentQuestionIndex);\n  const {\n    0: direction,\n    1: setDirection\n  } = useState(\"right\");\n  useEffect(() => {\n    // console.log(\n    //   `${question?.id} is ${\n    //     isVisible ? \"visible\" : \"not visible\"\n    //   } --- current: ${currentQuestionId}`\n    // );\n    if (currentQuestionIndex > index) {\n      setDirection(\"right\");\n    } else if (currentQuestionIndex < index) {\n      setDirection(\"left\");\n    }\n\n    setIsVisible(index == currentQuestionIndex);\n  }, [currentQuestionIndex]);\n  return /*#__PURE__*/_jsxDEV(Slide, {\n    in: isVisible,\n    direction: direction,\n    timeout: {\n      enter: 1500,\n      exit: 1500\n    },\n    mountOnEnter: true,\n    unmountOnExit: true,\n    children: isVisible ? /*#__PURE__*/_jsxDEV(Container, {\n      children: `${question === null || question === void 0 ? void 0 : question.id}.${question === null || question === void 0 ? void 0 : question.question}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\nconst Container = withStyles({\n  root: {\n    padding: \"0.5rem 1rem\"\n  }\n})(Box);","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/Question/Question.tsx"],"names":["Box","Slide","withStyles","useEffect","useState","Question","question","currentQuestionIndex","index","isVisible","setIsVisible","direction","setDirection","enter","exit","id","Container","root","padding"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,UAArB,QAAuC,mBAAvC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AASA,eAAe,SAASC,QAAT,CAAkB;AAC/BC,EAAAA,QAD+B;AAE/BC,EAAAA,oBAF+B;AAG/BC,EAAAA;AAH+B,CAAlB,EAIJ;AACT,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAACI,KAAK,IAAID,oBAAV,CAA1C;AACA,QAAM;AAAA,OAACI,SAAD;AAAA,OAAYC;AAAZ,MAA4BR,QAAQ,CAAmB,OAAnB,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AACA,QAAII,oBAAoB,GAAGC,KAA3B,EAAkC;AAChCI,MAAAA,YAAY,CAAC,OAAD,CAAZ;AACD,KAFD,MAEO,IAAIL,oBAAoB,GAAGC,KAA3B,EAAkC;AACvCI,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACD;;AAEDF,IAAAA,YAAY,CAACF,KAAK,IAAID,oBAAV,CAAZ;AACD,GAbQ,EAaN,CAACA,oBAAD,CAbM,CAAT;AAeA,sBACE,QAAC,KAAD;AACE,IAAA,EAAE,EAAEE,SADN;AAGE,IAAA,SAAS,EAAEE,SAHb;AAIE,IAAA,OAAO,EAAE;AAAEE,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,IAAI,EAAE;AAArB,KAJX;AAKE,IAAA,YAAY,MALd;AAME,IAAA,aAAa,MANf;AAAA,cAQGL,SAAS,gBACR,QAAC,SAAD;AAAA,gBAAa,GAAEH,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAES,EAAG,IAAGT,QAAnB,aAAmBA,QAAnB,uBAAmBA,QAAQ,CAAEA,QAAS;AAAlD;AAAA;AAAA;AAAA;AAAA,YADQ,gBAGR;AAAA;AAAA;AAAA;AAAA;AAXJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;AAED,MAAMU,SAAS,GAAGd,UAAU,CAAC;AAC3Be,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE;AADL;AADqB,CAAD,CAAV,CAIflB,GAJe,CAAlB","sourcesContent":["import { Box, Slide, withStyles } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport IQuestion from \"../../../../Models/IQuestion\";\n\ninterface IProps {\n  index: number;\n  question: IQuestion;\n  currentQuestionIndex: number;\n}\n\nexport default function Question({\n  question,\n  currentQuestionIndex,\n  index,\n}: IProps) {\n  const [isVisible, setIsVisible] = useState(index == currentQuestionIndex);\n  const [direction, setDirection] = useState<\"left\" | \"right\">(\"right\");\n\n  useEffect(() => {\n    // console.log(\n    //   `${question?.id} is ${\n    //     isVisible ? \"visible\" : \"not visible\"\n    //   } --- current: ${currentQuestionId}`\n    // );\n    if (currentQuestionIndex > index) {\n      setDirection(\"right\");\n    } else if (currentQuestionIndex < index) {\n      setDirection(\"left\");\n    }\n\n    setIsVisible(index == currentQuestionIndex);\n  }, [currentQuestionIndex]);\n\n  return (\n    <Slide\n      in={isVisible}\n      \n      direction={direction}\n      timeout={{ enter: 1500, exit: 1500 }}\n      mountOnEnter\n      unmountOnExit\n    >\n      {isVisible ? (\n        <Container>{`${question?.id}.${question?.question}`}</Container>\n      ) : (\n        <div></div>\n      )}\n    </Slide>\n  );\n}\n\nconst Container = withStyles({\n  root: {\n    padding: \"0.5rem 1rem\",\n  },\n})(Box);\n"]},"metadata":{},"sourceType":"module"}