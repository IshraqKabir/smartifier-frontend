{"ast":null,"code":"import axios from \"axios\";\nimport { google } from \"googleapis\";\n/*******/\n\n/* CONFIGURATION */\n\n/*******/\n\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  // e.g. asdfghjkljhgfdsghjk.apps.googleusercontent.com\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  // e.g. _ASDFA%DFASDFASDFASD#FAD-\n  redirect: process.env.GOOGLE_REDIRECT_URL // this must match your google api settings\n\n};\nconst defaultScope = [\"https://www.googleapis.com/auth/plus.me\", \"https://www.googleapis.com/auth/userinfo.email\"];\n/*****/\n\n/* HELPERS */\n\n/*****/\n\nfunction createConnection() {\n  return new google.auth.OAuth2(googleConfig.clientId, googleConfig.clientSecret, googleConfig.redirect);\n}\n\nfunction getConnectionUrl(auth) {\n  return auth.generateAuthUrl({\n    access_type: \"offline\",\n    prompt: \"consent\",\n    scope: defaultScope\n  });\n}\n\nfunction getGooglePlusApi(auth) {\n  return google.plus({\n    version: \"v1\",\n    auth\n  });\n}\n/****/\n\n/* MAIN */\n\n/****/\n\n/**\n * Part 1: Create a Google URL and send to the client to log in the user.\n */\n\n\nfunction urlGoogle() {\n  const auth = createConnection();\n  const url = getConnectionUrl(auth);\n  return url;\n}\n/**\n * Part 2: Take the \"code\" parameter which Google gives us once when the user logs in, then get the user's email and id.\n */\n\n\nasync function getGoogleAccountFromCode(code) {\n  const data = await axios.post(`https://oauth2.googleapis.com/token`, {\n    code: code,\n    client_id: googleConfig.clientId,\n    client_secret: googleConfig.clientSecret,\n    redirect_uri: googleConfig.redirect,\n    grant_type: \"authorization_code\"\n  }).then(res => res.data).catch(err => err); // const auth = createConnection();\n  // const data = await auth.getToken(code);\n\n  return {\n    data\n  };\n}\n\nexport default (async (req, res) => {\n  const {\n    get\n  } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = urlGoogle();\n    res.json({\n      url\n    });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const {\n        code\n      } = req.query;\n      const user = await getGoogleAccountFromCode(code);\n      res.statusCode = 200;\n      res.json({\n        user\n      });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n});","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/pages/api/auth/google.ts"],"names":["axios","google","googleConfig","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","redirect","GOOGLE_REDIRECT_URL","defaultScope","createConnection","auth","OAuth2","getConnectionUrl","generateAuthUrl","access_type","prompt","scope","getGooglePlusApi","plus","version","urlGoogle","url","getGoogleAccountFromCode","code","data","post","client_id","client_secret","redirect_uri","grant_type","then","res","catch","err","req","get","query","statusCode","json","user"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { google } from \"googleapis\";\n\n/*******/\n/* CONFIGURATION */\n/*******/\n\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID, // e.g. asdfghjkljhgfdsghjk.apps.googleusercontent.com\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET, // e.g. _ASDFA%DFASDFASDFASD#FAD-\n  redirect: process.env.GOOGLE_REDIRECT_URL, // this must match your google api settings\n};\n\nconst defaultScope = [\n  \"https://www.googleapis.com/auth/plus.me\",\n  \"https://www.googleapis.com/auth/userinfo.email\",\n];\n\n/*****/\n/* HELPERS */\n/*****/\n\nfunction createConnection() {\n  return new google.auth.OAuth2(\n    googleConfig.clientId,\n    googleConfig.clientSecret,\n    googleConfig.redirect\n  );\n}\n\nfunction getConnectionUrl(auth) {\n  return auth.generateAuthUrl({\n    access_type: \"offline\",\n    prompt: \"consent\",\n    scope: defaultScope,\n  });\n}\n\nfunction getGooglePlusApi(auth) {\n  return google.plus({ version: \"v1\", auth });\n}\n\n/****/\n/* MAIN */\n/****/\n\n/**\n * Part 1: Create a Google URL and send to the client to log in the user.\n */\nfunction urlGoogle() {\n  const auth = createConnection();\n  const url = getConnectionUrl(auth);\n  return url;\n}\n\n/**\n * Part 2: Take the \"code\" parameter which Google gives us once when the user logs in, then get the user's email and id.\n */\nasync function getGoogleAccountFromCode(code) {\n  const data = await axios\n    .post(`https://oauth2.googleapis.com/token`, {\n      code: code,\n      client_id: googleConfig.clientId,\n      client_secret: googleConfig.clientSecret,\n      redirect_uri: googleConfig.redirect,\n      grant_type: \"authorization_code\",\n    })\n    .then((res) => res.data)\n    .catch((err) => err);\n\n  // const auth = createConnection();\n  // const data = await auth.getToken(code);\n  return { data };\n}\n\nexport default async (req, res) => {\n  const { get } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = urlGoogle();\n    res.json({ url });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const { code } = req.query;\n\n      const user = await getGoogleAccountFromCode(code);\n\n      res.statusCode = 200;\n      res.json({ user });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}