{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useState } from \"react\";\nimport useStartTest from \"./useStartTest\";\nimport { Box, CircularProgress, withStyles } from \"@material-ui/core\";\nimport PageTitle from \"../PageTitle/PageTitle\";\nimport Timer, { getTimeRemainingInSeconds } from \"./Timer/Timer\";\nimport Questions from \"../Questions/Questions\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport Submit from \"./Submit/Submit\";\nexport const QuizIDContext = /*#__PURE__*/createContext(null);\nexport const AnswersContext = /*#__PURE__*/createContext(null);\n\nconst QuizTest = ({\n  id,\n  status\n}) => {\n  var _test$quiz2;\n\n  const {\n    test,\n    isLoading,\n    isError\n  } = useStartTest(id, status);\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswersState] = useLocalState(`${user.email}-quiz${id}-answers`, {});\n  const {\n    0: secondsRemaining,\n    1: setSecondsRemaining\n  } = useState(() => {\n    var _test$quiz;\n\n    if (!test) return 600;\n    return getTimeRemainingInSeconds(test === null || test === void 0 ? void 0 : test.created_at, test === null || test === void 0 ? void 0 : (_test$quiz = test.quiz) === null || _test$quiz === void 0 ? void 0 : _test$quiz.duration.toString());\n  });\n  if (isError) return /*#__PURE__*/_jsx(\"p\", {\n    children: \"Sorry some error occured. Please refresh the page.\"\n  });\n\n  const setAnswers = (optionID, question) => {\n    setAnswersState(state => {\n      let tempAnswers = _objectSpread({}, state);\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: []\n          });\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: [optionID]\n          });\n        }\n      } else if (question.answer_type === \"checkboxes\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: options.filter(option => option != optionID)\n          });\n        } else if (options && !options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: [...options, optionID]\n          });\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: [optionID]\n          });\n        }\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [/*#__PURE__*/_jsx(PageTitle, {\n      title: isLoading ? \"Starting Test...\" : test.quiz.title,\n      children: isLoading && /*#__PURE__*/_jsx(CircularProgress, {})\n    }), test && !isLoading && /*#__PURE__*/_jsx(Timer, {\n      start_time: test.created_at,\n      duration: test === null || test === void 0 ? void 0 : (_test$quiz2 = test.quiz) === null || _test$quiz2 === void 0 ? void 0 : _test$quiz2.duration,\n      secondsRemaining: secondsRemaining,\n      setSecondsRemaining: setSecondsRemaining\n    }), test && !isLoading && (test === null || test === void 0 ? void 0 : test.quiz.test_questions) && /*#__PURE__*/_jsx(AnswersContext.Provider, {\n      value: {\n        answers,\n        setAnswers\n      },\n      children: /*#__PURE__*/_jsx(QuizIDContext.Provider, {\n        value: {\n          quizID: id\n        },\n        children: /*#__PURE__*/_jsx(Questions, {\n          questions: test.quiz.test_questions\n        })\n      })\n    }), /*#__PURE__*/_jsx(Submit, {\n      answers: answers,\n      test_id: test.id,\n      setAnswersState: setAnswersState,\n      secondsRemaining: secondsRemaining\n    })]\n  });\n};\n\nexport default QuizTest;\nconst Container = withStyles({\n  root: {\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: \"#5D00A5\",\n    minHeight: \"100vh\",\n    color: \"white\"\n  }\n})(Box);","map":null,"metadata":{},"sourceType":"module"}