{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { local_backend_url } from \"../url\";\nvar initialState = {\n  posts: [],\n  topics: [],\n  tags: []\n};\nexport default function useSearch(url, query) {\n  var _useState = useState(_objectSpread({}, initialState)),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    setData(_objectSpread({}, initialState));\n  }, [query]);\n  useEffect(function () {\n    if (!query) return function () {};\n    setLoading(true);\n    setError(false);\n    var cancel;\n    axios({\n      method: \"GET\",\n      url: \"\".concat(local_backend_url).concat(url),\n      params: {\n        query: query\n      },\n      cancelToken: new axios.CancelToken(function (c) {\n        return cancel = c;\n      }),\n      headers: {\n        Accept: \"application/json\"\n      }\n    }).then(function (res) {\n      setData(res.data);\n      setLoading(false);\n    })[\"catch\"](function (error) {\n      if (axios.isCancel(error)) return;\n      setError(true);\n    });\n    return function () {\n      cancel();\n    };\n  }, [query]);\n  return {\n    data: data,\n    loading: loading,\n    error: error\n  };\n}","map":null,"metadata":{},"sourceType":"module"}