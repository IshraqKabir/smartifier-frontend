{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport default function useSingleQuestion(index, currentQuestionIndex) {\n  _s();\n\n  var _useState = useState(index == currentQuestionIndex),\n      isVisible = _useState[0],\n      setIsVisible = _useState[1];\n\n  var _useState2 = useState(\"right\"),\n      direction = _useState2[0],\n      setDirection = _useState2[1];\n\n  useEffect(function () {\n    if (currentQuestionIndex > index) {\n      setDirection(\"right\");\n    } else if (currentQuestionIndex < index) {\n      setDirection(\"left\");\n    }\n\n    setIsVisible(index == currentQuestionIndex);\n  }, [currentQuestionIndex]);\n  return {\n    isVisible: isVisible,\n    direction: direction\n  };\n}\n\n_s(useSingleQuestion, \"DoUlSKnW8Wkyy7ogja3JWUOWw2Q=\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/SingleQuestion/useSingleQuestion.tsx"],"names":["useEffect","useState","useSingleQuestion","index","currentQuestionIndex","isVisible","setIsVisible","direction","setDirection"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,iBAAT,CACbC,KADa,EAEbC,oBAFa,EAGb;AAAA;;AAAA,kBACkCH,QAAQ,CAACE,KAAK,IAAIC,oBAAV,CAD1C;AAAA,MACOC,SADP;AAAA,MACkBC,YADlB;;AAAA,mBAEkCL,QAAQ,CAAmB,OAAnB,CAF1C;AAAA,MAEOM,SAFP;AAAA,MAEkBC,YAFlB;;AAIAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAII,oBAAoB,GAAGD,KAA3B,EAAkC;AAChCK,MAAAA,YAAY,CAAC,OAAD,CAAZ;AACD,KAFD,MAEO,IAAIJ,oBAAoB,GAAGD,KAA3B,EAAkC;AACvCK,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACD;;AAEDF,IAAAA,YAAY,CAACH,KAAK,IAAIC,oBAAV,CAAZ;AACD,GARQ,EAQN,CAACA,oBAAD,CARM,CAAT;AAUA,SAAO;AAAEC,IAAAA,SAAS,EAATA,SAAF;AAAaE,IAAAA,SAAS,EAATA;AAAb,GAAP;AACD;;GAlBuBL,iB","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport default function useSingleQuestion(\n  index: number,\n  currentQuestionIndex: number\n) {\n  const [isVisible, setIsVisible] = useState(index == currentQuestionIndex);\n  const [direction, setDirection] = useState<\"left\" | \"right\">(\"right\");\n\n  useEffect(() => {\n    if (currentQuestionIndex > index) {\n      setDirection(\"right\");\n    } else if (currentQuestionIndex < index) {\n      setDirection(\"left\");\n    }\n\n    setIsVisible(index == currentQuestionIndex);\n  }, [currentQuestionIndex]);\n\n  return { isVisible, direction };\n}\n"]},"metadata":{},"sourceType":"module"}