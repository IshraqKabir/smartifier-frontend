{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/Question/OptionContainer/OptionContainer.tsx\";\nimport { cloneElement, useContext, useEffect, useState } from \"react\";\nimport { AnswersContext } from \"../Question\";\n\nconst OptionContainer = props => {\n  const {\n    answers,\n    setAnswers,\n    getIsChecked\n  } = useContext(AnswersContext);\n  const {\n    0: isChecked,\n    1: setIsChecked\n  } = useState(getIsChecked(props.option.id));\n  useEffect(() => {\n    console.log(`${props.option.title}:${props.option.id} is ${getIsChecked(props.option.id) ? \"checked\" : \"unchecked\"}`);\n    setIsChecked(getIsChecked(props.option.id));\n  }, [answers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => setAnswers(),\n    children: /*#__PURE__*/cloneElement(props.children, props)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 10\n  }, this);\n};\n\nexport default OptionContainer;","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/Question/OptionContainer/OptionContainer.tsx"],"names":["cloneElement","useContext","useEffect","useState","AnswersContext","OptionContainer","props","answers","setAnswers","getIsChecked","isChecked","setIsChecked","option","id","console","log","title","children"],"mappings":";;AAAA,SAASA,YAAT,EAAiCC,UAAjC,EAA6CC,SAA7C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,cAAT,QAA+B,aAA/B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA;AAAvB,MAAwCR,UAAU,CAACG,cAAD,CAAxD;AAEA,QAAM;AAAA,OAACM,SAAD;AAAA,OAAYC;AAAZ,MAA4BR,QAAQ,CACxCM,YAAY,CAACH,KAAK,CAACM,MAAN,CAAaC,EAAd,CAD4B,CAA1C;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,OAAO,CAACC,GAAR,CACG,GAAET,KAAK,CAACM,MAAN,CAAaI,KAAM,IAAGV,KAAK,CAACM,MAAN,CAAaC,EAAG,OACvCJ,YAAY,CAACH,KAAK,CAACM,MAAN,CAAaC,EAAd,CAAZ,GAAgC,SAAhC,GAA4C,WAC7C,EAHH;AAKAF,IAAAA,YAAY,CAACF,YAAY,CAACH,KAAK,CAACM,MAAN,CAAaC,EAAd,CAAb,CAAZ;AACD,GAPQ,EAON,CAACN,OAAD,CAPM,CAAT;AASA,sBAAO;AAAK,IAAA,OAAO,EAAE,MAAMC,UAAU,EAA9B;AAAA,2BAAmCR,YAAY,CAACM,KAAK,CAACW,QAAP,EAAiBX,KAAjB;AAA/C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjBD;;AAmBA,eAAeD,eAAf","sourcesContent":["import { cloneElement, Fragment, useContext, useEffect, useState } from \"react\";\nimport { AnswersContext } from \"../Question\";\n\nconst OptionContainer = (props) => {\n  const { answers, setAnswers, getIsChecked } = useContext(AnswersContext);\n\n  const [isChecked, setIsChecked] = useState<boolean>(\n    getIsChecked(props.option.id)\n  );\n\n  useEffect(() => {\n    console.log(\n      `${props.option.title}:${props.option.id} is ${\n        getIsChecked(props.option.id) ? \"checked\" : \"unchecked\"\n      }`\n    );\n    setIsChecked(getIsChecked(props.option.id));\n  }, [answers]);\n\n  return <div onClick={() => setAnswers()}>{cloneElement(props.children, props)}</div>;\n};\n\nexport default OptionContainer;\n"]},"metadata":{},"sourceType":"module"}