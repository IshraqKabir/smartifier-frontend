{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport getResultInfo from \"../../repository/QuizTestResult/getResultInfo\";\nexport default function useQuizTestResult(testId) {\n  var _useLocalState = useLocalState(\"user\", \"\"),\n      _useLocalState2 = _slicedToArray(_useLocalState, 1),\n      user = _useLocalState2[0];\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(true),\n      isAuthorized = _useState2[0],\n      setIsAuthorized = _useState2[1];\n\n  var _useState3 = useState(),\n      test = _useState3[0],\n      setTest = _useState3[1];\n\n  var _useState4 = useState(),\n      quiz = _useState4[0],\n      setQuiz = _useState4[1];\n\n  useEffect(function () {\n    fetchResultInfo();\n  }, []);\n\n  function fetchResultInfo() {\n    return _fetchResultInfo.apply(this, arguments);\n  }\n\n  function _fetchResultInfo() {\n    _fetchResultInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (user) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              setIsLoading(true);\n              _context.next = 5;\n              return getResultInfo(testId, user === null || user === void 0 ? void 0 : user.token);\n\n            case 5:\n              response = _context.sent;\n              setIsAuthorized(response === null || response === void 0 ? void 0 : response.is_authorized);\n              setTest(response === null || response === void 0 ? void 0 : response.test);\n              setQuiz(response === null || response === void 0 ? void 0 : response.quiz);\n              setIsLoading(false);\n              console.log(response);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _fetchResultInfo.apply(this, arguments);\n  }\n\n  return {\n    isLoading: isLoading,\n    isAuthorized: isAuthorized,\n    test: test,\n    quiz: quiz\n  };\n}","map":null,"metadata":{},"sourceType":"module"}