{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nimport useLocalState from \"./useLocalState\";\nexport default function useOptionClicked(optionID, questionID, quizID, answerType) {\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswers] = useLocalState(`${user.email}-quiz${quizID}-answers`, {});\n  const {\n    0: isChecked,\n    1: setIsChecked\n  } = useState(getIsChecked(answers, questionID, optionID));\n\n  const handleClick = () => {\n    console.log(`${user.email} has clicked option: ${optionID} of question: ${questionID}`);\n    setAnswers(state => {\n      let tempAnswers = _objectSpread({}, state);\n\n      if (answerType === \"multiple_choice\") {\n        tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n          [`${questionID}`]: [optionID]\n        });\n      } else if (answerType === \"checkboxes\") {\n        tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n          [`${questionID}`]: [...tempAnswers[`${questionID}`], optionID]\n        });\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  useEffect(() => {\n    setIsChecked(isChecked => !isChecked);\n  }, [answers]);\n  return [isChecked, handleClick];\n}\n\nfunction getIsChecked(answers, questionID, optionID) {\n  if (answers[questionID] && answers[questionID].includes(optionID)) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/custom-hooks/useOptionClicked.ts"],"names":["useEffect","useState","useLocalState","useOptionClicked","optionID","questionID","quizID","answerType","user","answers","setAnswers","email","isChecked","setIsChecked","getIsChecked","handleClick","console","log","state","tempAnswers","includes"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAIA,eAAe,SAASC,gBAAT,CACbC,QADa,EAEbC,UAFa,EAGbC,MAHa,EAIbC,UAJa,EAKgC;AAC7C,QAAM,CAACC,IAAD,IAASN,aAAa,CAAC,MAAD,EAAS,EAAT,CAA5B;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,aAAa,CACxC,GAAEM,IAAI,CAACG,KAAM,QAAOL,MAAO,UADa,EAEzC,EAFyC,CAA3C;AAKA,QAAM;AAAA,OAACM,SAAD;AAAA,OAAYC;AAAZ,MAA4BZ,QAAQ,CACxCa,YAAY,CAACL,OAAD,EAAUJ,UAAV,EAAsBD,QAAtB,CAD4B,CAA1C;;AAIA,QAAMW,WAAW,GAAG,MAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,CACG,GAAET,IAAI,CAACG,KAAM,wBAAuBP,QAAS,iBAAgBC,UAAW,EAD3E;AAIAK,IAAAA,UAAU,CAAEQ,KAAD,IAAgB;AACzB,UAAIC,WAAW,qBAAQD,KAAR,CAAf;;AAEA,UAAIX,UAAU,KAAK,iBAAnB,EAAsC;AACpCY,QAAAA,WAAW,mCAAQD,KAAR;AAAe,WAAE,GAAEb,UAAW,EAAf,GAAmB,CAACD,QAAD;AAAlC,UAAX;AACD,OAFD,MAEO,IAAIG,UAAU,KAAK,YAAnB,EAAiC;AACtCY,QAAAA,WAAW,mCACND,KADM;AAET,WAAE,GAAEb,UAAW,EAAf,GAAmB,CAAC,GAAGc,WAAW,CAAE,GAAEd,UAAW,EAAf,CAAf,EAAkCD,QAAlC;AAFV,UAAX;AAID;;AAED,+BAAYe,WAAZ;AACD,KAbS,CAAV;AAcD,GAnBD;;AAqBAnB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,YAAY,CAAED,SAAD,IAAe,CAACA,SAAjB,CAAZ;AACD,GAFQ,EAEN,CAACH,OAAD,CAFM,CAAT;AAIA,SAAO,CAACG,SAAD,EAAYG,WAAZ,CAAP;AACD;;AAED,SAASD,YAAT,CACEL,OADF,EAEEJ,UAFF,EAGED,QAHF,EAIW;AACT,MAAIK,OAAO,CAACJ,UAAD,CAAP,IAAuBI,OAAO,CAACJ,UAAD,CAAP,CAAoBe,QAApB,CAA6BhB,QAA7B,CAA3B,EAAmE;AACjE,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useLocalState from \"./useLocalState\";\n\ntype answerType = \"multiple_choice\" | \"checkboxes\";\n\nexport default function useOptionClicked(\n  optionID: number,\n  questionID: number,\n  quizID: number,\n  answerType: answerType\n): [isChecked: boolean, handleClick: Function] {\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswers] = useLocalState(\n    `${user.email}-quiz${quizID}-answers`,\n    {}\n  );\n\n  const [isChecked, setIsChecked] = useState<boolean>(\n    getIsChecked(answers, questionID, optionID)\n  );\n\n  const handleClick = () => {\n    console.log(\n      `${user.email} has clicked option: ${optionID} of question: ${questionID}`\n    );\n\n    setAnswers((state: any) => {\n      let tempAnswers = { ...state };\n\n      if (answerType === \"multiple_choice\") {\n        tempAnswers = { ...state, [`${questionID}`]: [optionID] };\n      } else if (answerType === \"checkboxes\") {\n        tempAnswers = {\n          ...state,\n          [`${questionID}`]: [...tempAnswers[`${questionID}`], optionID],\n        };\n      }\n\n      return { ...tempAnswers };\n    });\n  };\n\n  useEffect(() => {\n    setIsChecked((isChecked) => !isChecked);\n  }, [answers]);\n\n  return [isChecked, handleClick];\n}\n\nfunction getIsChecked(\n  answers: any,\n  questionID: number,\n  optionID: number\n): boolean {\n  if (answers[questionID] && answers[questionID].includes(optionID)) {\n    return true;\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}