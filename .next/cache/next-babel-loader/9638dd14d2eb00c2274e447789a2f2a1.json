{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, withStyles } from \"@material-ui/core\";\nimport { cloneElement, useContext, useEffect, useState } from \"react\";\nimport { AnswersContext } from \"../../QuizTest/QuizTest\";\nimport getIsChecked from \"../../../UtilFunctions/getIsChecked\";\nimport { QuestionContext } from \"../../Questions/Questions\";\n\nvar OptionContainer = function OptionContainer(props) {\n  var _useContext = useContext(AnswersContext),\n      answers = _useContext.answers,\n      setAnswers = _useContext.setAnswers;\n\n  var _useContext2 = useContext(QuestionContext),\n      question = _useContext2.question;\n\n  var _useState = useState(getIsChecked(props.option.id, question, answers)),\n      isChecked = _useState[0],\n      setIsChecked = _useState[1];\n\n  useEffect(function () {\n    console.log(\"\".concat(props.option.title, \":\").concat(props.option.id, \" is \").concat(getIsChecked(props.option.id, question, answers) ? \"checked\" : \"unchecked\"));\n    setIsChecked(getIsChecked(props.option.id, question, answers));\n  }, [answers]);\n  return /*#__PURE__*/_jsx(Container, {\n    onClick: function onClick() {\n      return setAnswers(props.option.id, question);\n    },\n    children: /*#__PURE__*/cloneElement(props.children, _objectSpread(_objectSpread({}, props), {}, {\n      isChecked: isChecked\n    }))\n  });\n};\n\nexport default OptionContainer;\nvar Container = withStyles({\n  root: {\n    margin: 0,\n    padding: 0,\n    height: \"100%\"\n  }\n})(Box);","map":null,"metadata":{},"sourceType":"module"}