{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport { local_backend_url } from \"../../url\";\nexport default function useStartTest(id, status) {\n  _s();\n\n  var _useLocalState = useLocalState(\"user\", \"\"),\n      _useLocalState2 = _slicedToArray(_useLocalState, 1),\n      user = _useLocalState2[0];\n\n  var _useState = useState(),\n      test = _useState[0],\n      setTest = _useState[1];\n\n  var _useState2 = useState(true),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(true),\n      isError = _useState3[0],\n      setIsError = _useState3[1];\n\n  useEffect(function () {\n    if (status == \"unknown\") return;\n    var url = \"\".concat(local_backend_url, \"/api/quiz-test/\").concat(status == \"new_test\" ? \"start\" : status == \"ongoing\" ? \"resume\" : \"retake\");\n    axios.post(url, {\n      quiz_id: id\n    }, {\n      headers: {\n        Accept: \"Application/json\",\n        Authorization: \"Bearer \".concat(user.token)\n      }\n    }).then(function (response) {\n      setTest(response.data);\n      setIsLoading(false);\n      setIsError(false);\n    })[\"catch\"](function () {\n      setIsLoading(false);\n      setIsError(true);\n    });\n  }, []);\n  return {\n    test: test,\n    isLoading: isLoading,\n    isError: isError\n  };\n}\n\n_s(useStartTest, \"o084PbNjuiKE+Y1CX4zS6RjOxnE=\", false, function () {\n  return [useLocalState];\n});","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest2/useStartTest.ts"],"names":["axios","useEffect","useState","useLocalState","local_backend_url","useStartTest","id","status","user","test","setTest","isLoading","setIsLoading","isError","setIsError","url","post","quiz_id","headers","Accept","Authorization","token","then","response","data"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AAEA,SAASC,iBAAT,QAAkC,WAAlC;AAEA,eAAe,SAASC,YAAT,CACbC,EADa,EAEbC,MAFa,EAGb;AAAA;;AAAA,uBACeJ,aAAa,CAAC,MAAD,EAAS,EAAT,CAD5B;AAAA;AAAA,MACOK,IADP;;AAAA,kBAEwBN,QAAQ,EAFhC;AAAA,MAEOO,IAFP;AAAA,MAEaC,OAFb;;AAAA,mBAGkCR,QAAQ,CAAU,IAAV,CAH1C;AAAA,MAGOS,SAHP;AAAA,MAGkBC,YAHlB;;AAAA,mBAI8BV,QAAQ,CAAU,IAAV,CAJtC;AAAA,MAIOW,OAJP;AAAA,MAIgBC,UAJhB;;AAMAb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIM,MAAM,IAAI,SAAd,EAAyB;AAEzB,QAAMQ,GAAW,aAAMX,iBAAN,4BACfG,MAAM,IAAI,UAAV,GAAuB,OAAvB,GAAiCA,MAAM,IAAI,SAAV,GAAsB,QAAtB,GAAiC,QADnD,CAAjB;AAIAP,IAAAA,KAAK,CACFgB,IADH,CAEID,GAFJ,EAGI;AACEE,MAAAA,OAAO,EAAEX;AADX,KAHJ,EAMI;AACEY,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEPC,QAAAA,aAAa,mBAAYZ,IAAI,CAACa,KAAjB;AAFN;AADX,KANJ,EAaGC,IAbH,CAaQ,UAACC,QAAD,EAAc;AAClBb,MAAAA,OAAO,CAACa,QAAQ,CAACC,IAAV,CAAP;AACAZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAjBH,WAkBS,YAAM;AACXF,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KArBH;AAsBD,GA7BQ,EA6BN,EA7BM,CAAT;AA+BA,SAAO;AAAEL,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,SAAS,EAATA,SAAR;AAAmBE,IAAAA,OAAO,EAAPA;AAAnB,GAAP;AACD;;GAzCuBR,Y;UAIPF,a","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport ITest from \"../../Models/ITest\";\nimport { local_backend_url } from \"../../url\";\n\nexport default function useStartTest(\n  id: number,\n  status: \"retake\" | \"ongoing\" | \"new_test\" | \"unknown\"\n) {\n  const [user] = useLocalState(\"user\", \"\");\n  const [test, setTest] = useState<ITest>();\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [isError, setIsError] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (status == \"unknown\") return;\n\n    const url: string = `${local_backend_url}/api/quiz-test/${\n      status == \"new_test\" ? \"start\" : status == \"ongoing\" ? \"resume\" : \"retake\"\n    }`;\n\n    axios\n      .post(\n        url,\n        {\n          quiz_id: id,\n        },\n        {\n          headers: {\n            Accept: \"Application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        }\n      )\n      .then((response) => {\n        setTest(response.data);\n        setIsLoading(false);\n        setIsError(false);\n      })\n      .catch(() => {\n        setIsLoading(false);\n        setIsError(true);\n      });\n  }, []);\n\n  return { test, isLoading, isError };\n}\n"]},"metadata":{},"sourceType":"module"}