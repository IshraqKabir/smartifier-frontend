{"ast":null,"code":"import { useState } from \"react\";\nexport default function useTextAnswer(question, answers, setAnswers) {\n  const {\n    0: text,\n    1: setText\n  } = useState(getTextValue());\n\n  function getTextValue() {\n    var _answers$;\n\n    if (!answers) return \"\";\n    return (_answers$ = answers[`${question === null || question === void 0 ? void 0 : question.id}`]) === null || _answers$ === void 0 ? void 0 : _answers$.text;\n  }\n\n  function handleChange(e) {\n    var _e$target, _e$target2;\n\n    setText(e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value);\n    setAnswers(question === null || question === void 0 ? void 0 : question.options[0], question, e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.value);\n  }\n\n  return {\n    text,\n    handleChange\n  };\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/SingleQuestion/Question/Options/TextAnswer/useTextAnswer.tsx"],"names":["useState","useTextAnswer","question","answers","setAnswers","text","setText","getTextValue","id","handleChange","e","target","value","options"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,aAAT,CACbC,QADa,EAEbC,OAFa,EAGbC,UAHa,EAIb;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAACO,YAAY,EAAb,CAAhC;;AAEA,WAASA,YAAT,GAAgC;AAAA;;AAC9B,QAAI,CAACJ,OAAL,EAAc,OAAO,EAAP;AAEd,wBAAOA,OAAO,CAAE,GAAED,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEM,EAAG,EAAjB,CAAd,8CAAO,UAA4BH,IAAnC;AACD;;AAED,WAASI,YAAT,CAAsBC,CAAtB,EAA8B;AAAA;;AAC5BJ,IAAAA,OAAO,CAACI,CAAD,aAACA,CAAD,oCAACA,CAAC,CAAEC,MAAJ,8CAAC,UAAWC,KAAZ,CAAP;AACAR,IAAAA,UAAU,CAACF,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEW,OAAV,CAAkB,CAAlB,CAAD,EAAuBX,QAAvB,EAAiCQ,CAAjC,aAAiCA,CAAjC,qCAAiCA,CAAC,CAAEC,MAApC,+CAAiC,WAAWC,KAA5C,CAAV;AACD;;AAED,SAAO;AAAEP,IAAAA,IAAF;AAAQI,IAAAA;AAAR,GAAP;AACD","sourcesContent":["import { useState } from \"react\";\n\nexport default function useTextAnswer(\n  question: any,\n  answers: any,\n  setAnswers: (optionID: number, question: any, text?: string) => void\n) {\n  const [text, setText] = useState(getTextValue());\n\n  function getTextValue(): string {\n    if (!answers) return \"\";\n\n    return answers[`${question?.id}`]?.text;\n  }\n\n  function handleChange(e: any) {\n    setText(e?.target?.value);\n    setAnswers(question?.options[0], question, e?.target?.value);\n  }\n\n  return { text, handleChange };\n}\n"]},"metadata":{},"sourceType":"module"}