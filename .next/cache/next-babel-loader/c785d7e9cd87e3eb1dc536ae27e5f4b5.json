{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx\",\n    _this = this;\n\nimport React from \"react\";\n\nvar Timer = function Timer(_ref) {\n  var start_time = _ref.start_time,\n      duration = _ref.duration;\n\n  var _useSta = useSta,\n      _useSta2 = _slicedToArray(_useSta, 2),\n      timeRemaining = _useSta2[0],\n      setTimeRemaining = _useSta2[1];\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, _this);\n};\n\n_c = Timer;\nexport default Timer;\n\nfunction getTimeRemainingInSeconds(start_time, duration) {\n  var totalDurationInSeconds = getSecondsFromDuration(duration);\n  var start = new Date(\"\".concat(start_time));\n  var now = new Date();\n  var end = new Date(\"\".concat(start_time));\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  var secondsLeft = (end.getTime() - now.getTime()) / 1000;\n  return secondsLeft;\n}\n\nfunction getSecondsFromDuration(duration) {\n  var _duration$split = duration.split(\":\"),\n      _duration$split2 = _slicedToArray(_duration$split, 3),\n      hours = _duration$split2[0],\n      mins = _duration$split2[1],\n      seconds = _duration$split2[2];\n\n  var totalSeconds = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60 * 60;\n  totalSeconds += parseInt(seconds);\n  return totalSeconds;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx"],"names":["React","Timer","start_time","duration","useSta","timeRemaining","setTimeRemaining","getTimeRemainingInSeconds","totalDurationInSeconds","getSecondsFromDuration","start","Date","now","end","setTime","getTime","secondsLeft","split","hours","mins","seconds","totalSeconds","parseInt"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;;AAOA,IAAMC,KAAuB,GAAG,SAA1BA,KAA0B,OAA8B;AAAA,MAA3BC,UAA2B,QAA3BA,UAA2B;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,gBAChBC,MADgB;AAAA;AAAA,MACnDC,aADmD;AAAA,MACpCC,gBADoC;;AAE5D,sBAAO;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAHD;;KAAML,K;AAKN,eAAeA,KAAf;;AAEA,SAASM,yBAAT,CAAmCL,UAAnC,EAAuDC,QAAvD,EAAyE;AACvE,MAAMK,sBAA8B,GAAGC,sBAAsB,CAACN,QAAD,CAA7D;AAEA,MAAMO,KAAK,GAAG,IAAIC,IAAJ,WAAYT,UAAZ,EAAd;AACA,MAAMU,GAAG,GAAG,IAAID,IAAJ,EAAZ;AACA,MAAME,GAAG,GAAG,IAAIF,IAAJ,WAAYT,UAAZ,EAAZ;AACAW,EAAAA,GAAG,CAACC,OAAJ,CAAYJ,KAAK,CAACK,OAAN,KAAkBP,sBAAsB,GAAG,IAAvD;AAEA,MAAMQ,WAAmB,GAAG,CAACH,GAAG,CAACE,OAAJ,KAAgBH,GAAG,CAACG,OAAJ,EAAjB,IAAkC,IAA9D;AAEA,SAAOC,WAAP;AACD;;AAED,SAASP,sBAAT,CAAgCN,QAAhC,EAA0D;AAAA,wBACzBA,QAAQ,CAACc,KAAT,CAAe,GAAf,CADyB;AAAA;AAAA,MACjDC,KADiD;AAAA,MAC1CC,IAD0C;AAAA,MACpCC,OADoC;;AAGxD,MAAIC,YAAoB,GAAG,CAA3B;AACAA,EAAAA,YAAY,IAAIC,QAAQ,CAACJ,KAAD,CAAR,GAAkB,EAAlB,GAAuB,EAAvC;AACAG,EAAAA,YAAY,IAAIC,QAAQ,CAACH,IAAD,CAAR,GAAiB,EAAjB,GAAsB,EAAtC;AACAE,EAAAA,YAAY,IAAIC,QAAQ,CAACF,OAAD,CAAxB;AAEA,SAAOC,YAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\ninterface IProps {\n  start_time: string;\n  duration: string;\n}\n\nconst Timer: React.FC<IProps> = ({ start_time, duration }) => {\n    const [timeRemaining, setTimeRemaining] = useSta\n  return <p></p>;\n};\n\nexport default Timer;\n\nfunction getTimeRemainingInSeconds(start_time: string, duration: string) {\n  const totalDurationInSeconds: number = getSecondsFromDuration(duration);\n\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n\n  const secondsLeft: number = (end.getTime() - now.getTime()) / 1000;\n\n  return secondsLeft;\n}\n\nfunction getSecondsFromDuration(duration: string): number {\n  const [hours, mins, seconds] = duration.split(\":\");\n\n  let totalSeconds: number = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60 * 60;\n  totalSeconds += parseInt(seconds);\n\n  return totalSeconds;\n}\n"]},"metadata":{},"sourceType":"module"}