{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocalState from \"../../../../../../custom-hooks/useLocalState\";\nimport getQuizInfo from \"../../../../../../repository/QuizInfo/getQuizInfo\";\nexport default function useQuizInfo(quizId) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: testStatus,\n    1: setTestStatus\n  } = useState(\"unknown\");\n  const {\n    0: quizInfo,\n    1: setQuizInfo\n  } = useState({});\n  const {\n    0: userInfo,\n    1: setUserInfo\n  } = useState({});\n  const [user] = useLocalState(\"user\", \"\");\n  router.push(`/test/quiz/${quizId}`);\n  useEffect(() => {\n    fetchQuizInfo();\n  }, []);\n\n  const fetchQuizInfo = async () => {\n    setIsLoading(true);\n    const response = await getQuizInfo(quizId, user === null || user === void 0 ? void 0 : user.token);\n\n    if ((response === null || response === void 0 ? void 0 : response.test_status) === \"ongoing\") {}\n\n    setIsLoading(false);\n\n    const _testStatus = response === null || response === void 0 ? void 0 : response.test_status;\n\n    if (_testStatus !== \"new_test\" && _testStatus !== \"retake\" && _testStatus !== \"highest_attempt_count_reached\" && _testStatus !== \"ongoing\") {\n      setTestStatus(\"unknown\");\n      return;\n    }\n\n    setTestStatus(response === null || response === void 0 ? void 0 : response.test_status);\n    setQuizInfo(response === null || response === void 0 ? void 0 : response.quiz_info);\n    setUserInfo(response === null || response === void 0 ? void 0 : response.user_info);\n    console.log(response);\n  };\n\n  return {\n    testStatus,\n    quizInfo,\n    userInfo,\n    isLoading\n  };\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/Quizzes/Quiz/TakeQuizButton/QuizInfoModal/QuizInfo/useQuizInfo.ts"],"names":["useEffect","useState","useLocalState","getQuizInfo","useQuizInfo","quizId","isLoading","setIsLoading","testStatus","setTestStatus","quizInfo","setQuizInfo","userInfo","setUserInfo","user","router","push","fetchQuizInfo","response","token","test_status","_testStatus","quiz_info","user_info","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AAGA,OAAOC,WAAP,MAAwB,mDAAxB;AAEA,eAAe,SAASC,WAAT,CAAqBC,MAArB,EAAqC;AAClD,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM;AAAA,OAACO,UAAD;AAAA,OAAaC;AAAb,MAA8BR,QAAQ,CAAc,SAAd,CAA5C;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAM,EAAN,CAAxC;AACA,QAAM;AAAA,OAACW,QAAD;AAAA,OAAWC;AAAX,MAA0BZ,QAAQ,CAAM,EAAN,CAAxC;AACA,QAAM,CAACa,IAAD,IAASZ,aAAa,CAAC,MAAD,EAAS,EAAT,CAA5B;AAEAa,EAAAA,MAAM,CAACC,IAAP,CAAa,cAAaX,MAAO,EAAjC;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,aAAa,GAAG,YAAY;AAChCV,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMW,QAAQ,GAAG,MAAMf,WAAW,CAACE,MAAD,EAASS,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEK,KAAf,CAAlC;;AAEA,QAAI,CAAAD,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,WAAV,MAA0B,SAA9B,EAAyC,CACxC;;AAEDb,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AAEA,UAAMc,WAAW,GAAGH,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEE,WAA9B;;AAEA,QACEC,WAAW,KAAK,UAAhB,IACAA,WAAW,KAAK,QADhB,IAEAA,WAAW,KAAK,+BAFhB,IAGAA,WAAW,KAAK,SAJlB,EAKE;AACAZ,MAAAA,aAAa,CAAC,SAAD,CAAb;AACA;AACD;;AAEDA,IAAAA,aAAa,CAACS,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEE,WAAX,CAAb;AACAT,IAAAA,WAAW,CAACO,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEI,SAAX,CAAX;AACAT,IAAAA,WAAW,CAACK,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEK,SAAX,CAAX;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACD,GA1BD;;AA4BA,SAAO;AACLV,IAAAA,UADK;AAELE,IAAAA,QAFK;AAGLE,IAAAA,QAHK;AAILN,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useLocalState from \"../../../../../../custom-hooks/useLocalState\";\nimport IQuiz from \"../../../../../../Models/IQuiz\";\nimport TTestStatus from \"../../../../../../Models/TTestStatus\";\nimport getQuizInfo from \"../../../../../../repository/QuizInfo/getQuizInfo\";\n\nexport default function useQuizInfo(quizId: number) {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [testStatus, setTestStatus] = useState<TTestStatus>(\"unknown\");\n  const [quizInfo, setQuizInfo] = useState<any>({});\n  const [userInfo, setUserInfo] = useState<any>({});\n  const [user] = useLocalState(\"user\", \"\");\n\n  router.push(`/test/quiz/${quizId}`);\n\n  useEffect(() => {\n    fetchQuizInfo();\n  }, []);\n\n  const fetchQuizInfo = async () => {\n    setIsLoading(true);\n    const response = await getQuizInfo(quizId, user?.token);\n\n    if (response?.test_status === \"ongoing\") {\n    }\n\n    setIsLoading(false);\n\n    const _testStatus = response?.test_status;\n\n    if (\n      _testStatus !== \"new_test\" &&\n      _testStatus !== \"retake\" &&\n      _testStatus !== \"highest_attempt_count_reached\" &&\n      _testStatus !== \"ongoing\"\n    ) {\n      setTestStatus(\"unknown\");\n      return;\n    }\n\n    setTestStatus(response?.test_status);\n    setQuizInfo(response?.quiz_info);\n    setUserInfo(response?.user_info);\n\n    console.log(response);\n  };\n\n  return {\n    testStatus,\n    quizInfo,\n    userInfo,\n    isLoading,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}