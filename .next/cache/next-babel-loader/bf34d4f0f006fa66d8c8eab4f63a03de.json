{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/Layout/Topbar/NavItems/NavItem/Login/Login.tsx\";\nimport React from \"react\";\nimport useLocalState from \"../../../../../../custom-hooks/useLocalState\";\nimport { backend_url } from \"../../../../../../url\";\nimport post from \"../../../../../../UtilFunctions/post\";\nimport GoogleLoginButton from \"../../../../../GoogleLoginButton/GoogleLoginButton\";\nimport User from \"./User/User\";\n\nconst Login = () => {\n  const [user, setUser] = useLocalState(\"user\", \"\");\n\n  const onSignIn = async googleUser => {\n    if (!googleUser.error) {\n      const profile = googleUser.getBasicProfile();\n      const id_token = googleUser.getAuthResponse().id_token;\n      const google_id = parseInt(profile.getId());\n      post(`${backend_url}/api/auth/google/verify`, {\n        id_token: id_token,\n        google_id: google_id\n      }, response => {\n        setUser(response.data);\n      }, () => {\n        signOut();\n      });\n    }\n  };\n\n  function signOut() {\n    const w = window;\n    const {\n      gapi\n    } = w;\n    const auth2 = gapi.auth2.getAuthInstance();\n    auth2.signOut().then(function () {});\n  }\n\n  if (user) return /*#__PURE__*/_jsxDEV(User, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 20\n  }, this);\n  return /*#__PURE__*/_jsxDEV(GoogleLoginButton, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Login;","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/Layout/Topbar/NavItems/NavItem/Login/Login.tsx"],"names":["React","useLocalState","backend_url","post","GoogleLoginButton","User","Login","user","setUser","onSignIn","googleUser","error","profile","getBasicProfile","id_token","getAuthResponse","google_id","parseInt","getId","response","data","signOut","w","window","gapi","auth2","getAuthInstance","then"],"mappings":";;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AAEA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,OAAOC,IAAP,MAAiB,sCAAjB;AACA,OAAOC,iBAAP,MAA8B,oDAA9B;AAEA,OAAOC,IAAP,MAAiB,aAAjB;;AAIA,MAAMC,KAAuB,GAAG,MAAM;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,aAAa,CAAC,MAAD,EAAS,EAAT,CAArC;;AAEA,QAAMQ,QAAQ,GAAG,MAAOC,UAAP,IAA2B;AAC1C,QAAI,CAACA,UAAU,CAACC,KAAhB,EAAuB;AACrB,YAAMC,OAAO,GAAGF,UAAU,CAACG,eAAX,EAAhB;AACA,YAAMC,QAAQ,GAAGJ,UAAU,CAACK,eAAX,GAA6BD,QAA9C;AACA,YAAME,SAAS,GAAGC,QAAQ,CAACL,OAAO,CAACM,KAAR,EAAD,CAA1B;AAEAf,MAAAA,IAAI,CACD,GAAED,WAAY,yBADb,EAEF;AAAEY,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBE,QAAAA,SAAS,EAAEA;AAAjC,OAFE,EAGDG,QAAD,IAAmB;AACjBX,QAAAA,OAAO,CAACW,QAAQ,CAACC,IAAV,CAAP;AACD,OALC,EAMF,MAAM;AACJC,QAAAA,OAAO;AACR,OARC,CAAJ;AAUD;AACF,GAjBD;;AAmBA,WAASA,OAAT,GAAmB;AACjB,UAAMC,CAAM,GAAGC,MAAf;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAWF,CAAjB;AAEA,UAAMG,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAWC,eAAX,EAAd;AACAD,IAAAA,KAAK,CAACJ,OAAN,GAAgBM,IAAhB,CAAqB,YAAY,CAAE,CAAnC;AACD;;AAED,MAAIpB,IAAJ,EAAU,oBAAO,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEV,sBAAO,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjCD;;AAmCA,eAAeD,KAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport useLocalState from \"../../../../../../custom-hooks/useLocalState\";\n\nimport { backend_url } from \"../../../../../../url\";\n\nimport post from \"../../../../../../UtilFunctions/post\";\nimport GoogleLoginButton from \"../../../../../GoogleLoginButton/GoogleLoginButton\";\n\nimport User from \"./User/User\";\n\ninterface IProps {}\n\nconst Login: React.FC<IProps> = () => {\n  const [user, setUser] = useLocalState(\"user\", \"\");\n\n  const onSignIn = async (googleUser: any) => {\n    if (!googleUser.error) {\n      const profile = googleUser.getBasicProfile();\n      const id_token = googleUser.getAuthResponse().id_token;\n      const google_id = parseInt(profile.getId());\n\n      post(\n        `${backend_url}/api/auth/google/verify`,\n        { id_token: id_token, google_id: google_id },\n        (response: any) => {\n          setUser(response.data);\n        },\n        () => {\n          signOut();\n        }\n      );\n    }\n  };\n\n  function signOut() {\n    const w: any = window;\n    const { gapi } = w;\n\n    const auth2 = gapi.auth2.getAuthInstance();\n    auth2.signOut().then(function () {});\n  }\n\n  if (user) return <User />;\n\n  return <GoogleLoginButton />;\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}