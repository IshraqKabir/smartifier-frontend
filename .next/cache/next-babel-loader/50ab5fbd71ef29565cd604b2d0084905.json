{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, makeStyles, Typography, withStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\n\nvar Timer = function Timer(_ref) {\n  _s();\n\n  var start_time = _ref.start_time,\n      duration = _ref.duration;\n\n  var _useState = useState(getTimeRemainingInSeconds(start_time, duration)),\n      secondsRemaining = _useState[0],\n      setSecondsRemaining = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      timeRemaining = _useState2[0],\n      setTimeRemaing = _useState2[1];\n\n  var _useState3 = useState(getPercentage(start_time, duration)),\n      percentage = _useState3[0],\n      setPercentage = _useState3[1];\n\n  var classes = useStyles({\n    percentage: percentage\n  });\n  useEffect(function () {\n    setInterval(function () {\n      setSecondsRemaining(getTimeRemainingInSeconds(start_time, duration));\n    }, 500);\n  }, []);\n  useEffect(function () {\n    if (secondsRemaining <= 0) {\n      setTimeRemaing(\"Test Finished\");\n    } else {\n      setPercentage(getPercentage(start_time, duration));\n      setTimeRemaing(parseSecondsToClock(secondsRemaining));\n    }\n  }, [secondsRemaining]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Time, {\n      variant: \"h6\",\n      children: \"\".concat(timeRemaining)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.loader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Timer, \"c2Jsuw1nfDu0fXMxjx3f3RqAGCU=\", false, function () {\n  return [useStyles];\n});\n\n_c = Timer;\nexport default Timer;\nvar Container = withStyles({\n  root: {\n    position: \"fixed\",\n    bottom: 0,\n    left: 0,\n    textAlign: \"center\",\n    right: 0,\n    backgroundColor: \"transparent\",\n    fontWeight: \"bold\"\n  }\n})(Box);\nvar useStyles = makeStyles({\n  loader: {\n    display: \"relative\",\n    zIndex: \"-2\",\n    padding: \"1rem\",\n    background: \"transparent linear-gradient(180deg, #003EAA 0%, #002461E0 100%) 0% 0% no-repeat padding-box\",\n    opacity: 1,\n    width: function width(props) {\n      var percentage = props.percentage;\n      return \"\".concat(percentage, \"%\");\n    }\n  }\n});\nvar Time = withStyles({\n  root: {\n    color: \"white\",\n    opacity: 1\n  }\n})(Typography);\n\nfunction getTimeRemainingInSeconds(start_time, duration) {\n  var totalDurationInSeconds = getSecondsFromDuration(duration);\n  var start = new Date(\"\".concat(start_time));\n  var now = new Date();\n  var end = new Date(\"\".concat(start_time));\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  var secondsLeft = (end.getTime() - now.getTime()) / 1000;\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration) {\n  var _duration$split = duration.split(\":\"),\n      _duration$split2 = _slicedToArray(_duration$split, 3),\n      hours = _duration$split2[0],\n      mins = _duration$split2[1],\n      seconds = _duration$split2[2];\n\n  var totalSeconds = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining) {\n  var mins = Math.floor(secondsRemaining / 60);\n  var seconds = Math.floor(secondsRemaining % 60);\n  return \"\".concat(mins < 10 ? \"0\".concat(mins) : mins, \":\").concat(seconds < 10 ? \"0\".concat(seconds) : seconds);\n}\n\nfunction getPercentage(start_time, duration) {\n  var totalDurationInSeconds = getSecondsFromDuration(duration);\n  var start = new Date(\"\".concat(start_time));\n  var now = new Date();\n  var end = new Date(\"\".concat(start_time));\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  var percentage = (now.getTime() - start.getTime()) / (totalDurationInSeconds * 10);\n  return percentage + 1;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx"],"names":["Box","makeStyles","Typography","withStyles","React","useEffect","useState","Timer","start_time","duration","getTimeRemainingInSeconds","secondsRemaining","setSecondsRemaining","timeRemaining","setTimeRemaing","getPercentage","percentage","setPercentage","classes","useStyles","setInterval","parseSecondsToClock","loader","Container","root","position","bottom","left","textAlign","right","backgroundColor","fontWeight","display","zIndex","padding","background","opacity","width","props","Time","color","totalDurationInSeconds","getSecondsFromDuration","start","Date","now","end","setTime","getTime","secondsLeft","Math","floor","split","hours","mins","seconds","totalSeconds","parseInt"],"mappings":"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","sourcesContent":["import { Box, makeStyles, Typography, withStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\n\ninterface IProps {\n  start_time: string;\n  duration: string;\n}\n\nconst Timer: React.FC<IProps> = ({ start_time, duration }) => {\n  const [secondsRemaining, setSecondsRemaining] = useState<number>(\n    getTimeRemainingInSeconds(start_time, duration)\n  );\n\n  const [timeRemaining, setTimeRemaing] = useState<string>(\"\");\n  const [percentage, setPercentage] = useState<number>(\n    getPercentage(start_time, duration)\n  );\n\n  const classes = useStyles({ percentage });\n\n  useEffect(() => {\n    setInterval(() => {\n      setSecondsRemaining(getTimeRemainingInSeconds(start_time, duration));\n    }, 500);\n  }, []);\n\n  useEffect(() => {\n    if (secondsRemaining <= 0) {\n      setTimeRemaing(\"Test Finished\");\n    } else {\n      setPercentage(getPercentage(start_time, duration));\n      setTimeRemaing(parseSecondsToClock(secondsRemaining));\n    }\n  }, [secondsRemaining]);\n\n  return (\n    <Container>\n      <Time variant=\"h6\">{`${timeRemaining}`}</Time>\n      <div className={classes.loader}></div>\n    </Container>\n  );\n};\n\nexport default Timer;\n\nconst Container = withStyles({\n  root: {\n    position: \"fixed\",\n    bottom: 0,\n    left: 0,\n    textAlign: \"center\",\n    right: 0,\n    backgroundColor: \"transparent\",\n    fontWeight: \"bold\",\n  },\n})(Box);\n\nconst useStyles = makeStyles({\n  loader: {\n    display: \"relative\",\n    zIndex: \"-2\",\n    padding: \"1rem\",\n    background:\n      \"transparent linear-gradient(180deg, #003EAA 0%, #002461E0 100%) 0% 0% no-repeat padding-box\",\n    opacity: 1,\n    width: (props: { percentage: number }) => {\n      const { percentage } = props;\n\n      return `${percentage}%`;\n    },\n  },\n});\n\nconst Time = withStyles({\n  root: {\n    color: \"white\",\n    opacity: 1,\n  },\n})(Typography);\n\nfunction getTimeRemainingInSeconds(\n  start_time: string,\n  duration: string\n): number {\n  const totalDurationInSeconds: number = getSecondsFromDuration(duration);\n\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n\n  const secondsLeft: number = (end.getTime() - now.getTime()) / 1000;\n\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration: string): number {\n  const [hours, mins, seconds] = duration.split(\":\");\n\n  let totalSeconds: number = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining: number): string {\n  const mins = Math.floor(secondsRemaining / 60);\n  const seconds = Math.floor(secondsRemaining % 60);\n\n  return `${mins < 10 ? `0${mins}` : mins}:${\n    seconds < 10 ? `0${seconds}` : seconds\n  }`;\n}\n\nfunction getPercentage(start_time: string, duration: string): number {\n  const totalDurationInSeconds: number = getSecondsFromDuration(duration);\n\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n\n  const percentage: number =\n    (now.getTime() - start.getTime()) / (totalDurationInSeconds * 10);\n\n  return percentage + 1;\n}\n"]},"metadata":{},"sourceType":"module"}