{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest2/Timer/Timer.tsx\";\nimport { Box, makeStyles, Typography, withStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Timer = ({\n  start_time,\n  duration,\n  secondsRemaining,\n  setSecondsRemaining\n}) => {\n  const {\n    0: timeRemaining,\n    1: setTimeRemaing\n  } = useState(\"\");\n  const {\n    0: percentage,\n    1: setPercentage\n  } = useState(getPercentage(start_time, duration));\n  const classes = useStyles({\n    percentage,\n    secondsRemaining\n  });\n  useEffect(() => {\n    setInterval(() => {\n      setSecondsRemaining(getTimeRemainingInSeconds(start_time, duration));\n    }, 500);\n  }, []);\n  useEffect(() => {\n    if (secondsRemaining <= 0) {\n      setTimeRemaing(\"Test Finished\");\n    } else {\n      setPercentage(getPercentage(start_time, duration));\n      setTimeRemaing(parseSecondsToClock(secondsRemaining));\n    }\n  }, [secondsRemaining]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.loader,\n      children: /*#__PURE__*/_jsxDEV(Time, {\n        variant: \"h6\",\n        children: `${timeRemaining}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Timer;\nconst Container = withStyles({\n  root: {\n    position: \"fixed\",\n    top: 100,\n    zIndex: 4000,\n    left: 0,\n    textAlign: \"center\",\n    right: 0,\n    backgroundColor: \"transparent\",\n    fontWeight: \"bold\",\n    [\"@media (max-width: 700px)\"]: {\n      top: 135\n    }\n  }\n})(Box);\nconst MINUTE_LEFT_FOR_WARNING = 1;\nconst useStyles = makeStyles({\n  loader: {\n    display: \"relative\",\n    backgroundColor: props => {\n      const {\n        secondsRemaining\n      } = props;\n\n      if (secondsRemaining <= MINUTE_LEFT_FOR_WARNING * 60) {\n        return \"#cc3300\";\n      }\n\n      return \"#209434\";\n    },\n    opacity: 1,\n    width: props => {\n      const {\n        percentage\n      } = props;\n      return `${percentage}%`;\n    }\n  }\n});\nconst Time = withStyles({\n  root: {\n    color: \"white\",\n    opacity: 1\n  }\n})(Typography);\nexport function getTimeRemainingInSeconds(start_time, duration) {\n  const totalDurationInSeconds = getSecondsFromDuration(duration);\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  const secondsLeft = (end.getTime() - now.getTime()) / 1000;\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration) {\n  const [hours, mins, seconds] = duration.split(\":\");\n  let totalSeconds = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining) {\n  const mins = Math.floor(secondsRemaining / 60);\n  const seconds = Math.floor(secondsRemaining % 60);\n  return `${mins < 10 ? `0${mins}` : mins}:${seconds < 10 ? `0${seconds}` : seconds}`;\n}\n\nfunction getPercentage(start_time, duration) {\n  const totalDurationInSeconds = getSecondsFromDuration(duration);\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  const percentage = (now.getTime() - start.getTime()) / (totalDurationInSeconds * 10);\n  return percentage + 1;\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest2/Timer/Timer.tsx"],"names":["Box","makeStyles","Typography","withStyles","React","useEffect","useState","Timer","start_time","duration","secondsRemaining","setSecondsRemaining","timeRemaining","setTimeRemaing","percentage","setPercentage","getPercentage","classes","useStyles","setInterval","getTimeRemainingInSeconds","parseSecondsToClock","loader","Container","root","position","top","zIndex","left","textAlign","right","backgroundColor","fontWeight","MINUTE_LEFT_FOR_WARNING","display","props","opacity","width","Time","color","totalDurationInSeconds","getSecondsFromDuration","start","Date","now","end","setTime","getTime","secondsLeft","Math","floor","hours","mins","seconds","split","totalSeconds","parseInt"],"mappings":"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","sourcesContent":["import { Box, makeStyles, Typography, withStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\n\ninterface IProps {\n  start_time: string;\n  duration: string;\n  secondsRemaining: number;\n  setSecondsRemaining: Function;\n}\n\nconst Timer: React.FC<IProps> = ({\n  start_time,\n  duration,\n  secondsRemaining,\n  setSecondsRemaining,\n}) => {\n  const [timeRemaining, setTimeRemaing] = useState<string>(\"\");\n  const [percentage, setPercentage] = useState<number>(\n    getPercentage(start_time, duration)\n  );\n\n  const classes = useStyles({ percentage, secondsRemaining });\n\n  useEffect(() => {\n    setInterval(() => {\n      setSecondsRemaining(getTimeRemainingInSeconds(start_time, duration));\n    }, 500);\n  }, []);\n\n  useEffect(() => {\n    if (secondsRemaining <= 0) {\n      setTimeRemaing(\"Test Finished\");\n    } else {\n      setPercentage(getPercentage(start_time, duration));\n      setTimeRemaing(parseSecondsToClock(secondsRemaining));\n    }\n  }, [secondsRemaining]);\n\n  return (\n    <Container>\n      <div className={classes.loader}>\n        <Time variant=\"h6\">{`${timeRemaining}`}</Time>\n      </div>\n    </Container>\n  );\n};\n\nexport default Timer;\n\nconst Container = withStyles({\n  root: {\n    position: \"fixed\",\n    top: 100,\n    zIndex: 4000,\n    left: 0,\n    textAlign: \"center\",\n    right: 0,\n    backgroundColor: \"transparent\",\n    fontWeight: \"bold\",\n    [\"@media (max-width: 700px)\"]: {\n      top: 135,\n    },\n  },\n})(Box);\n\nconst MINUTE_LEFT_FOR_WARNING: number = 1;\n\ninterface IStyleProp {\n  percentage: number;\n  secondsRemaining: number;\n}\n\nconst useStyles = makeStyles({\n  loader: {\n    display: \"relative\",\n    backgroundColor: (props: IStyleProp) => {\n      const { secondsRemaining } = props;\n\n      if (secondsRemaining <= MINUTE_LEFT_FOR_WARNING * 60) {\n        return \"#cc3300\";\n      }\n\n      return \"#209434\";\n    },\n    opacity: 1,\n    width: (props: IStyleProp) => {\n      const { percentage } = props;\n\n      return `${percentage}%`;\n    },\n  },\n});\n\nconst Time = withStyles({\n  root: {\n    color: \"white\",\n    opacity: 1,\n  },\n})(Typography);\n\nexport function getTimeRemainingInSeconds(\n  start_time: string,\n  duration: string\n): number {\n  const totalDurationInSeconds: number = getSecondsFromDuration(duration);\n\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n\n  const secondsLeft: number = (end.getTime() - now.getTime()) / 1000;\n\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration: string): number {\n  const [hours, mins, seconds] = duration.split(\":\");\n\n  let totalSeconds: number = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining: number): string {\n  const mins = Math.floor(secondsRemaining / 60);\n  const seconds = Math.floor(secondsRemaining % 60);\n\n  return `${mins < 10 ? `0${mins}` : mins}:${\n    seconds < 10 ? `0${seconds}` : seconds\n  }`;\n}\n\nfunction getPercentage(start_time: string, duration: string): number {\n  const totalDurationInSeconds: number = getSecondsFromDuration(duration);\n\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n\n  const percentage: number =\n    (now.getTime() - start.getTime()) / (totalDurationInSeconds * 10);\n\n  return percentage + 1;\n}\n"]},"metadata":{},"sourceType":"module"}