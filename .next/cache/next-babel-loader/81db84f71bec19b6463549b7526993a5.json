{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nimport useLocalState from \"../custom-hooks/useLocalState\";\nexport default async function post(url, data, callBack, errorCallBack, isMultipart = false) {\n  const user = getUser();\n  const config = {\n    method: \"post\",\n    url,\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${user.token}`\n    },\n    data\n  };\n\n  if (isMultipart) {\n    config = _objectSpread(_objectSpread({}, config), {}, {\n      \"Content-Type\": \"multipart/form-data\"\n    });\n  }\n\n  axios(config).then(response => {\n    callBack(response);\n  }).catch(error => {\n    errorCallBack(error);\n  });\n}\n\nfunction getUser() {\n  const key = \"user\";\n  const defaultValue = \"\";\n\n  if (false) {\n    const storedValue = JSON.parse(localStorage.getItem(key));\n\n    if (!storedValue) {\n      return defaultValue;\n    }\n\n    return storedValue === null ? defaultValue : storedValue;\n  } else {\n    return defaultValue;\n  }\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/UtilFunctions/postFunc.js"],"names":["axios","useLocalState","post","url","data","callBack","errorCallBack","isMultipart","user","getUser","config","method","headers","Accept","Authorization","token","then","response","catch","error","key","defaultValue","storedValue","JSON","parse","localStorage","getItem"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,aAAP,MAA0B,+BAA1B;AAEA,eAAe,eAAeC,IAAf,CACbC,GADa,EAEbC,IAFa,EAGbC,QAHa,EAIbC,aAJa,EAKbC,WAAW,GAAG,KALD,EAMb;AACA,QAAMC,IAAI,GAAGC,OAAO,EAApB;AAEA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbR,IAAAA,GAFa;AAGbS,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEPC,MAAAA,aAAa,EAAG,UAASN,IAAI,CAACO,KAAM;AAF7B,KAHI;AAObX,IAAAA;AAPa,GAAf;;AAUA,MAAIG,WAAJ,EAAiB;AACfG,IAAAA,MAAM,mCACDA,MADC;AAEJ,sBAAgB;AAFZ,MAAN;AAID;;AAEDV,EAAAA,KAAK,CAACU,MAAD,CAAL,CACGM,IADH,CACSC,QAAD,IAAc;AAClBZ,IAAAA,QAAQ,CAACY,QAAD,CAAR;AACD,GAHH,EAIGC,KAJH,CAIUC,KAAD,IAAW;AAChBb,IAAAA,aAAa,CAACa,KAAD,CAAb;AACD,GANH;AAOD;;AAED,SAASV,OAAT,GAAmB;AACjB,QAAMW,GAAG,GAAG,MAAZ;AACA,QAAMC,YAAY,GAAG,EAArB;;AAEA,aAAqB;AACnB,UAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBN,GAArB,CAAX,CAApB;;AACA,QAAI,CAACE,WAAL,EAAkB;AAChB,aAAOD,YAAP;AACD;;AACD,WAAOC,WAAW,KAAK,IAAhB,GAAuBD,YAAvB,GAAsCC,WAA7C;AACD,GAND,MAMO;AACL,WAAOD,YAAP;AACD;AACF","sourcesContent":["import axios from \"axios\";\n\nimport useLocalState from \"../custom-hooks/useLocalState\";\n\nexport default async function post(\n  url,\n  data,\n  callBack,\n  errorCallBack,\n  isMultipart = false\n) {\n  const user = getUser();\n\n  const config = {\n    method: \"post\",\n    url,\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${user.token}`,\n    },\n    data,\n  };\n\n  if (isMultipart) {\n    config = {\n      ...config,\n      \"Content-Type\": \"multipart/form-data\",\n    };\n  }\n\n  axios(config)\n    .then((response) => {\n      callBack(response);\n    })\n    .catch((error) => {\n      errorCallBack(error);\n    });\n}\n\nfunction getUser() {\n  const key = \"user\";\n  const defaultValue = \"\";\n\n  if (process.browser) {\n    const storedValue = JSON.parse(localStorage.getItem(key));\n    if (!storedValue) {\n      return defaultValue;\n    }\n    return storedValue === null ? defaultValue : storedValue;\n  } else {\n    return defaultValue;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}