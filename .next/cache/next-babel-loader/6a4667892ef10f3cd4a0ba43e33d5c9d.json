{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport getIsOptionChecked from \"../../../../../../../UtilFunctions/getIsOptionChecked\";\nexport default function useOption(optionId, question, answers, setAnswers) {\n  _s();\n\n  var _useState = useState(getIsOptionChecked(optionId, question, answers)),\n      isChecked = _useState[0],\n      setIsChecked = _useState[1];\n\n  useEffect(function () {\n    setIsChecked(getIsOptionChecked(optionId, question, answers));\n  }, [answers]);\n\n  var handleClick = function handleClick() {\n    setAnswers(optionId, question);\n  };\n\n  return {\n    isChecked: isChecked,\n    handleClick: handleClick\n  };\n}\n\n_s(useOption, \"jOkPxAqL822iEiTLuWtbB/tPuIA=\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/SingleQuestion/Question/Options/Option/useOption.tsx"],"names":["useEffect","useState","getIsOptionChecked","useOption","optionId","question","answers","setAnswers","isChecked","setIsChecked","handleClick"],"mappings":";;AAAA,SAAgBA,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,kBAAP,MAA+B,uDAA/B;AAEA,eAAe,SAASC,SAAT,CACbC,QADa,EAEbC,QAFa,EAGbC,OAHa,EAIbC,UAJa,EAKb;AAAA;;AAAA,kBACkCN,QAAQ,CACxCC,kBAAkB,CAACE,QAAD,EAAWC,QAAX,EAAqBC,OAArB,CADsB,CAD1C;AAAA,MACOE,SADP;AAAA,MACkBC,YADlB;;AAKAT,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,YAAY,CAACP,kBAAkB,CAACE,QAAD,EAAWC,QAAX,EAAqBC,OAArB,CAAnB,CAAZ;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAMI,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBH,IAAAA,UAAU,CAACH,QAAD,EAAWC,QAAX,CAAV;AACD,GAFD;;AAIA,SAAO;AAAEG,IAAAA,SAAS,EAATA,SAAF;AAAaE,IAAAA,WAAW,EAAXA;AAAb,GAAP;AACD;;GAnBuBP,S","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport getIsOptionChecked from \"../../../../../../../UtilFunctions/getIsOptionChecked\";\n\nexport default function useOption(\n  optionId: number,\n  question: any,\n  answers: any,\n  setAnswers: (optionId: number, question: any) => void\n) {\n  const [isChecked, setIsChecked] = useState(\n    getIsOptionChecked(optionId, question, answers)\n  );\n\n  useEffect(() => {\n    setIsChecked(getIsOptionChecked(optionId, question, answers));\n  }, [answers]);\n\n  const handleClick = () => {\n    setAnswers(optionId, question);\n  };\n\n  return { isChecked, handleClick };\n}\n"]},"metadata":{},"sourceType":"module"}