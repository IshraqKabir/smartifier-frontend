{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/pages/authresp/google.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport post from \"../../UtilFunctions/post\";\nimport { backend_url } from \"../../url\";\n\nvar Google = function Google() {\n  _s();\n\n  var router = useRouter();\n  var code = router.query.code;\n\n  var _useLocalState = useLocalState(\"user\", \"\"),\n      _useLocalState2 = _slicedToArray(_useLocalState, 2),\n      user = _useLocalState2[0],\n      setUser = _useLocalState2[1];\n\n  console.log(code);\n  useEffect(function () {\n    if (code) {\n      axios({\n        method: \"get\",\n        url: \"/api/auth/google?get=user&code=\".concat(code)\n      }).then(function (res) {\n        console.log(res.data.user.data.tokens.id_token);\n        var id_token = res.data.user.data.tokens.id_token;\n        post(\"\".concat(backend_url, \"/api/auth/google/verify\"), {\n          id_token: id_token,\n          code: code\n        }, function (response) {\n          setUser(response.data);\n        }, function () {\n          setUser(\"\");\n        });\n      });\n    }\n  }, [code]);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Google, \"I8aHtubSf0CKljcs63vY8YN01os=\", true, function () {\n  return [useRouter];\n});\n\n_c = Google;\nexport default Google;\n\nvar _c;\n\n$RefreshReg$(_c, \"Google\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/pages/authresp/google.tsx"],"names":["React","useEffect","useRouter","axios","post","backend_url","Google","router","code","query","useLocalState","user","setUser","console","log","method","url","then","res","data","tokens","id_token","response"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,SAASC,WAAT,QAA4B,WAA5B;;AAIA,IAAMC,MAAwB,GAAG,SAA3BA,MAA2B,GAAM;AAAA;;AACrC,MAAMC,MAAM,GAAGL,SAAS,EAAxB;AADqC,MAE7BM,IAF6B,GAEpBD,MAAM,CAACE,KAFa,CAE7BD,IAF6B;;AAAA,uBAIbE,aAAa,CAAM,MAAN,EAAc,EAAd,CAJA;AAAA;AAAA,MAI9BC,IAJ8B;AAAA,MAIxBC,OAJwB;;AAMrCC,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,IAAJ,EAAU;AACRL,MAAAA,KAAK,CAAC;AACJY,QAAAA,MAAM,EAAE,KADJ;AAEJC,QAAAA,GAAG,2CAAoCR,IAApC;AAFC,OAAD,CAAL,CAGGS,IAHH,CAGQ,UAACC,GAAD,EAAS;AACfL,QAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACC,IAAJ,CAASR,IAAT,CAAcQ,IAAd,CAAmBC,MAAnB,CAA0BC,QAAtC;AACA,YAAMA,QAAQ,GAAGH,GAAG,CAACC,IAAJ,CAASR,IAAT,CAAcQ,IAAd,CAAmBC,MAAnB,CAA0BC,QAA3C;AAEAjB,QAAAA,IAAI,WACCC,WADD,8BAEF;AAAEgB,UAAAA,QAAQ,EAAEA,QAAZ;AAAsBb,UAAAA,IAAI,EAAEA;AAA5B,SAFE,EAGF,UAACc,QAAD,EAAmB;AACjBV,UAAAA,OAAO,CAACU,QAAQ,CAACH,IAAV,CAAP;AACD,SALC,EAMF,YAAM;AACJP,UAAAA,OAAO,CAAC,EAAD,CAAP;AACD,SARC,CAAJ;AAUD,OAjBD;AAkBD;AACF,GArBQ,EAqBN,CAACJ,IAAD,CArBM,CAAT;AAuBA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAhCD;;GAAMF,M;UACWJ,S;;;KADXI,M;AAkCN,eAAeA,MAAf","sourcesContent":["import React, { useEffect } from \"react\";\n\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport post from \"../../UtilFunctions/post\";\nimport { backend_url } from \"../../url\";\n\ninterface IProps {}\n\nconst Google: React.FC<IProps> = () => {\n  const router = useRouter();\n  const { code } = router.query;\n\n  const [user, setUser] = useLocalState<any>(\"user\", \"\");\n\n  console.log(code);\n\n  useEffect(() => {\n    if (code) {\n      axios({\n        method: \"get\",\n        url: `/api/auth/google?get=user&code=${code}`,\n      }).then((res) => {\n        console.log(res.data.user.data.tokens.id_token);\n        const id_token = res.data.user.data.tokens.id_token;\n\n        post(\n          `${backend_url}/api/auth/google/verify`,\n          { id_token: id_token, code: code },\n          (response: any) => {\n            setUser(response.data);\n          },\n          () => {\n            setUser(\"\");\n          }\n        );\n      });\n    }\n  }, [code]);\n\n  return <p>hello</p>;\n};\n\nexport default Google;\n"]},"metadata":{},"sourceType":"module"}