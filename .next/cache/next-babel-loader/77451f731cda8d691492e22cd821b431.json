{"ast":null,"code":"import { useState, useEffect } from \"react\";\n\nconst useLocalState = (key, defaultValue) => {\n  const {\n    0: value,\n    1: setValueState\n  } = useState(() => {\n    return defaultValue;\n  });\n  useEffect(() => {\n    const listener = e => {\n      if (e.storageArea === localStorage && e.key === key) {\n        setValueState(JSON.parse(e.newValue)); // change value in local storage\n      }\n    };\n\n    window.addEventListener(\"storage\", listener);\n    return () => {\n      window.removeEventListener(\"storage\", listener);\n    };\n  }, [key]);\n\n  const setValue = newValue => {// set value both in local storage and cookie\n  };\n\n  return [value, setValue];\n};\n\nexport default useLocalState;\n\nconst getValue = () => {\n  if (isLocalStorageWorking()) {// return from local storage\n  } // return from cookie;\n\n};\n\nconst isLocalStorageWorking = () => {\n  return false;\n}; // const setCookie = (key, value) => {\n//   Cookies.set(\n//     key ? JSON.stringify(key) : key,\n//     value ? JSON.stringify(value) : value\n//   );\n// };\n// const getCookie = (key) => {\n//   const result = Cookies.get(JSON.stringify(key));\n//   return result ? JSON.parse(result) : result;\n// };\n// function useLocalState<T>(key: string, defaultValue: T) {\n//   const [value, setValue] = useState(() => {\n//     if (isLocalStorageWorking() == false) {\n//       return getCookie(key);\n//     }\n//     let result = null;\n//     if (process.browser) {\n//       const storedValue = localStorage.getItem(key)\n//         ? JSON.parse(localStorage.getItem(key))\n//         : localStorage.getItem(key);\n//       if (!storedValue) {\n//         result = defaultValue;\n//       }\n//       result = storedValue === null ? defaultValue : storedValue;\n//     } else {\n//       result = defaultValue;\n//     }\n//     return result;\n//   });\n//   useEffect(() => {\n//     const listener = (e) => {\n//       if (e.storageArea === localStorage && e.key === key) {\n//         setValue(JSON.parse(e.newValue));\n//       }\n//     };\n//     window.addEventListener(\"storage\", listener);\n//     return () => {\n//       window.removeEventListener(\"storage\", listener);\n//     };\n//   }, [key]);\n//   const setValueInLocalStorage = (newValue) => {\n//     setValue((currentValue) => {\n//       let value = null;\n//       if (typeof newValue === \"function\") {\n//         setCookie(key, newValue(currentValue));\n//         value = newValue(currentValue);\n//       } else {\n//         setCookie(key, newValue);\n//         value = newValue;\n//       }\n//       // const result =\n//       //   typeof newValue === \"function\" ? newValue(currentValue) : newValue;\n//       // localStorage.setItem(key, JSON.stringify(result));\n//       return value;\n//     });\n//   };\n//   useEffect(() => {\n//     const storedValue = JSON.parse(localStorage.getItem(key));\n//     if (storedValue) {\n//       setValueInLocalStorage(storedValue);\n//     } else {\n//       setValueInLocalStorage(value);\n//     }\n//   }, []);\n//   return [value, setValueInLocalStorage];\n// }\n// export default useLocalState;","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/custom-hooks/useLocalState.ts"],"names":["useState","useEffect","useLocalState","key","defaultValue","value","setValueState","listener","e","storageArea","localStorage","JSON","parse","newValue","window","addEventListener","removeEventListener","setValue","getValue","isLocalStorageWorking"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAGA,MAAMC,aAAa,GAAG,CAACC,GAAD,EAAcC,YAAd,KAAoC;AACxD,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAyBN,QAAQ,CAAC,MAAM;AAC5C,WAAOI,YAAP;AACD,GAFsC,CAAvC;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,QAAQ,GAAIC,CAAD,IAAO;AACtB,UAAIA,CAAC,CAACC,WAAF,KAAkBC,YAAlB,IAAkCF,CAAC,CAACL,GAAF,KAAUA,GAAhD,EAAqD;AACnDG,QAAAA,aAAa,CAACK,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACK,QAAb,CAAD,CAAb,CADmD,CAEnD;AACD;AACF,KALD;;AAMAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCR,QAAnC;AAEA,WAAO,MAAM;AACXO,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCT,QAAtC;AACD,KAFD;AAGD,GAZQ,EAYN,CAACJ,GAAD,CAZM,CAAT;;AAcA,QAAMc,QAAQ,GAAIJ,QAAD,IAAc,CAC7B;AACD,GAFD;;AAIA,SAAO,CAACR,KAAD,EAAQY,QAAR,CAAP;AACD,CAxBD;;AA0BA,eAAef,aAAf;;AAEA,MAAMgB,QAAQ,GAAG,MAAM;AACrB,MAAIC,qBAAqB,EAAzB,EAA6B,CAC3B;AACD,GAHoB,CAKrB;;AACD,CAND;;AAQA,MAAMA,qBAAqB,GAAG,MAAe;AAC3C,SAAO,KAAP;AACD,CAFD,C,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\n\nconst useLocalState = (key: string, defaultValue: any) => {\n  const [value, setValueState] = useState(() => {\n    return defaultValue;\n  });\n\n  useEffect(() => {\n    const listener = (e) => {\n      if (e.storageArea === localStorage && e.key === key) {\n        setValueState(JSON.parse(e.newValue));\n        // change value in local storage\n      }\n    };\n    window.addEventListener(\"storage\", listener);\n\n    return () => {\n      window.removeEventListener(\"storage\", listener);\n    };\n  }, [key]);\n\n  const setValue = (newValue) => {\n    // set value both in local storage and cookie\n  };\n\n  return [value, setValue];\n};\n\nexport default useLocalState;\n\nconst getValue = () => {\n  if (isLocalStorageWorking()) {\n    // return from local storage\n  }\n\n  // return from cookie;\n};\n\nconst isLocalStorageWorking = (): boolean => {\n  return false;\n};\n// const setCookie = (key, value) => {\n//   Cookies.set(\n//     key ? JSON.stringify(key) : key,\n//     value ? JSON.stringify(value) : value\n//   );\n// };\n\n// const getCookie = (key) => {\n//   const result = Cookies.get(JSON.stringify(key));\n//   return result ? JSON.parse(result) : result;\n// };\n\n// function useLocalState<T>(key: string, defaultValue: T) {\n//   const [value, setValue] = useState(() => {\n//     if (isLocalStorageWorking() == false) {\n//       return getCookie(key);\n//     }\n\n//     let result = null;\n//     if (process.browser) {\n//       const storedValue = localStorage.getItem(key)\n//         ? JSON.parse(localStorage.getItem(key))\n//         : localStorage.getItem(key);\n\n//       if (!storedValue) {\n//         result = defaultValue;\n//       }\n//       result = storedValue === null ? defaultValue : storedValue;\n//     } else {\n//       result = defaultValue;\n//     }\n\n//     return result;\n//   });\n\n//   useEffect(() => {\n//     const listener = (e) => {\n//       if (e.storageArea === localStorage && e.key === key) {\n//         setValue(JSON.parse(e.newValue));\n//       }\n//     };\n//     window.addEventListener(\"storage\", listener);\n\n//     return () => {\n//       window.removeEventListener(\"storage\", listener);\n//     };\n//   }, [key]);\n\n//   const setValueInLocalStorage = (newValue) => {\n//     setValue((currentValue) => {\n//       let value = null;\n//       if (typeof newValue === \"function\") {\n//         setCookie(key, newValue(currentValue));\n//         value = newValue(currentValue);\n//       } else {\n//         setCookie(key, newValue);\n//         value = newValue;\n//       }\n//       // const result =\n//       //   typeof newValue === \"function\" ? newValue(currentValue) : newValue;\n//       // localStorage.setItem(key, JSON.stringify(result));\n//       return value;\n//     });\n//   };\n\n//   useEffect(() => {\n//     const storedValue = JSON.parse(localStorage.getItem(key));\n//     if (storedValue) {\n//       setValueInLocalStorage(storedValue);\n//     } else {\n//       setValueInLocalStorage(value);\n//     }\n//   }, []);\n\n//   return [value, setValueInLocalStorage];\n// }\n\n// export default useLocalState;\n"]},"metadata":{},"sourceType":"module"}