{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/QuizTest.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext } from \"react\";\nimport useStartTest from \"./useStartTest\";\nimport { Box, CircularProgress, withStyles } from \"@material-ui/core\";\nimport PageTitle from \"../PageTitle/PageTitle\";\nimport Timer from \"./Timer/Timer\";\nimport Questions from \"../Questions/Questions\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport Submit from \"./Submit/Submit\";\nexport const QuizIDContext = /*#__PURE__*/createContext(null);\nexport const AnswersContext = /*#__PURE__*/createContext(null);\n\nconst QuizTest = ({\n  id,\n  status\n}) => {\n  var _test$quiz;\n\n  const {\n    test,\n    isLoading,\n    isError\n  } = useStartTest(id, status);\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswersState] = useLocalState(`${user.email}-quiz${id}-answers`, {});\n  if (isError) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Sorry some error occured. Please refresh the page.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, this);\n\n  const setAnswers = (optionID, question) => {\n    setAnswersState(state => {\n      let tempAnswers = _objectSpread({}, state);\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: []\n          });\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: [optionID]\n          });\n        }\n      } else if (question.answer_type === \"checkboxes\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: options.filter(option => option != optionID)\n          });\n        } else if (options && !options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: [...options, optionID]\n          });\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: [optionID]\n          });\n        }\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(PageTitle, {\n      title: isLoading ? \"Starting Test...\" : test.quiz.title,\n      children: isLoading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), test && !isLoading && /*#__PURE__*/_jsxDEV(Timer, {\n      start_time: test.created_at,\n      duration: test === null || test === void 0 ? void 0 : (_test$quiz = test.quiz) === null || _test$quiz === void 0 ? void 0 : _test$quiz.duration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), test && !isLoading && (test === null || test === void 0 ? void 0 : test.quiz.test_questions) && /*#__PURE__*/_jsxDEV(AnswersContext.Provider, {\n      value: {\n        answers,\n        setAnswers\n      },\n      children: /*#__PURE__*/_jsxDEV(QuizIDContext.Provider, {\n        value: {\n          quizID: id\n        },\n        children: /*#__PURE__*/_jsxDEV(Questions, {\n          questions: test.quiz.test_questions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Submit, {\n      answers: answers,\n      test_id: test.id,\n      setAnswersState: setAnswersState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\nexport default QuizTest;\nconst Container = withStyles({\n  root: {\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: \"#5D00A5\",\n    minHeight: \"100vh\",\n    color: \"white\"\n  }\n})(Box);","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/QuizTest.tsx"],"names":["React","createContext","useStartTest","Box","CircularProgress","withStyles","PageTitle","Timer","Questions","useLocalState","Submit","QuizIDContext","AnswersContext","QuizTest","id","status","test","isLoading","isError","user","answers","setAnswersState","email","setAnswers","optionID","question","state","tempAnswers","answer_type","options","includes","filter","option","quiz","title","created_at","duration","test_questions","quizID","Container","root","width","display","flexDirection","alignItems","backgroundColor","minHeight","color"],"mappings":"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","sourcesContent":["import React, { createContext } from \"react\";\n\nimport useStartTest from \"./useStartTest\";\nimport { Box, CircularProgress, withStyles } from \"@material-ui/core\";\nimport PageTitle from \"../PageTitle/PageTitle\";\nimport Topbar from \"../Layout/Topbar/Topbar\";\nimport Timer from \"./Timer/Timer\";\nimport Questions from \"../Questions/Questions\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport IQuestion from \"../../Models/IQuestion\";\nimport Submit from \"./Submit/Submit\";\n\ninterface IProps {\n  id: number;\n  status: \"retake\" | \"ongoing\" | \"new_test\" | \"unknown\";\n}\n\nexport const QuizIDContext = createContext(null);\nexport const AnswersContext = createContext(null);\n\nconst QuizTest: React.FC<IProps> = ({ id, status }) => {\n  const { test, isLoading, isError } = useStartTest(id, status);\n\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswersState] = useLocalState(\n    `${user.email}-quiz${id}-answers`,\n    {}\n  );\n\n  if (isError) return <p>Sorry some error occured. Please refresh the page.</p>;\n\n  const setAnswers = (optionID: number, question: IQuestion) => {\n    setAnswersState((state: any) => {\n      let tempAnswers = { ...state };\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = { ...state, [`${question.id}`]: [] };\n        } else {\n          tempAnswers = { ...state, [`${question.id}`]: [optionID] };\n        }\n      } else if (question.answer_type === \"checkboxes\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = {\n            ...state,\n            [`${question.id}`]: options.filter(\n              (option: number) => option != optionID\n            ),\n          };\n        } else if (options && !options.includes(optionID)) {\n          tempAnswers = {\n            ...state,\n            [`${question.id}`]: [...options, optionID],\n          };\n        } else {\n          tempAnswers = {\n            ...state,\n            [`${question.id}`]: [optionID],\n          };\n        }\n      }\n\n      return { ...tempAnswers };\n    });\n  };\n\n  return (\n    <Container>\n      <PageTitle title={isLoading ? \"Starting Test...\" : test.quiz.title}>\n        {isLoading && <CircularProgress />}\n      </PageTitle>\n      {test && !isLoading && (\n        <Timer start_time={test.created_at} duration={test?.quiz?.duration} />\n      )}\n      {test && !isLoading && test?.quiz.test_questions && (\n        <AnswersContext.Provider\n          value={{\n            answers,\n            setAnswers,\n          }}\n        >\n          <QuizIDContext.Provider value={{ quizID: id }}>\n            <Questions questions={test.quiz.test_questions} />\n          </QuizIDContext.Provider>\n        </AnswersContext.Provider>\n      )}\n      <Submit\n        answers={answers}\n        test_id={test.id}\n        setAnswersState={setAnswersState}\n      />\n    </Container>\n  );\n};\n\nexport default QuizTest;\n\nconst Container = withStyles({\n  root: {\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: \"#5D00A5\",\n    minHeight: \"100vh\",\n    color: \"white\",\n  },\n})(Box);\n"]},"metadata":{},"sourceType":"module"}