{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/SingleQuestion/Question/Question.tsx\";\nimport { Avatar, Box, Typography, withStyles } from \"@material-ui/core\";\nimport React, { useContext } from \"react\";\nimport { backend_url } from \"../../../../../url\";\nimport { QuestionContext } from \"../SingleQuestion\";\nimport Options from \"./Options/Options\";\nexport default function Question({}) {\n  var _question$image, _question$image2;\n\n  const {\n    question\n  } = useContext(QuestionContext);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(QuestionContainer, {\n      children: [(question === null || question === void 0 ? void 0 : question.question) && /*#__PURE__*/_jsxDEV(QuestionTitleContainer, {\n        children: [(question === null || question === void 0 ? void 0 : question.answer_type) == \"checkboxes\" && /*#__PURE__*/_jsxDEV(QuestionTitle, {\n          variant: \"caption\",\n          children: \"*Multiple Answers Might Be Correct.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(QuestionTitle, {\n          variant: \"subtitle1\",\n          children: `Q. ${question === null || question === void 0 ? void 0 : question.question}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this), (question === null || question === void 0 ? void 0 : (_question$image = question.image) === null || _question$image === void 0 ? void 0 : _question$image.image_link) && /*#__PURE__*/_jsxDEV(Avatar, {\n        src: `${backend_url}/storage/${question === null || question === void 0 ? void 0 : (_question$image2 = question.image) === null || _question$image2 === void 0 ? void 0 : _question$image2.image_link}`,\n        variant: \"square\",\n        style: {\n          height: 200,\n          width: 200,\n          margin: \"0.2rem 0\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), (question === null || question === void 0 ? void 0 : question.options) && /*#__PURE__*/_jsxDEV(Options, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\nconst Container = withStyles({\n  root: {\n    width: \"100%\",\n    height: \"50vh\",\n    overflowY: \"scroll\",\n    overflowX: \"hidden\"\n  }\n})(Box);\nconst QuestionTitle = withStyles({\n  root: {\n    fontWeight: 600,\n    padding: \"0 0.5rem\"\n  }\n})(Typography);\nconst QuestionTitleContainer = withStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  }\n})(Box);\nconst QuestionContainer = withStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n})(Box);","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/SingleQuestion/Question/Question.tsx"],"names":["Avatar","Box","Typography","withStyles","React","useContext","backend_url","QuestionContext","Options","Question","question","answer_type","image","image_link","height","width","margin","options","Container","root","overflowY","overflowX","QuestionTitle","fontWeight","padding","QuestionTitleContainer","display","flexDirection","QuestionContainer","alignItems","justifyContent"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,UAAtB,EAAkCC,UAAlC,QAAoD,mBAApD;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAIA,eAAe,SAASC,QAAT,CAAkB,EAAlB,EAA8B;AAAA;;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAeL,UAAU,CAACE,eAAD,CAA/B;AAEA,sBACE,QAAC,SAAD;AAAA,2BACE,QAAC,iBAAD;AAAA,iBACG,CAAAG,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEA,QAAV,kBACC,QAAC,sBAAD;AAAA,mBACG,CAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEC,WAAV,KAAyB,YAAzB,iBACC,QAAC,aAAD;AAAe,UAAA,OAAO,EAAC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAME,QAAC,aAAD;AAAe,UAAA,OAAO,EAAC,WAAvB;AAAA,oBACI,MAAKD,QAAN,aAAMA,QAAN,uBAAMA,QAAQ,CAAEA,QAAS;AAD5B;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAaG,CAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,+BAAAA,QAAQ,CAAEE,KAAV,oEAAiBC,UAAjB,kBACC,QAAC,MAAD;AACE,QAAA,GAAG,EAAG,GAAEP,WAAY,YAAWI,QAA1B,aAA0BA,QAA1B,2CAA0BA,QAAQ,CAAEE,KAApC,qDAA0B,iBAAiBC,UAAW,EAD7D;AAEE,QAAA,OAAO,EAAC,QAFV;AAGE,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE,GAAV;AAAeC,UAAAA,KAAK,EAAE,GAAtB;AAA2BC,UAAAA,MAAM,EAAE;AAAnC;AAHT;AAAA;AAAA;AAAA;AAAA,cAdJ,EAoBG,CAAAN,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEO,OAAV,kBAAqB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cApBxB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;AAED,MAAMC,SAAS,GAAGf,UAAU,CAAC;AAC3BgB,EAAAA,IAAI,EAAE;AACJJ,IAAAA,KAAK,EAAE,MADH;AAEJD,IAAAA,MAAM,EAAE,MAFJ;AAGJM,IAAAA,SAAS,EAAE,QAHP;AAIJC,IAAAA,SAAS,EAAE;AAJP;AADqB,CAAD,CAAV,CAOfpB,GAPe,CAAlB;AASA,MAAMqB,aAAa,GAAGnB,UAAU,CAAC;AAC/BgB,EAAAA,IAAI,EAAE;AACJI,IAAAA,UAAU,EAAE,GADR;AAEJC,IAAAA,OAAO,EAAE;AAFL;AADyB,CAAD,CAAV,CAKnBtB,UALmB,CAAtB;AAOA,MAAMuB,sBAAsB,GAAGtB,UAAU,CAAC;AACxCgB,EAAAA,IAAI,EAAE;AACJO,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,aAAa,EAAE;AAFX;AADkC,CAAD,CAAV,CAK5B1B,GAL4B,CAA/B;AAOA,MAAM2B,iBAAiB,GAAGzB,UAAU,CAAC;AACnCgB,EAAAA,IAAI,EAAE;AACJO,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,aAAa,EAAE,QAFX;AAGJE,IAAAA,UAAU,EAAE,QAHR;AAIJC,IAAAA,cAAc,EAAE;AAJZ;AAD6B,CAAD,CAAV,CAOvB7B,GAPuB,CAA1B","sourcesContent":["import { Avatar, Box, Typography, withStyles } from \"@material-ui/core\";\nimport React, { useContext } from \"react\";\nimport { backend_url } from \"../../../../../url\";\nimport { QuestionContext } from \"../SingleQuestion\";\nimport Options from \"./Options/Options\";\n\ninterface IProps {}\n\nexport default function Question({}: IProps) {\n  const { question } = useContext(QuestionContext);\n\n  return (\n    <Container>\n      <QuestionContainer>\n        {question?.question && (\n          <QuestionTitleContainer>\n            {question?.answer_type == \"checkboxes\" && (\n              <QuestionTitle variant=\"caption\">\n                *Multiple Answers Might Be Correct.\n              </QuestionTitle>\n            )}\n            <QuestionTitle variant=\"subtitle1\">\n              {`Q. ${question?.question}`}\n            </QuestionTitle>\n          </QuestionTitleContainer>\n        )}\n        {question?.image?.image_link && (\n          <Avatar\n            src={`${backend_url}/storage/${question?.image?.image_link}`}\n            variant=\"square\"\n            style={{ height: 200, width: 200, margin: \"0.2rem 0\" }}\n          />\n        )}\n        {question?.options && <Options />}\n      </QuestionContainer>\n    </Container>\n  );\n}\n\nconst Container = withStyles({\n  root: {\n    width: \"100%\",\n    height: \"50vh\",\n    overflowY: \"scroll\",\n    overflowX: \"hidden\",\n  },\n})(Box);\n\nconst QuestionTitle = withStyles({\n  root: {\n    fontWeight: 600,\n    padding: \"0 0.5rem\",\n  },\n})(Typography);\n\nconst QuestionTitleContainer = withStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n})(Box);\n\nconst QuestionContainer = withStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n})(Box);\n"]},"metadata":{},"sourceType":"module"}