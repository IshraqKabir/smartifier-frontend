{"ast":null,"code":"import axios from \"axios\";\nimport { google } from \"googleapis\";\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  redirect: process.env.GOOGLE_REDIRECT_URL\n}; // generate a url that asks permissions for Blogger and Google Calendar scopes\n\nconst scopes = [\"https://www.googleapis.com/auth/blogger\", \"https://www.googleapis.com/auth/calendar\"];\n\nfunction getGoogleUrl() {\n  const oauth2Client = new google.auth.OAuth2(googleConfig.clientId, googleConfig.clientSecret, googleConfig.redirect);\n  const url = oauth2Client.generateAuthUrl({\n    // 'online' (default) or 'offline' (gets refresh_token)\n    access_type: \"offline\",\n    // If you only need one scope you can pass it as a string\n    scope: scopes\n  });\n  return url;\n}\n\nasync function getUserFromCode(code) {\n  // const user = await axios({\n  //   method: \"POST\",\n  //   url: \"https://accounts.google.com/o/oauth2/token\",\n  //   data: {\n  //     grant_type: \"authorization_code\",\n  //     code: code,\n  //     client_id: googleConfig.clientId,\n  //     client_secret: googleConfig.clientSecret,\n  //     redirect_uri: googleConfig.redirect,\n  //   },\n  // })\n  //   .then((res) => res.data)\n  //   .catch((err) => err);\n  const user = await axios.post(\"https://accounts.google.com/o/oauth2/token\", {\n    grant_type: \"authorization_code\",\n    code: code,\n    client_id: googleConfig.clientId,\n    client_secret: googleConfig.clientSecret,\n    redirect: googleConfig.redirect,\n    access_type: \"offline\"\n  }).then(res => res.data).catch(err => err);\n  return user;\n}\n\nexport default (async (req, res) => {\n  const {\n    get\n  } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = getGoogleUrl();\n    res.json({\n      url\n    });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const {\n        code\n      } = req.query;\n      const user = await getUserFromCode(code);\n      res.statusCode = 200;\n      res.json({\n        user\n      });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n}); // function createConnection() {\n//   return new google.auth.OAuth2(\n//     googleConfig.clientId,\n//     googleConfig.clientSecret,\n//     googleConfig.redirect\n//   );\n// }\n// function getConnectionUrl(auth: any) {\n//   return auth.generateAuthUrl({\n//     access_type: \"offline\",\n//     prompt: \"consent\",\n//     scope: scopes,\n//   });\n// }\n// function urlGoogle() {\n//   const auth = createConnection();\n//   const url = getConnectionUrl(auth);\n//   return url;\n// }","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/pages/api/auth/google.ts"],"names":["axios","google","googleConfig","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","redirect","GOOGLE_REDIRECT_URL","scopes","getGoogleUrl","oauth2Client","auth","OAuth2","url","generateAuthUrl","access_type","scope","getUserFromCode","code","user","post","grant_type","client_id","client_secret","then","res","data","catch","err","req","get","query","statusCode","json"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADH;AAEnBC,EAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFP;AAGnBC,EAAAA,QAAQ,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHH,CAArB,C,CAMA;;AACA,MAAMC,MAAM,GAAG,CACb,yCADa,EAEb,0CAFa,CAAf;;AAKA,SAASC,YAAT,GAAwB;AACtB,QAAMC,YAAY,GAAG,IAAIZ,MAAM,CAACa,IAAP,CAAYC,MAAhB,CACnBb,YAAY,CAACC,QADM,EAEnBD,YAAY,CAACK,YAFM,EAGnBL,YAAY,CAACO,QAHM,CAArB;AAMA,QAAMO,GAAG,GAAGH,YAAY,CAACI,eAAb,CAA6B;AACvC;AACAC,IAAAA,WAAW,EAAE,SAF0B;AAIvC;AACAC,IAAAA,KAAK,EAAER;AALgC,GAA7B,CAAZ;AAQA,SAAOK,GAAP;AACD;;AAED,eAAeI,eAAf,CAA+BC,IAA/B,EAAqC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,IAAI,GAAG,MAAMtB,KAAK,CACrBuB,IADgB,CACX,4CADW,EACmC;AAClDC,IAAAA,UAAU,EAAE,oBADsC;AAElDH,IAAAA,IAAI,EAAEA,IAF4C;AAGlDI,IAAAA,SAAS,EAAEvB,YAAY,CAACC,QAH0B;AAIlDuB,IAAAA,aAAa,EAAExB,YAAY,CAACK,YAJsB;AAKlDE,IAAAA,QAAQ,EAAEP,YAAY,CAACO,QAL2B;AAMlDS,IAAAA,WAAW,EAAE;AANqC,GADnC,EAShBS,IATgB,CASVC,GAAD,IAASA,GAAG,CAACC,IATF,EAUhBC,KAVgB,CAUTC,GAAD,IAASA,GAVC,CAAnB;AAYA,SAAOT,IAAP;AACD;;AAED,gBAAe,OAAOU,GAAP,EAAYJ,GAAZ,KAAoB;AACjC,QAAM;AAAEK,IAAAA;AAAF,MAAUD,GAAG,CAACE,KAApB;;AAEA,MAAID,GAAG,KAAK,MAAZ,EAAoB;AAClBL,IAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACA,UAAMnB,GAAG,GAAGJ,YAAY,EAAxB;AACAgB,IAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEpB,MAAAA;AAAF,KAAT;AACD,GAJD,MAIO,IAAIiB,GAAG,KAAK,MAAZ,EAAoB;AACzB,QAAI,CAACD,GAAG,CAACE,KAAJ,CAAUb,IAAf,EAAqB;AACnBO,MAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACD,KAFD,MAEO;AACL,YAAM;AAAEd,QAAAA;AAAF,UAAWW,GAAG,CAACE,KAArB;AAEA,YAAMZ,IAAI,GAAG,MAAMF,eAAe,CAACC,IAAD,CAAlC;AAEAO,MAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACAP,MAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEd,QAAAA;AAAF,OAAT;AACD;AACF,GAXM,MAWA;AACLM,IAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACD;AACF,CArBD,E,CAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA","sourcesContent":["import axios from \"axios\";\nimport { google } from \"googleapis\";\n\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  redirect: process.env.GOOGLE_REDIRECT_URL,\n};\n\n// generate a url that asks permissions for Blogger and Google Calendar scopes\nconst scopes = [\n  \"https://www.googleapis.com/auth/blogger\",\n  \"https://www.googleapis.com/auth/calendar\",\n];\n\nfunction getGoogleUrl() {\n  const oauth2Client = new google.auth.OAuth2(\n    googleConfig.clientId,\n    googleConfig.clientSecret,\n    googleConfig.redirect\n  );\n\n  const url = oauth2Client.generateAuthUrl({\n    // 'online' (default) or 'offline' (gets refresh_token)\n    access_type: \"offline\",\n\n    // If you only need one scope you can pass it as a string\n    scope: scopes,\n  });\n\n  return url;\n}\n\nasync function getUserFromCode(code) {\n  // const user = await axios({\n  //   method: \"POST\",\n  //   url: \"https://accounts.google.com/o/oauth2/token\",\n  //   data: {\n  //     grant_type: \"authorization_code\",\n  //     code: code,\n  //     client_id: googleConfig.clientId,\n  //     client_secret: googleConfig.clientSecret,\n  //     redirect_uri: googleConfig.redirect,\n  //   },\n  // })\n  //   .then((res) => res.data)\n  //   .catch((err) => err);\n\n  const user = await axios\n    .post(\"https://accounts.google.com/o/oauth2/token\", {\n      grant_type: \"authorization_code\",\n      code: code,\n      client_id: googleConfig.clientId,\n      client_secret: googleConfig.clientSecret,\n      redirect: googleConfig.redirect,\n      access_type: \"offline\",\n    })\n    .then((res) => res.data)\n    .catch((err) => err);\n\n  return user;\n}\n\nexport default async (req, res) => {\n  const { get } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = getGoogleUrl();\n    res.json({ url });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const { code } = req.query;\n\n      const user = await getUserFromCode(code);\n\n      res.statusCode = 200;\n      res.json({ user });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n};\n\n// function createConnection() {\n//   return new google.auth.OAuth2(\n//     googleConfig.clientId,\n//     googleConfig.clientSecret,\n//     googleConfig.redirect\n//   );\n// }\n\n// function getConnectionUrl(auth: any) {\n//   return auth.generateAuthUrl({\n//     access_type: \"offline\",\n//     prompt: \"consent\",\n//     scope: scopes,\n//   });\n// }\n\n// function urlGoogle() {\n//   const auth = createConnection();\n//   const url = getConnectionUrl(auth);\n\n//   return url;\n// }\n"]},"metadata":{},"sourceType":"module"}