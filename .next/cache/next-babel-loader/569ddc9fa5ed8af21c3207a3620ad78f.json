{"ast":null,"code":"import { useState, useEffect } from \"react\";\n\nfunction useLocalState(key, defaultValue) {\n  const {\n    0: value,\n    1: setValue\n  } = useState(() => {\n    if (false) {\n      const storedValue = JSON.parse(localStorage.getItem(key));\n\n      if (!storedValue) {\n        return defaultValue;\n      }\n\n      return storedValue === null ? defaultValue : storedValue;\n    } else {\n      return defaultValue;\n    }\n  });\n  useEffect(() => {\n    const listener = e => {\n      if (e.storageArea === localStorage && e.key === key) {\n        setValue(JSON.parse(e.newValue));\n      }\n    };\n\n    window.addEventListener(\"storage\", listener);\n    return () => {\n      window.removeEventListener(\"storage\", listener);\n    };\n  }, [key]);\n\n  const setValueInLocalStorage = newValue => {\n    setValue(currentValue => {\n      const result = typeof newValue === \"function\" ? newValue(currentValue) : newValue;\n      localStorage.setItem(key, JSON.stringify(result));\n      return result;\n    });\n  };\n\n  useEffect(() => {\n    const storedValue = JSON.parse(localStorage.getItem(key));\n\n    if (storedValue) {\n      setValueInLocalStorage(storedValue);\n    } else {\n      setValueInLocalStorage(value);\n    }\n  }, []);\n  return [value, setValueInLocalStorage];\n}\n\n;\nexport default useLocalState;","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/custom-hooks/useLocalState.ts"],"names":["useState","useEffect","useLocalState","key","defaultValue","value","setValue","storedValue","JSON","parse","localStorage","getItem","listener","e","storageArea","newValue","window","addEventListener","removeEventListener","setValueInLocalStorage","currentValue","result","setItem","stringify"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,aAAT,CAA0BC,GAA1B,EAAuCC,YAAvC,EAAwD;AACpD,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,MAAM;AACrC,eAAqB;AACjB,YAAMO,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBR,GAArB,CAAX,CAApB;;AACA,UAAI,CAACI,WAAL,EAAkB;AACd,eAAOH,YAAP;AACH;;AACD,aAAOG,WAAW,KAAK,IAAhB,GAAuBH,YAAvB,GAAsCG,WAA7C;AACH,KAND,MAMO;AACH,aAAOH,YAAP;AACH;AACJ,GAViC,CAAlC;AAYAH,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,QAAQ,GAAIC,CAAD,IAAO;AACpB,UAAIA,CAAC,CAACC,WAAF,KAAkBJ,YAAlB,IAAkCG,CAAC,CAACV,GAAF,KAAUA,GAAhD,EAAqD;AACjDG,QAAAA,QAAQ,CAACE,IAAI,CAACC,KAAL,CAAWI,CAAC,CAACE,QAAb,CAAD,CAAR;AACH;AACJ,KAJD;;AAKAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCL,QAAnC;AAEA,WAAO,MAAM;AACTI,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCN,QAAtC;AACH,KAFD;AAGH,GAXQ,EAWN,CAACT,GAAD,CAXM,CAAT;;AAaA,QAAMgB,sBAAsB,GAAIJ,QAAD,IAAc;AAEzCT,IAAAA,QAAQ,CAAEc,YAAD,IAAkB;AACvB,YAAMC,MAAM,GACR,OAAON,QAAP,KAAoB,UAApB,GAAiCA,QAAQ,CAACK,YAAD,CAAzC,GAA0DL,QAD9D;AAEAL,MAAAA,YAAY,CAACY,OAAb,CAAqBnB,GAArB,EAA0BK,IAAI,CAACe,SAAL,CAAeF,MAAf,CAA1B;AACA,aAAOA,MAAP;AACH,KALO,CAAR;AAMH,GARD;;AAUApB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBR,GAArB,CAAX,CAApB;;AACA,QAAII,WAAJ,EAAiB;AACbY,MAAAA,sBAAsB,CAACZ,WAAD,CAAtB;AACH,KAFD,MAEO;AACHY,MAAAA,sBAAsB,CAACd,KAAD,CAAtB;AACH;AACJ,GAPQ,EAON,EAPM,CAAT;AASA,SAAO,CAACA,KAAD,EAAQc,sBAAR,CAAP;AACH;;AAAA;AAED,eAAejB,aAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction useLocalState<T>(key: string, defaultValue: T) {\n    const [value, setValue] = useState(() => {\n        if (process.browser) {\n            const storedValue = JSON.parse(localStorage.getItem(key));\n            if (!storedValue) {\n                return defaultValue;\n            }\n            return storedValue === null ? defaultValue : storedValue;\n        } else {\n            return defaultValue;\n        }\n    });\n\n    useEffect(() => {\n        const listener = (e) => {\n            if (e.storageArea === localStorage && e.key === key) {\n                setValue(JSON.parse(e.newValue));\n            }\n        };\n        window.addEventListener(\"storage\", listener);\n\n        return () => {\n            window.removeEventListener(\"storage\", listener);\n        };\n    }, [key]);\n\n    const setValueInLocalStorage = (newValue) => {\n\n        setValue((currentValue) => {\n            const result =\n                typeof newValue === \"function\" ? newValue(currentValue) : newValue;\n            localStorage.setItem(key, JSON.stringify(result));\n            return result;\n        });\n    };\n\n    useEffect(() => {\n        const storedValue = JSON.parse(localStorage.getItem(key));\n        if (storedValue) {\n            setValueInLocalStorage(storedValue);\n        } else {\n            setValueInLocalStorage(value);\n        }\n    }, []);\n\n    return [value, setValueInLocalStorage];\n};\n\nexport default useLocalState;\n"]},"metadata":{},"sourceType":"module"}