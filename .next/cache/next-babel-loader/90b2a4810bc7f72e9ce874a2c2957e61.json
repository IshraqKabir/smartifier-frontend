{"ast":null,"code":"import { useState } from \"react\";\nimport * as Cookies from \"js-cookie\";\n/**\n * useCookie - React Hook for Cookies based on js-cookie\n * @param {string} key Cookie name\n * @param {Object|string} [initialValue]  Value will be assign if cookie doesn't exist.\n * @returns {Array} Returns cookie value, and the function to update it.\n */\n\nexport function useUserCookie(key, initialValue) {\n  const {\n    0: user,\n    1: setItem\n  } = useState(() => {\n    const result = Cookies.get(key) || initialValue;\n    if (result) return JSON.parse(result);\n    return initialValue;\n  });\n  /**\n   * Set value of cookie\n   * @param {Object|string} value\n   * @param {Cookies.CookieAttributes} [options]\n   */\n\n  const setValue = (value, options) => {\n    setItem(value);\n    Cookies.set(key, value, options);\n  };\n\n  return [user, setValue];\n}\nexport default useUserCookie;","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/custom-hooks/useUserCookie.ts"],"names":["useState","Cookies","useUserCookie","key","initialValue","user","setItem","result","get","JSON","parse","setValue","value","options","set"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,YAA5B,EAA0C;AAC/C,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAI,MAAM;AACxC,UAAMO,MAAM,GAAGN,OAAO,CAACO,GAAR,CAAYL,GAAZ,KAAoBC,YAAnC;AACA,QAAIG,MAAJ,EAAY,OAAOE,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAP;AACZ,WAAOH,YAAP;AACD,GAJ+B,CAAhC;AAMA;AACF;AACA;AACA;AACA;;AACE,QAAMO,QAAQ,GAAG,CAACC,KAAD,EAAWC,OAAX,KAA4B;AAC3CP,IAAAA,OAAO,CAACM,KAAD,CAAP;AACAX,IAAAA,OAAO,CAACa,GAAR,CAAYX,GAAZ,EAAiBS,KAAjB,EAAwBC,OAAxB;AACD,GAHD;;AAKA,SAAO,CAACR,IAAD,EAAOM,QAAP,CAAP;AACD;AAED,eAAeT,aAAf","sourcesContent":["import { useState } from \"react\";\nimport * as Cookies from \"js-cookie\";\n\n/**\n * useCookie - React Hook for Cookies based on js-cookie\n * @param {string} key Cookie name\n * @param {Object|string} [initialValue]  Value will be assign if cookie doesn't exist.\n * @returns {Array} Returns cookie value, and the function to update it.\n */\nexport function useUserCookie(key, initialValue) {\n  const [user, setItem] = useState<T>(() => {\n    const result = Cookies.get(key) || initialValue;\n    if (result) return JSON.parse(result);\n    return initialValue;\n  });\n\n  /**\n   * Set value of cookie\n   * @param {Object|string} value\n   * @param {Cookies.CookieAttributes} [options]\n   */\n  const setValue = (value: T, options: any) => {\n    setItem(value);\n    Cookies.set(key, value, options);\n  };\n\n  return [user, setValue];\n}\n\nexport default useUserCookie;\n"]},"metadata":{},"sourceType":"module"}