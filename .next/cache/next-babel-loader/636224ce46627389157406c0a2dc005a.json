{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\n\nvar Timer = function Timer(_ref) {\n  _s();\n\n  var start_time = _ref.start_time,\n      duration = _ref.duration;\n\n  var _useState = useState(getTimeElapsed(start_time)),\n      timeElapsed = _useState[0],\n      setTimeElapsed = _useState[1];\n\n  useEffect(function () {\n    setInterval(function () {\n      setTimeElapsed(getTimeElapsed(start_time));\n    }, 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\".concat(Math.floor(timeElapsed))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Timer, \"fNqoTh6YXCO6bZ7wYS1CsJIxFh0=\");\n\n_c = Timer;\nexport default Timer;\n\nfunction getTimeElapsed(start_time) {\n  var start = new Date(\"\".concat(start_time));\n  var now = new Date();\n  var timePassedInSeconds = (now.getTime() - start.getTime()) / 1000;\n  return Math.floor(timePassedInSeconds);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx"],"names":["React","useEffect","useState","Timer","start_time","duration","getTimeElapsed","timeElapsed","setTimeElapsed","setInterval","Math","floor","start","Date","now","timePassedInSeconds","getTime"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAOA,IAAMC,KAAuB,GAAG,SAA1BA,KAA0B,OAA8B;AAAA;;AAAA,MAA3BC,UAA2B,QAA3BA,UAA2B;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACtBH,QAAQ,CAC5CI,cAAc,CAACF,UAAD,CAD8B,CADc;AAAA,MACrDG,WADqD;AAAA,MACxCC,cADwC;;AAK5DP,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,WAAW,CAAC,YAAM;AAChBD,MAAAA,cAAc,CAACF,cAAc,CAACF,UAAD,CAAf,CAAd;AACD,KAFU,EAER,IAFQ,CAAX;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,sBAAO;AAAA,wBAAOM,IAAI,CAACC,KAAL,CAAWJ,WAAX,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAZD;;GAAMJ,K;;KAAAA,K;AAcN,eAAeA,KAAf;;AAEA,SAASG,cAAT,CAAwBF,UAAxB,EAAoD;AAClD,MAAIQ,KAAK,GAAG,IAAIC,IAAJ,WAAYT,UAAZ,EAAZ;AACA,MAAIU,GAAG,GAAG,IAAID,IAAJ,EAAV;AAEA,MAAIE,mBAA2B,GAAG,CAACD,GAAG,CAACE,OAAJ,KAAgBJ,KAAK,CAACI,OAAN,EAAjB,IAAoC,IAAtE;AAEA,SAAON,IAAI,CAACC,KAAL,CAAWI,mBAAX,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\ninterface IProps {\n  start_time: string;\n  duration: string;\n}\n\nconst Timer: React.FC<IProps> = ({ start_time, duration }) => {\n  const [timeElapsed, setTimeElapsed] = useState<number>(\n    getTimeElapsed(start_time)\n  );\n\n  useEffect(() => {\n    setInterval(() => {\n      setTimeElapsed(getTimeElapsed(start_time));\n    }, 1000);\n  }, []);\n\n  return <p>{`${Math.floor(timeElapsed)}`}</p>;\n};\n\nexport default Timer;\n\nfunction getTimeElapsed(start_time: string): number {\n  let start = new Date(`${start_time}`);\n  let now = new Date();\n\n  let timePassedInSeconds: number = (now.getTime() - start.getTime()) / 1000;\n\n  return Math.floor(timePassedInSeconds);\n}\n"]},"metadata":{},"sourceType":"module"}