{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nimport useLocalState from \"../../../custom-hooks/useLocalState\";\nexport default function useTestState(quizId, questions) {\n  _s();\n\n  var _useLocalState = useLocalState(\"user\", \"\"),\n      _useLocalState2 = _slicedToArray(_useLocalState, 1),\n      user = _useLocalState2[0];\n\n  var _useLocalState3 = useLocalState(\"\".concat(user === null || user === void 0 ? void 0 : user.email, \"-quiz\").concat(quizId, \"-answers\"), {}),\n      _useLocalState4 = _slicedToArray(_useLocalState3, 2),\n      answers = _useLocalState4[0],\n      setAnswersState = _useLocalState4[1];\n\n  var _useState = useState(0),\n      currentQuestionIndex = _useState[0],\n      setCurrentQuestionIndex = _useState[1];\n\n  var _useState2 = useState(questions[currentQuestion] ? questions[0] : null),\n      currentQuestion = _useState2[0],\n      setCurrentQuestion = _useState2[1];\n\n  var setAnswers = function setAnswers(optionID, question) {\n    setAnswersState(function (state) {\n      var tempAnswers = _objectSpread({}, state);\n\n      if (question.answer_type === \"multiple_choice\") {\n        var options = tempAnswers[\"\".concat(question === null || question === void 0 ? void 0 : question.id)];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), []));\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), [optionID]));\n        }\n      } else if ((question === null || question === void 0 ? void 0 : question.answer_type) === \"checkboxes\") {\n        var _options = tempAnswers[\"\".concat(question === null || question === void 0 ? void 0 : question.id)];\n\n        if (_options && _options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), _options.filter(function (option) {\n            return option != optionID;\n          })));\n        } else if (_options && !_options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), [].concat(_toConsumableArray(_options), [optionID])));\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), [optionID]));\n        }\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  return {\n    currentQuestion: currentQuestion\n  };\n}\n\n_s(useTestState, \"+XVYIh/rsBkWZHxF2UH2131UjTA=\", false, function () {\n  return [useLocalState, useLocalState];\n});","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/useTestState.tsx"],"names":["useState","useLocalState","useTestState","quizId","questions","user","email","answers","setAnswersState","currentQuestionIndex","setCurrentQuestionIndex","currentQuestion","setCurrentQuestion","setAnswers","optionID","question","state","tempAnswers","answer_type","options","id","includes","filter","option"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAGA,eAAe,SAASC,YAAT,CAAsBC,MAAtB,EAAsCC,SAAtC,EAA8D;AAAA;;AAAA,uBAC5DH,aAAa,CAAC,MAAD,EAAS,EAAT,CAD+C;AAAA;AAAA,MACpEI,IADoE;;AAAA,wBAExCJ,aAAa,WAC3CI,IAD2C,aAC3CA,IAD2C,uBAC3CA,IAAI,CAAEC,KADqC,kBACxBH,MADwB,eAE9C,EAF8C,CAF2B;AAAA;AAAA,MAEpEI,OAFoE;AAAA,MAE3DC,eAF2D;;AAAA,kBAOnBR,QAAQ,CAAS,CAAT,CAPW;AAAA,MAOpES,oBAPoE;AAAA,MAO9CC,uBAP8C;;AAAA,mBAQ7BV,QAAQ,CACpDI,SAAS,CAACO,eAAD,CAAT,GAA6BP,SAAS,CAAC,CAAD,CAAtC,GAA4C,IADQ,CARqB;AAAA,MAQpEO,eARoE;AAAA,MAQnDC,kBARmD;;AAY3E,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAmBC,QAAnB,EAA2C;AAC5DP,IAAAA,eAAe,CAAC,UAACQ,KAAD,EAAgB;AAC9B,UAAIC,WAAW,qBAAQD,KAAR,CAAf;;AAEA,UAAID,QAAQ,CAACG,WAAT,KAAyB,iBAA7B,EAAgD;AAC9C,YAAMC,OAAO,GAAGF,WAAW,WAAIF,QAAJ,aAAIA,QAAJ,uBAAIA,QAAQ,CAAEK,EAAd,EAA3B;;AAEA,YAAID,OAAO,IAAIA,OAAO,CAACE,QAAR,CAAiBP,QAAjB,CAAf,EAA2C;AACzCG,UAAAA,WAAW,mCAAQD,KAAR,qCAAmBD,QAAnB,aAAmBA,QAAnB,uBAAmBA,QAAQ,CAAEK,EAA7B,GAAoC,EAApC,EAAX;AACD,SAFD,MAEO;AACLH,UAAAA,WAAW,mCAAQD,KAAR,qCAAmBD,QAAnB,aAAmBA,QAAnB,uBAAmBA,QAAQ,CAAEK,EAA7B,GAAoC,CAACN,QAAD,CAApC,EAAX;AACD;AACF,OARD,MAQO,IAAI,CAAAC,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,WAAV,MAA0B,YAA9B,EAA4C;AACjD,YAAMC,QAAO,GAAGF,WAAW,WAAIF,QAAJ,aAAIA,QAAJ,uBAAIA,QAAQ,CAAEK,EAAd,EAA3B;;AAEA,YAAID,QAAO,IAAIA,QAAO,CAACE,QAAR,CAAiBP,QAAjB,CAAf,EAA2C;AACzCG,UAAAA,WAAW,mCACND,KADM,qCAELD,QAFK,aAELA,QAFK,uBAELA,QAAQ,CAAEK,EAFL,GAEYD,QAAO,CAACG,MAAR,CACnB,UAACC,MAAD;AAAA,mBAAoBA,MAAM,IAAIT,QAA9B;AAAA,WADmB,CAFZ,EAAX;AAMD,SAPD,MAOO,IAAIK,QAAO,IAAI,CAACA,QAAO,CAACE,QAAR,CAAiBP,QAAjB,CAAhB,EAA4C;AACjDG,UAAAA,WAAW,mCACND,KADM,qCAELD,QAFK,aAELA,QAFK,uBAELA,QAAQ,CAAEK,EAFL,gCAEgBD,QAFhB,IAEyBL,QAFzB,IAAX;AAID,SALM,MAKA;AACLG,UAAAA,WAAW,mCACND,KADM,qCAELD,QAFK,aAELA,QAFK,uBAELA,QAAQ,CAAEK,EAFL,GAEY,CAACN,QAAD,CAFZ,EAAX;AAID;AACF;;AAED,+BAAYG,WAAZ;AACD,KAnCc,CAAf;AAoCD,GArCD;;AAuCA,SAAO;AACLN,IAAAA,eAAe,EAAfA;AADK,GAAP;AAGD;;GAtDuBT,Y;UACPD,a,EACoBA,a","sourcesContent":["import { useState } from \"react\";\nimport useLocalState from \"../../../custom-hooks/useLocalState\";\nimport IQuestion from \"../../../Models/IQuestion\";\n\nexport default function useTestState(quizId: number, questions: IQuestion[]) {\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswersState] = useLocalState(\n    `${user?.email}-quiz${quizId}-answers`,\n    {}\n  );\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<number>(0);\n  const [currentQuestion, setCurrentQuestion] = useState<IQuestion>(\n    questions[currentQuestion] ? questions[0] : null\n  );\n\n  const setAnswers = (optionID: number, question: IQuestion) => {\n    setAnswersState((state: any) => {\n      let tempAnswers = { ...state };\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question?.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = { ...state, [`${question?.id}`]: [] };\n        } else {\n          tempAnswers = { ...state, [`${question?.id}`]: [optionID] };\n        }\n      } else if (question?.answer_type === \"checkboxes\") {\n        const options = tempAnswers[`${question?.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = {\n            ...state,\n            [`${question?.id}`]: options.filter(\n              (option: number) => option != optionID\n            ),\n          };\n        } else if (options && !options.includes(optionID)) {\n          tempAnswers = {\n            ...state,\n            [`${question?.id}`]: [...options, optionID],\n          };\n        } else {\n          tempAnswers = {\n            ...state,\n            [`${question?.id}`]: [optionID],\n          };\n        }\n      }\n\n      return { ...tempAnswers };\n    });\n  };\n\n  return {\n    currentQuestion,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}