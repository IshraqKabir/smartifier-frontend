{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nimport { google } from \"googleapis\";\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  redirect: process.env.GOOGLE_REDIRECT_URL\n}; // generate a url that asks permissions for Blogger and Google Calendar scopes\n\nconst scopes = [\"https://www.googleapis.com/auth/blogger\", \"https://www.googleapis.com/auth/calendar\"];\n\nfunction getGoogleUrl() {\n  const oauth2Client = new google.auth.OAuth2(googleConfig.clientId, googleConfig.clientSecret, googleConfig.redirect);\n  const url = oauth2Client.generateAuthUrl({\n    // 'online' (default) or 'offline' (gets refresh_token)\n    access_type: \"offline\",\n    // If you only need one scope you can pass it as a string\n    scope: scopes\n  });\n  return url;\n}\n\nasync function getUserFromCode(code) {\n  // const user = await axios({\n  //   method: \"POST\",\n  //   url: \"https://accounts.google.com/o/oauth2/token\",\n  //   data: {\n  //     grant_type: \"authorization_code\",\n  //     code: code,\n  //     client_id: googleConfig.clientId,\n  //     client_secret: googleConfig.clientSecret,\n  //     redirect_uri: googleConfig.redirect,\n  //   },\n  // })\n  //   .then((res) => res.data)\n  //   .catch((err) => err);\n  // const user = await axios\n  //   .post(\"https://accounts.google.com/o/oauth2/token\", {\n  //     grant_type: \"authorization_code\",\n  //     code: code,\n  //     client_id: googleConfig.clientId,\n  //     client_secret: googleConfig.clientSecret,\n  //     redirect: googleConfig.redirect,\n  //   })\n  //   .then((res) => res.data)\n  //   .catch((err) => err);\n  var FormData = require(\"form-data\");\n\n  var data = new FormData();\n  data.append(\"grant_type\", \"authorization_code\");\n  data.append(\"client_id\", \"540083931812-7bt05mqtrriog1f1kdpvotbvnr01iien.apps.googleusercontent.com\");\n  data.append(\"client_secret\", \"EzLchgWurmMgBDB7A5CnKgTm\");\n  data.append(\"redirect\", \"https://smartifier.org/authresp/google\");\n  var config = {\n    method: \"post\",\n    url: \"https://accounts.google.com/o/oauth2/token\",\n    headers: _objectSpread({\n      Accept: \"application/json\"\n    }, data.getHeaders()),\n    data: data\n  };\n  const user = await axios(config).then(function (response) {\n    console.log(JSON.stringify(response.data));\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n  });\n  return user;\n}\n\nexport default (async (req, res) => {\n  const {\n    get\n  } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = getGoogleUrl();\n    res.json({\n      url\n    });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const {\n        code\n      } = req.query;\n      const user = await getUserFromCode(code);\n      res.statusCode = 200;\n      res.json({\n        user\n      });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n}); // function createConnection() {\n//   return new google.auth.OAuth2(\n//     googleConfig.clientId,\n//     googleConfig.clientSecret,\n//     googleConfig.redirect\n//   );\n// }\n// function getConnectionUrl(auth: any) {\n//   return auth.generateAuthUrl({\n//     access_type: \"offline\",\n//     prompt: \"consent\",\n//     scope: scopes,\n//   });\n// }\n// function urlGoogle() {\n//   const auth = createConnection();\n//   const url = getConnectionUrl(auth);\n//   return url;\n// }","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/pages/api/auth/google.ts"],"names":["axios","google","googleConfig","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","redirect","GOOGLE_REDIRECT_URL","scopes","getGoogleUrl","oauth2Client","auth","OAuth2","url","generateAuthUrl","access_type","scope","getUserFromCode","code","FormData","require","data","append","config","method","headers","Accept","getHeaders","user","then","response","console","log","JSON","stringify","catch","error","req","res","get","query","statusCode","json"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { google } from \"googleapis\";\n\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  redirect: process.env.GOOGLE_REDIRECT_URL,\n};\n\n// generate a url that asks permissions for Blogger and Google Calendar scopes\nconst scopes = [\n  \"https://www.googleapis.com/auth/blogger\",\n  \"https://www.googleapis.com/auth/calendar\",\n];\n\nfunction getGoogleUrl() {\n  const oauth2Client = new google.auth.OAuth2(\n    googleConfig.clientId,\n    googleConfig.clientSecret,\n    googleConfig.redirect\n  );\n\n  const url = oauth2Client.generateAuthUrl({\n    // 'online' (default) or 'offline' (gets refresh_token)\n    access_type: \"offline\",\n\n    // If you only need one scope you can pass it as a string\n    scope: scopes,\n  });\n\n  return url;\n}\n\nasync function getUserFromCode(code) {\n  // const user = await axios({\n  //   method: \"POST\",\n  //   url: \"https://accounts.google.com/o/oauth2/token\",\n  //   data: {\n  //     grant_type: \"authorization_code\",\n  //     code: code,\n  //     client_id: googleConfig.clientId,\n  //     client_secret: googleConfig.clientSecret,\n  //     redirect_uri: googleConfig.redirect,\n  //   },\n  // })\n  //   .then((res) => res.data)\n  //   .catch((err) => err);\n\n  // const user = await axios\n  //   .post(\"https://accounts.google.com/o/oauth2/token\", {\n  //     grant_type: \"authorization_code\",\n  //     code: code,\n  //     client_id: googleConfig.clientId,\n  //     client_secret: googleConfig.clientSecret,\n  //     redirect: googleConfig.redirect,\n  //   })\n  //   .then((res) => res.data)\n  //   .catch((err) => err);\n\n  var FormData = require(\"form-data\");\n  var data = new FormData();\n  data.append(\"grant_type\", \"authorization_code\");\n  data.append(\n    \"client_id\",\n    \"540083931812-7bt05mqtrriog1f1kdpvotbvnr01iien.apps.googleusercontent.com\"\n  );\n  data.append(\"client_secret\", \"EzLchgWurmMgBDB7A5CnKgTm\");\n  data.append(\"redirect\", \"https://smartifier.org/authresp/google\");\n\n  var config: any = {\n    method: \"post\",\n    url: \"https://accounts.google.com/o/oauth2/token\",\n    headers: {\n      Accept: \"application/json\",\n      ...data.getHeaders(),\n    },\n    data: data,\n  };\n\n  const user = await axios(config)\n    .then(function (response) {\n      console.log(JSON.stringify(response.data));\n      return response.data\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  return user;\n}\n\nexport default async (req, res) => {\n  const { get } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = getGoogleUrl();\n    res.json({ url });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const { code } = req.query;\n\n      const user = await getUserFromCode(code);\n\n      res.statusCode = 200;\n      res.json({ user });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n};\n\n// function createConnection() {\n//   return new google.auth.OAuth2(\n//     googleConfig.clientId,\n//     googleConfig.clientSecret,\n//     googleConfig.redirect\n//   );\n// }\n\n// function getConnectionUrl(auth: any) {\n//   return auth.generateAuthUrl({\n//     access_type: \"offline\",\n//     prompt: \"consent\",\n//     scope: scopes,\n//   });\n// }\n\n// function urlGoogle() {\n//   const auth = createConnection();\n//   const url = getConnectionUrl(auth);\n\n//   return url;\n// }\n"]},"metadata":{},"sourceType":"module"}