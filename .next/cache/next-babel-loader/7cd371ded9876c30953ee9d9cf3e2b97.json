{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\n\nvar Timer = function Timer(_ref) {\n  _s();\n\n  var start_time = _ref.start_time,\n      duration = _ref.duration;\n\n  var _useState = useState(getTimeRemainingInSeconds(start_time, duration)),\n      secondsRemaining = _useState[0],\n      setSecondsRemaining = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      timeRemaining = _useState2[0],\n      setTimeRemaing = _useState2[1];\n\n  useEffect(function () {\n    setInterval(function () {\n      setSecondsRemaining(getTimeRemainingInSeconds(start_time, duration));\n    }, 500);\n  }, []);\n  useEffect(function () {\n    setTimeRemaing(parseSecondsToClock(secondsRemaining));\n  }, [secondsRemaining]);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\".concat(timeRemaining)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Timer, \"0kWIqHwvaalR7NiOWcK+nyQ1I6A=\");\n\n_c = Timer;\nexport default Timer;\n\nfunction getTimeRemainingInSeconds(start_time, duration) {\n  var totalDurationInSeconds = getSecondsFromDuration(duration);\n  var start = new Date(\"\".concat(start_time));\n  var now = new Date();\n  var end = new Date(\"\".concat(start_time));\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  var secondsLeft = (end.getTime() - now.getTime()) / 1000;\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration) {\n  var _duration$split = duration.split(\":\"),\n      _duration$split2 = _slicedToArray(_duration$split, 3),\n      hours = _duration$split2[0],\n      mins = _duration$split2[1],\n      seconds = _duration$split2[2];\n\n  var totalSeconds = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining) {\n  var mins = Math.floor(secondsRemaining / 60);\n  var seconds = Math.floor(secondsRemaining % 60);\n  return \"\".concat(mins < 10 ? \"\" : mins, \":\").concat(seconds < 10 ? \"0\".concat(seconds) : seconds);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx"],"names":["React","useEffect","useState","Timer","start_time","duration","getTimeRemainingInSeconds","secondsRemaining","setSecondsRemaining","timeRemaining","setTimeRemaing","setInterval","parseSecondsToClock","totalDurationInSeconds","getSecondsFromDuration","start","Date","now","end","setTime","getTime","secondsLeft","Math","floor","split","hours","mins","seconds","totalSeconds","parseInt"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAOA,IAAMC,KAAuB,GAAG,SAA1BA,KAA0B,OAA8B;AAAA;;AAAA,MAA3BC,UAA2B,QAA3BA,UAA2B;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACZH,QAAQ,CACtDI,yBAAyB,CAACF,UAAD,EAAaC,QAAb,CAD6B,CADI;AAAA,MACrDE,gBADqD;AAAA,MACnCC,mBADmC;;AAAA,mBAKpBN,QAAQ,CAAS,EAAT,CALY;AAAA,MAKrDO,aALqD;AAAA,MAKtCC,cALsC;;AAO5DT,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,WAAW,CAAC,YAAM;AAChBH,MAAAA,mBAAmB,CAACF,yBAAyB,CAACF,UAAD,EAAaC,QAAb,CAA1B,CAAnB;AACD,KAFU,EAER,GAFQ,CAAX;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAJ,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,cAAc,CAACE,mBAAmB,CAACL,gBAAD,CAApB,CAAd;AACD,GAFQ,EAEN,CAACA,gBAAD,CAFM,CAAT;AAIA,sBAAO;AAAA,wBAAOE,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAlBD;;GAAMN,K;;KAAAA,K;AAoBN,eAAeA,KAAf;;AAEA,SAASG,yBAAT,CACEF,UADF,EAEEC,QAFF,EAGU;AACR,MAAMQ,sBAA8B,GAAGC,sBAAsB,CAACT,QAAD,CAA7D;AAEA,MAAMU,KAAK,GAAG,IAAIC,IAAJ,WAAYZ,UAAZ,EAAd;AACA,MAAMa,GAAG,GAAG,IAAID,IAAJ,EAAZ;AACA,MAAME,GAAG,GAAG,IAAIF,IAAJ,WAAYZ,UAAZ,EAAZ;AACAc,EAAAA,GAAG,CAACC,OAAJ,CAAYJ,KAAK,CAACK,OAAN,KAAkBP,sBAAsB,GAAG,IAAvD;AAEA,MAAMQ,WAAmB,GAAG,CAACH,GAAG,CAACE,OAAJ,KAAgBH,GAAG,CAACG,OAAJ,EAAjB,IAAkC,IAA9D;AAEA,SAAOE,IAAI,CAACC,KAAL,CAAWF,WAAX,CAAP;AACD;;AAED,SAASP,sBAAT,CAAgCT,QAAhC,EAA0D;AAAA,wBACzBA,QAAQ,CAACmB,KAAT,CAAe,GAAf,CADyB;AAAA;AAAA,MACjDC,KADiD;AAAA,MAC1CC,IAD0C;AAAA,MACpCC,OADoC;;AAGxD,MAAIC,YAAoB,GAAG,CAA3B;AACAA,EAAAA,YAAY,IAAIC,QAAQ,CAACJ,KAAD,CAAR,GAAkB,EAAlB,GAAuB,EAAvC;AACAG,EAAAA,YAAY,IAAIC,QAAQ,CAACH,IAAD,CAAR,GAAiB,EAAjC;AACAE,EAAAA,YAAY,IAAIC,QAAQ,CAACF,OAAD,CAAxB;AAEA,SAAOC,YAAP;AACD;;AAED,SAAShB,mBAAT,CAA6BL,gBAA7B,EAA+D;AAC7D,MAAMmB,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWhB,gBAAgB,GAAG,EAA9B,CAAb;AACA,MAAMoB,OAAO,GAAGL,IAAI,CAACC,KAAL,CAAWhB,gBAAgB,GAAG,EAA9B,CAAhB;AAEA,mBAAUmB,IAAI,GAAG,EAAP,QAAiBA,IAA3B,cAAmCC,OAAO,GAAG,EAAV,cAAmBA,OAAnB,IAA+BA,OAAlE;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\ninterface IProps {\n  start_time: string;\n  duration: string;\n}\n\nconst Timer: React.FC<IProps> = ({ start_time, duration }) => {\n  const [secondsRemaining, setSecondsRemaining] = useState<number>(\n    getTimeRemainingInSeconds(start_time, duration)\n  );\n\n  const [timeRemaining, setTimeRemaing] = useState<string>(\"\");\n\n  useEffect(() => {\n    setInterval(() => {\n      setSecondsRemaining(getTimeRemainingInSeconds(start_time, duration));\n    }, 500);\n  }, []);\n\n  useEffect(() => {\n    setTimeRemaing(parseSecondsToClock(secondsRemaining));\n  }, [secondsRemaining]);\n\n  return <p>{`${timeRemaining}`}</p>;\n};\n\nexport default Timer;\n\nfunction getTimeRemainingInSeconds(\n  start_time: string,\n  duration: string\n): number {\n  const totalDurationInSeconds: number = getSecondsFromDuration(duration);\n\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n\n  const secondsLeft: number = (end.getTime() - now.getTime()) / 1000;\n\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration: string): number {\n  const [hours, mins, seconds] = duration.split(\":\");\n\n  let totalSeconds: number = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining: number): string {\n  const mins = Math.floor(secondsRemaining / 60);\n  const seconds = Math.floor(secondsRemaining % 60);\n\n  return `${mins < 10 ? `` : mins}:${seconds < 10 ? `0${seconds}` : seconds}`;\n}\n"]},"metadata":{},"sourceType":"module"}