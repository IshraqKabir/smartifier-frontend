{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Avatar, Box, CircularProgress, makeStyles, Snackbar, withStyles } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport Image from \"next/image\";\nimport axios from \"axios\";\nimport useLocalState from \"../../../../../../../custom-hooks/useLocalState\";\nimport { backend_url } from \"../../../../../../../url\";\nconst MAX_CHARACTER_COUNT = 200;\n\nconst ReplyBox = ({\n  commentId,\n  setReplies,\n  setComment\n}) => {\n  const [user] = useLocalState(\"user\", \"\");\n  const {\n    0: reply,\n    1: setReply\n  } = useState(\"\");\n  const {\n    0: isSending,\n    1: setIsSending\n  } = useState(false);\n  const {\n    0: showLoginAlert,\n    1: setShowLoginAlert\n  } = useState(false);\n  const classes = useStyles({\n    reply\n  });\n\n  const handleSubmit = () => {\n    if (!user || !user.token) {\n      showAlert();\n      return;\n    }\n\n    if (reply.length > MAX_CHARACTER_COUNT) return;\n\n    if (reply.length == 0) {\n      showAlert();\n      return;\n    }\n\n    postReply();\n  };\n\n  const handleChange = e => {\n    setReply(e.target.value);\n  };\n\n  const handleEnter = e => {\n    if (e.key === \"Enter\" && reply.length > 0) {\n      handleSubmit();\n    }\n  };\n\n  const postReply = () => {\n    setIsSending(true);\n    axios.post(`${backend_url}/api/comment/reply/store`, {\n      comment_id: commentId,\n      comment: reply\n    }, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${user.token}`\n      }\n    }).then(response => {\n      setIsSending(false);\n      setReplies(state => [response.data, ...state]);\n      setReply(\"\");\n    });\n  };\n\n  const showAlert = () => {\n    setShowLoginAlert(true);\n    setTimeout(() => {\n      setShowLoginAlert(false);\n    }, 3000);\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [/*#__PURE__*/_jsx(Avatar, {\n      src: user === null || user === void 0 ? void 0 : user.picture,\n      style: {\n        width: 35,\n        height: 35,\n        borderRadius: \"50%\",\n        marginRight: \"16px\"\n      }\n    }), /*#__PURE__*/_jsxs(InputContainer, {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"text\",\n        placeholder: user ? \"Leave a reply to the comment!\" : \"Login to post a reply!\",\n        value: reply,\n        onChange: handleChange,\n        onKeyDown: handleEnter,\n        style: {\n          width: \"100%\",\n          padding: \"12px\",\n          marginRight: \"16px\",\n          border: \"1px solid black\"\n        }\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: classes.charactersCount,\n        children: `${reply.length}/${MAX_CHARACTER_COUNT}`\n      })]\n    }), /*#__PURE__*/_jsx(ImageContainer, {\n      children: isSending ? /*#__PURE__*/_jsx(CircularProgress, {\n        size: 25,\n        color: \"inherit\"\n      }) : /*#__PURE__*/_jsx(Image, {\n        src: `/assets/send_icon.svg`,\n        width: 25,\n        height: 25,\n        onClick: handleSubmit\n      })\n    }), /*#__PURE__*/_jsx(LoginAlert, {\n      anchorOrigin: {\n        vertical: \"top\",\n        horizontal: \"center\"\n      },\n      open: showLoginAlert,\n      message: !user.token ? \"Login To Post A Reply!\" : reply.length == 0 ? \"Reply Cannot Be Empty\" : \"Some Error Occurred\"\n    }, commentId)]\n  });\n};\n\nexport default ReplyBox;\nconst Container = withStyles({\n  root: {\n    width: \"100%\",\n    display: \"flex\",\n    marginTop: \"1.5rem\",\n    alignItems: \"center\",\n    marginBottom: \"1.5rem\"\n  }\n})(Box);\nconst ImageContainer = withStyles({\n  root: {\n    display: \"inline-flex\",\n    width: 35,\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    cursor: \"pointer\"\n  }\n})(Box);\nconst InputContainer = withStyles({\n  root: {\n    position: \"relative\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\"\n  }\n})(Box);\nconst useStyles = makeStyles({\n  charactersCount: {\n    position: \"absolute\",\n    bottom: -22,\n    right: 20,\n    fontSize: \"0.8rem\",\n    fontWeight: 700,\n    color: props => {\n      const {\n        reply\n      } = props;\n\n      if (reply.length > MAX_CHARACTER_COUNT) {\n        return \"red\";\n      }\n\n      return \"grey\";\n    }\n  }\n});\nconst LoginAlert = withStyles({\n  root: {\n    zIndex: 20000\n  }\n})(Snackbar);","map":null,"metadata":{},"sourceType":"module"}