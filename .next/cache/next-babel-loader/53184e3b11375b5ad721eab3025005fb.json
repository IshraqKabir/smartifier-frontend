{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from \"react\";\nimport useLocalState from \"../../../custom-hooks/useLocalState\";\nimport submitTest from \"../../../repository/QuizTest/submitTest\";\nexport default function useTestState(quizId, questions, test, duration) {\n  var _useLocalState = useLocalState(\"user\", \"\"),\n      _useLocalState2 = _slicedToArray(_useLocalState, 1),\n      user = _useLocalState2[0];\n\n  var _useLocalState3 = useLocalState(\"\".concat(user === null || user === void 0 ? void 0 : user.email, \"-test\").concat(test === null || test === void 0 ? void 0 : test.id, \"-answers\"), {}),\n      _useLocalState4 = _slicedToArray(_useLocalState3, 2),\n      answers = _useLocalState4[0],\n      setAnswersState = _useLocalState4[1];\n\n  var _useState = useState(0),\n      currentQuestionIndex = _useState[0],\n      setCurrentQuestionIndex = _useState[1];\n\n  var _useState2 = useState(getProgress()),\n      progress = _useState2[0],\n      setProgress = _useState2[1];\n\n  var _useState3 = useState(function () {\n    if (!test) return 600;\n    return getTimeRemainingInSeconds(test === null || test === void 0 ? void 0 : test.created_at, duration.toString());\n  }),\n      secondsRemaining = _useState3[0],\n      setSecondsRemaining = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      timeRemaining = _useState4[0],\n      setTimeRemaing = _useState4[1];\n\n  var _useState5 = useState(false),\n      showSubmitButton = _useState5[0],\n      setShowSubmitButton = _useState5[1];\n\n  var _useState6 = useState(false),\n      isSubmitting = _useState6[0],\n      setIsSubmitting = _useState6[1];\n\n  useEffect(function () {\n    setInterval(function () {\n      setSecondsRemaining(getTimeRemainingInSeconds(test === null || test === void 0 ? void 0 : test.created_at, duration));\n    }, 500);\n  }, []);\n  useEffect(function () {\n    if (secondsRemaining <= 0) {\n      handleSubmit();\n      setTimeRemaing(\"Test Finished\");\n    } else {\n      setTimeRemaing(parseSecondsToClock(secondsRemaining));\n    }\n  }, [secondsRemaining]);\n  useEffect(function () {\n    setProgress(getProgress());\n\n    if (currentQuestionIndex == (questions === null || questions === void 0 ? void 0 : questions.length) - 1) {\n      setShowSubmitButton(true);\n    } else {\n      setShowSubmitButton(false);\n    }\n  }, [currentQuestionIndex]);\n\n  var setAnswers = function setAnswers(optionId, question, text) {\n    setAnswersState(function (state) {\n      var tempAnswers = _objectSpread({}, state);\n\n      if (question.answer_type === \"multiple_choice\") {\n        var options = tempAnswers[\"\".concat(question === null || question === void 0 ? void 0 : question.id)];\n\n        if (!options || Array.isArray(options) && !options[0]) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), [{\n            optionId: optionId\n          }]));\n        }\n\n        if (options && Array.isArray(options) && options[0]) {\n          var _options$;\n\n          if (((_options$ = options[0]) === null || _options$ === void 0 ? void 0 : _options$.optionId) == optionId) {\n            tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), []));\n          } else {\n            tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), [{\n              optionId: optionId\n            }]));\n          }\n        }\n      } else if ((question === null || question === void 0 ? void 0 : question.answer_type) === \"checkboxes\") {\n        var _options = tempAnswers[\"\".concat(question === null || question === void 0 ? void 0 : question.id)];\n\n        if (!_options || Array.isArray(_options) && !_options[0]) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), [{\n            optionId: optionId\n          }]));\n        }\n\n        if (_options && Array.isArray(_options)) {\n          var includes = false;\n          _options === null || _options === void 0 ? void 0 : _options.forEach(function (option) {\n            if ((option === null || option === void 0 ? void 0 : option.optionId) == optionId) {\n              includes = true;\n            }\n          });\n\n          if (includes) {\n            tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), _options === null || _options === void 0 ? void 0 : _options.filter(function (option) {\n              return (option === null || option === void 0 ? void 0 : option.optionId) != optionId;\n            })));\n          } else {\n            tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), [].concat(_toConsumableArray(_options), [{\n              optionId: optionId\n            }])));\n          }\n        }\n      } else if ((question === null || question === void 0 ? void 0 : question.answer_type) === \"short_paragraph\") {\n        if (!text) return _objectSpread({}, tempAnswers);\n        tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question === null || question === void 0 ? void 0 : question.id), [{\n          optionId: optionId,\n          text: text\n        }]));\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  var goToNextQuestion = function goToNextQuestion() {\n    if (currentQuestionIndex >= (questions === null || questions === void 0 ? void 0 : questions.length) - 1) return;\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n  };\n\n  var goToPreviousQuestion = function goToPreviousQuestion() {\n    if (currentQuestionIndex <= 0) return;\n    setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n\n  var showPrevious = currentQuestionIndex != 0;\n  var showNext = currentQuestionIndex < (questions === null || questions === void 0 ? void 0 : questions.length) - 1;\n\n  function getProgress() {\n    if ((questions === null || questions === void 0 ? void 0 : questions.length) == 0) return 100;\n    return (currentQuestionIndex + 1) * 100 / (questions === null || questions === void 0 ? void 0 : questions.length);\n  }\n\n  function handleSubmit() {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _Object$values;\n\n      var processedAnswers, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!answers) alert(\"Not enough answers to submit!\");\n              setIsSubmitting(true);\n              processedAnswers = [];\n              (_Object$values = Object.values(answers)) === null || _Object$values === void 0 ? void 0 : _Object$values.forEach(function (answer) {\n                if (answer && Array.isArray(answer)) {\n                  answer === null || answer === void 0 ? void 0 : answer.forEach(function (option) {\n                    if (option === null || option === void 0 ? void 0 : option.optionId) {\n                      processedAnswers.push({\n                        optionId: option === null || option === void 0 ? void 0 : option.optionId,\n                        text: (option === null || option === void 0 ? void 0 : option.text) ? option === null || option === void 0 ? void 0 : option.text : \"\"\n                      });\n                    }\n                  });\n                }\n              });\n              _context.next = 6;\n              return submitTest(test === null || test === void 0 ? void 0 : test.id, processedAnswers, user === null || user === void 0 ? void 0 : user.token);\n\n            case 6:\n              response = _context.sent;\n\n              if (!(response.error || response == \"error\")) {\n                _context.next = 10;\n                break;\n              }\n\n              alert(\"Something went wrong. Please refresh and submit the test.\");\n              return _context.abrupt(\"return\");\n\n            case 10:\n              setAnswersState({});\n              window.location.href = \"/test/\".concat(test === null || test === void 0 ? void 0 : test.id, \"/result\");\n              setIsSubmitting(false);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return {\n    answers: answers,\n    setAnswers: setAnswers,\n    progress: progress,\n    currentQuestionIndex: currentQuestionIndex,\n    goToNextQuestion: goToNextQuestion,\n    goToPreviousQuestion: goToPreviousQuestion,\n    showPrevious: showPrevious,\n    showNext: showNext,\n    timeRemaining: timeRemaining,\n    secondsRemaining: secondsRemaining,\n    showSubmitButton: showSubmitButton,\n    isSubmitting: isSubmitting,\n    handleSubmit: handleSubmit\n  };\n}\n\nfunction getTimeRemainingInSeconds(start_time, duration) {\n  var totalDurationInSeconds = getSecondsFromDuration(duration);\n  var start = new Date(\"\".concat(start_time));\n  var now = new Date();\n  var end = new Date(\"\".concat(start_time));\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  var secondsLeft = (end.getTime() - now.getTime()) / 1000;\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration) {\n  var _duration$split = duration.split(\":\"),\n      _duration$split2 = _slicedToArray(_duration$split, 3),\n      hours = _duration$split2[0],\n      mins = _duration$split2[1],\n      seconds = _duration$split2[2];\n\n  var totalSeconds = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining) {\n  var mins = Math.floor(secondsRemaining / 60);\n  var seconds = Math.floor(secondsRemaining % 60);\n  return \"\".concat(mins < 10 ? \"0\".concat(mins) : mins, \":\").concat(seconds < 10 ? \"0\".concat(seconds) : seconds);\n}","map":null,"metadata":{},"sourceType":"module"}