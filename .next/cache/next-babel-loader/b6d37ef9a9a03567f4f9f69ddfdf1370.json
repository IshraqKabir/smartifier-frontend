{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/Post/SinglePost/PostBody/PostBody.tsx\",\n    _this = this;\n\nimport React from \"react\";\nimport parse from \"html-react-parser\";\nimport PostBodyImage from \"./PostBodyImage/PostBodyImage\";\nimport PostBodyText from \"./PostBodyText/PostBodyText\";\nvar options = {\n  replace: function replace(_ref) {\n    var attribs = _ref.attribs,\n        children = _ref.children;\n    var image;\n\n    if (children) {\n      children.forEach(function (child) {\n        if (child.name == \"img\") {\n          var _child$attribs;\n\n          image = /*#__PURE__*/_jsxDEV(PostBodyImage, {\n            src: child.attribs.src,\n            caption: (_child$attribs = child.attribs) === null || _child$attribs === void 0 ? void 0 : _child$attribs.alt,\n            isWide: attribs[\"data-layout\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 13\n          }, _this);\n        }\n      });\n      if (image) return image; // check if text\n\n      if (children) {\n        console.log(attribsconsole.log(children));\n\n        if (children[0] && children[0].type === \"text\") {\n          var child = children[0];\n          return /*#__PURE__*/_jsxDEV(PostBodyText, {\n            text: child.data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 18\n          }, _this);\n        }\n      }\n    }\n  }\n};\n\nvar PostBody = function PostBody(_ref2) {\n  var body = _ref2.body;\n  var el = parse(\"\".concat(body), options);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: el\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, _this);\n};\n\n_c = PostBody;\nexport default PostBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostBody\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/Post/SinglePost/PostBody/PostBody.tsx"],"names":["React","parse","PostBodyImage","PostBodyText","options","replace","attribs","children","image","forEach","child","name","src","alt","console","log","attribsconsole","type","data","PostBody","body","el"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAA8C,mBAA9C;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AAEA,IAAMC,OAA+B,GAAG;AACtCC,EAAAA,OAAO,EAAE,uBAAgC;AAAA,QAA7BC,OAA6B,QAA7BA,OAA6B;AAAA,QAApBC,QAAoB,QAApBA,QAAoB;AACvC,QAAIC,KAAJ;;AACA,QAAID,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,KAAD,EAAW;AAC1B,YAAIA,KAAK,CAACC,IAAN,IAAc,KAAlB,EAAyB;AAAA;;AACvBH,UAAAA,KAAK,gBACH,QAAC,aAAD;AACE,YAAA,GAAG,EAAEE,KAAK,CAACJ,OAAN,CAAcM,GADrB;AAEE,YAAA,OAAO,oBAAEF,KAAK,CAACJ,OAAR,mDAAE,eAAeO,GAF1B;AAGE,YAAA,MAAM,EAAEP,OAAO,CAAC,aAAD;AAHjB;AAAA;AAAA;AAAA;AAAA,mBADF;AAOD;AACF,OAVD;AAYA,UAAIE,KAAJ,EAAW,OAAOA,KAAP,CAbC,CAeZ;;AACA,UAAID,QAAJ,EAAc;AACZO,QAAAA,OAAO,CAACC,GAAR,CAAYC,cAAc,CAACD,GAAf,CAAmBR,QAAnB,CAAZ;;AACA,YAAIA,QAAQ,CAAC,CAAD,CAAR,IAAeA,QAAQ,CAAC,CAAD,CAAR,CAAYU,IAAZ,KAAqB,MAAxC,EAAgD;AAC9C,cAAMP,KAAK,GAAGH,QAAQ,CAAC,CAAD,CAAtB;AACA,8BAAO,QAAC,YAAD;AAAc,YAAA,IAAI,EAAEG,KAAK,CAACQ;AAA1B;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD;AACF;AACF;AACF;AA3BqC,CAAxC;;AAkCA,IAAMC,QAA0B,GAAG,SAA7BA,QAA6B,QAAc;AAAA,MAAXC,IAAW,SAAXA,IAAW;AAC/C,MAAMC,EAAE,GAAGpB,KAAK,WAAImB,IAAJ,GAAYhB,OAAZ,CAAhB;AAEA,sBAAO;AAAA,cAAMiB;AAAN;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAJD;;KAAMF,Q;AAMN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\n\nimport parse, { HTMLReactParserOptions } from \"html-react-parser\";\nimport PostBodyImage from \"./PostBodyImage/PostBodyImage\";\nimport PostBodyText from \"./PostBodyText/PostBodyText\";\n\nconst options: HTMLReactParserOptions = {\n  replace: ({ attribs, children }: any) => {\n    let image: any;\n    if (children) {\n      children.forEach((child) => {\n        if (child.name == \"img\") {\n          image = (\n            <PostBodyImage\n              src={child.attribs.src}\n              caption={child.attribs?.alt}\n              isWide={attribs[\"data-layout\"]}\n            />\n          );\n        }\n      });\n\n      if (image) return image;\n\n      // check if text\n      if (children) {\n        console.log(attribsconsole.log(children))\n        if (children[0] && children[0].type === \"text\") {\n          const child = children[0];\n          return <PostBodyText text={child.data} />;\n        }\n      }\n    }\n  },\n};\n\ninterface IProps {\n  body: string;\n}\n\nconst PostBody: React.FC<IProps> = ({ body }) => {\n  const el = parse(`${body}`, options);\n\n  return <div>{el}</div>;\n};\n\nexport default PostBody;\n"]},"metadata":{},"sourceType":"module"}