{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport startTest from \"../../repository/QuizTest/startTest\";\nexport default function useQuizTest(quizId) {\n  var _useLocalState = useLocalState(\"user\", \"\"),\n      _useLocalState2 = _slicedToArray(_useLocalState, 1),\n      user = _useLocalState2[0];\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      testStatus = _useState2[0],\n      setTestStatus = _useState2[1];\n\n  var _useState3 = useState(),\n      quiz = _useState3[0],\n      setQuiz = _useState3[1];\n\n  var _useState4 = useState(),\n      test = _useState4[0],\n      setTest = _useState4[1];\n\n  useEffect(function () {\n    if (!user || !(user === null || user === void 0 ? void 0 : user.token)) return;\n    fetchStartTest();\n  }, []);\n\n  var fetchStartTest = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsLoading(true);\n              _context.next = 3;\n              return startTest(quizId, user === null || user === void 0 ? void 0 : user.token);\n\n            case 3:\n              response = _context.sent;\n              setTestStatus(response === null || response === void 0 ? void 0 : response.status);\n              setQuiz(response === null || response === void 0 ? void 0 : response.quiz);\n              setTest(response === null || response === void 0 ? void 0 : response.test);\n              setIsLoading(false);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchStartTest() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    isLoading: isLoading,\n    testStatus: testStatus,\n    quiz: quiz,\n    test: test\n  };\n}","map":null,"metadata":{},"sourceType":"module"}