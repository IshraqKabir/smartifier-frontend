{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Timer = ({\n  start_time,\n  duration\n}) => {\n  const {\n    0: timeElapsed,\n    1: setTimeElapsed\n  } = useState(getTimeElapsed(start_time));\n  useEffect(() => {\n    setInterval(() => {\n      setTimeElapsed(getTimeElapsed(start_time));\n    }, 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: `${timeElapsed}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Timer;\n\nfunction getTimeElapsed(start_time) {\n  let start = new Date(`${start_time}`);\n  let now = new Date();\n  let timePassedInSeconds = (now.getTime() - start.getTime()) / 1000;\n  return Math.floor(timePassedInSeconds);\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx"],"names":["React","useEffect","useState","Timer","start_time","duration","timeElapsed","setTimeElapsed","getTimeElapsed","setInterval","start","Date","now","timePassedInSeconds","getTime","Math","floor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAOA,MAAMC,KAAuB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAA8B;AAC5D,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAC5CM,cAAc,CAACJ,UAAD,CAD8B,CAA9C;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAAC,MAAM;AAChBF,MAAAA,cAAc,CAACC,cAAc,CAACJ,UAAD,CAAf,CAAd;AACD,KAFU,EAER,IAFQ,CAAX;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,sBAAO;AAAA,cAAK,GAAEE,WAAY;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAZD;;AAcA,eAAeH,KAAf;;AAEA,SAASK,cAAT,CAAwBJ,UAAxB,EAAoD;AAClD,MAAIM,KAAK,GAAG,IAAIC,IAAJ,CAAU,GAAEP,UAAW,EAAvB,CAAZ;AACA,MAAIQ,GAAG,GAAG,IAAID,IAAJ,EAAV;AAEA,MAAIE,mBAA2B,GAAG,CAACD,GAAG,CAACE,OAAJ,KAAgBJ,KAAK,CAACI,OAAN,EAAjB,IAAoC,IAAtE;AAEA,SAAOC,IAAI,CAACC,KAAL,CAAWH,mBAAX,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\ninterface IProps {\n  start_time: string;\n  duration: string;\n}\n\nconst Timer: React.FC<IProps> = ({ start_time, duration }) => {\n  const [timeElapsed, setTimeElapsed] = useState<string>(\n    getTimeElapsed(start_time)\n  );\n\n  useEffect(() => {\n    setInterval(() => {\n      setTimeElapsed(getTimeElapsed(start_time));\n    }, 1000);\n  }, []);\n\n  return <p>{`${timeElapsed}`}</p>;\n};\n\nexport default Timer;\n\nfunction getTimeElapsed(start_time: string): number {\n  let start = new Date(`${start_time}`);\n  let now = new Date();\n\n  let timePassedInSeconds: number = (now.getTime() - start.getTime()) / 1000;\n\n  return Math.floor(timePassedInSeconds);\n}\n"]},"metadata":{},"sourceType":"module"}