{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Avatar, Box, CircularProgress, makeStyles, Snackbar, withStyles } from \"@material-ui/core\";\nimport React, { useContext, useState } from \"react\";\nimport useLocalState from \"../../../../custom-hooks/useLocalState\";\nimport Image from \"next/image\";\nimport axios from \"axios\";\nimport { backend_url } from \"../../../../url\";\nimport { CommentsContext, CommentsCountContext } from \"../SinglePost\";\nimport useLoginAlert from \"../../../../custom-hooks/useLoginAlert\";\nvar MAX_CHARACTER_COUNT = 200;\n\nvar CommentBox = function CommentBox(_ref) {\n  var postId = _ref.postId;\n\n  var _useLocalState = useLocalState(\"user\", \"\"),\n      _useLocalState2 = _slicedToArray(_useLocalState, 1),\n      user = _useLocalState2[0];\n\n  var _useState = useState(\"\"),\n      comment = _useState[0],\n      setComment = _useState[1];\n\n  var _useState2 = useState(false),\n      isSending = _useState2[0],\n      setIsSending = _useState2[1];\n\n  var _useLoginAlert = useLoginAlert(),\n      showLoginAlert = _useLoginAlert.showLoginAlert,\n      handleClickWhenLoggedOut = _useLoginAlert.handleClickWhenLoggedOut;\n\n  var _useContext = useContext(CommentsCountContext),\n      setCommentsCount = _useContext.setCommentsCount;\n\n  var _useContext2 = useContext(CommentsContext),\n      setComments = _useContext2.setComments;\n\n  var classes = useStyles({\n    comment: comment\n  });\n\n  var handleSubmit = function handleSubmit() {\n    if (!(user === null || user === void 0 ? void 0 : user.token)) {\n      handleClickWhenLoggedOut();\n      return;\n    }\n\n    if (comment.length > MAX_CHARACTER_COUNT) return;\n\n    if (comment.length == 0) {\n      handleClickWhenLoggedOut();\n      return;\n    }\n\n    postComment();\n  };\n\n  var handleChange = function handleChange(e) {\n    setComment(e.target.value);\n  };\n\n  var handleEnter = function handleEnter(e) {\n    if (e.key === \"Enter\" && comment.length > 0) {\n      handleSubmit();\n    }\n  };\n\n  var postComment = function postComment() {\n    setIsSending(true);\n    axios.post(\"\".concat(backend_url, \"/api/post/comment/store\"), {\n      post_id: postId,\n      comment: comment\n    }, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: \"Bearer \".concat(user === null || user === void 0 ? void 0 : user.token)\n      }\n    }).then(function (response) {\n      setIsSending(false);\n      setCommentsCount(function (count) {\n        return count + 1;\n      });\n      setComments(function (comments) {\n        return [response.data].concat(_toConsumableArray(comments));\n      });\n      setComment(\"\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [/*#__PURE__*/_jsx(Avatar, {\n      src: user === null || user === void 0 ? void 0 : user.picture,\n      style: {\n        width: 35,\n        height: 35,\n        borderRadius: \"50%\",\n        marginRight: \"16px\"\n      }\n    }), /*#__PURE__*/_jsxs(InputContainer, {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"text\",\n        placeholder: user ? \"Tell us what you think about this post!\" : \"Login to post a comment!\",\n        value: comment,\n        onChange: handleChange,\n        onKeyDown: handleEnter,\n        style: {\n          width: \"100%\",\n          padding: \"12px\",\n          marginRight: \"16px\",\n          border: \"1px solid black\"\n        }\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: classes.charactersCount,\n        children: \"\".concat(comment.length, \"/\").concat(MAX_CHARACTER_COUNT)\n      })]\n    }), /*#__PURE__*/_jsx(ImageContainer, {\n      children: isSending ? /*#__PURE__*/_jsx(CircularProgress, {\n        size: 25,\n        color: \"inherit\"\n      }) : /*#__PURE__*/_jsx(Image, {\n        src: \"/assets/send_icon.svg\",\n        width: 25,\n        height: 25,\n        onClick: handleSubmit\n      })\n    }), /*#__PURE__*/_jsx(LoginAlert, {\n      anchorOrigin: {\n        vertical: \"top\",\n        horizontal: \"center\"\n      },\n      open: showLoginAlert,\n      message: !(user === null || user === void 0 ? void 0 : user.token) ? \"Login To Post A Comment!\" : comment.length == 0 ? \"Comment Cannot Be Empty\" : \"Some Error Occurred\"\n    }, postId)]\n  });\n};\n\nexport default CommentBox;\nvar Container = withStyles({\n  root: {\n    width: \"100%\",\n    display: \"flex\",\n    marginTop: \"1.5rem\",\n    alignItems: \"center\"\n  }\n})(Box);\nvar ImageContainer = withStyles({\n  root: {\n    display: \"inline-flex\",\n    width: 35,\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    cursor: \"pointer\"\n  }\n})(Box);\nvar InputContainer = withStyles({\n  root: {\n    position: \"relative\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\"\n  }\n})(Box);\nvar useStyles = makeStyles({\n  charactersCount: {\n    position: \"absolute\",\n    bottom: -22,\n    right: 20,\n    fontSize: \"0.8rem\",\n    fontWeight: 700,\n    color: function color(props) {\n      var comment = props.comment;\n\n      if (comment.length > MAX_CHARACTER_COUNT) {\n        return \"red\";\n      }\n\n      return \"grey\";\n    }\n  }\n});\nvar LoginAlert = withStyles({\n  root: {\n    zIndex: 20000\n  }\n})(Snackbar);","map":null,"metadata":{},"sourceType":"module"}