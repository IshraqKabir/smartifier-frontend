{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\n\nconst useLocalState = (key, defaultValue) => {\n  const {\n    0: value,\n    1: setValueState\n  } = useState(() => {\n    if (false) {\n      return getValue(key);\n    }\n  });\n  useEffect(() => {\n    const listener = e => {\n      if (e.storageArea === localStorage && e.key === key) {\n        setValueState(JSON.parse(e.newValue));\n      }\n    };\n\n    window.addEventListener(\"storage\", listener);\n    return () => {\n      window.removeEventListener(\"storage\", listener);\n    };\n  }, [key]);\n  useEffect(() => {\n    console.log(Cookis.e);\n  }, []);\n\n  const setValue = newValue => {\n    setValueState(currentValue => {\n      let value = null;\n\n      if (typeof newValue === \"function\") {\n        value = newValue(currentValue);\n      } else {\n        value = newValue;\n      }\n\n      setCookie(key, value);\n      localStorage.setItem(key, JSON.stringify(value));\n      return value;\n    });\n  };\n\n  return [value, setValue];\n};\n\nexport default useLocalState;\n\nconst getValue = key => {\n  if (isLocalStorageWorking()) {\n    // return from local storage\n    const value = localStorage.getItem(key);\n    return value ? JSON.parse(value) : value;\n  } // return from cookie;\n\n\n  return getCookie(key);\n};\n\nconst isLocalStorageWorking = () => {\n  return false;\n};\n\nconst setCookie = (key, value) => {\n  Cookies.set(key, value ? JSON.stringify(value) : value);\n};\n\nconst getCookie = key => {\n  const result = Cookies.get(JSON.stringify(key));\n  return result ? JSON.parse(result) : result;\n}; // function useLocalState<T>(key: string, defaultValue: T) {\n//   const [value, setValue] = useState(() => {\n//     if (isLocalStorageWorking() == false) {\n//       return getCookie(key);\n//     }\n//     let result = null;\n//     if (process.browser) {\n//       const storedValue = localStorage.getItem(key)\n//         ? JSON.parse(localStorage.getItem(key))\n//         : localStorage.getItem(key);\n//       if (!storedValue) {\n//         result = defaultValue;\n//       }\n//       result = storedValue === null ? defaultValue : storedValue;\n//     } else {\n//       result = defaultValue;\n//     }\n//     return result;\n//   });\n//   useEffect(() => {\n//     const listener = (e) => {\n//       if (e.storageArea === localStorage && e.key === key) {\n//         setValue(JSON.parse(e.newValue));\n//       }\n//     };\n//     window.addEventListener(\"storage\", listener);\n//     return () => {\n//       window.removeEventListener(\"storage\", listener);\n//     };\n//   }, [key]);\n//   const setValueInLocalStorage = (newValue) => {\n//     setValue((currentValue) => {\n//       let value = null;\n//       if (typeof newValue === \"function\") {\n//         setCookie(key, newValue(currentValue));\n//         value = newValue(currentValue);\n//       } else {\n//         setCookie(key, newValue);\n//         value = newValue;\n//       }\n//       // const result =\n//       //   typeof newValue === \"function\" ? newValue(currentValue) : newValue;\n//       // localStorage.setItem(key, JSON.stringify(result));\n//       return value;\n//     });\n//   };\n//   useEffect(() => {\n//     const storedValue = JSON.parse(localStorage.getItem(key));\n//     if (storedValue) {\n//       setValueInLocalStorage(storedValue);\n//     } else {\n//       setValueInLocalStorage(value);\n//     }\n//   }, []);\n//   return [value, setValueInLocalStorage];\n// }\n// export default useLocalState;","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/custom-hooks/useLocalState.ts"],"names":["useState","useEffect","Cookies","useLocalState","key","defaultValue","value","setValueState","getValue","listener","e","storageArea","localStorage","JSON","parse","newValue","window","addEventListener","removeEventListener","console","log","Cookis","setValue","currentValue","setCookie","setItem","stringify","isLocalStorageWorking","getItem","getCookie","set","result","get"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\n\nconst useLocalState = (key: string, defaultValue: any) => {\n  const [value, setValueState] = useState(() => {\n    if (process.browser) {\n      return getValue(key);\n    }\n  });\n\n  useEffect(() => {\n    const listener = (e) => {\n      if (e.storageArea === localStorage && e.key === key) {\n        setValueState(JSON.parse(e.newValue));\n      }\n    };\n    window.addEventListener(\"storage\", listener);\n\n    return () => {\n      window.removeEventListener(\"storage\", listener);\n    };\n  }, [key]);\n\n  useEffect(() => {\n    console.log(Cookis.e)\n  }, []);\n\n  const setValue = (newValue) => {\n    setValueState((currentValue) => {\n      let value = null;\n\n      if (typeof newValue === \"function\") {\n        value = newValue(currentValue);\n      } else {\n        value = newValue;\n      }\n\n      setCookie(key, value);\n      localStorage.setItem(key, JSON.stringify(value));\n\n      return value;\n    });\n  };\n\n  return [value, setValue];\n};\n\nexport default useLocalState;\n\nconst getValue = (key) => {\n  if (isLocalStorageWorking()) {\n    // return from local storage\n    const value = localStorage.getItem(key);\n    return value ? JSON.parse(value) : value;\n  }\n\n  // return from cookie;\n  return getCookie(key);\n};\n\nconst isLocalStorageWorking = (): boolean => {\n  return false;\n};\n\nconst setCookie = (key, value) => {\n  Cookies.set(key, value ? JSON.stringify(value) : value);\n};\n\nconst getCookie = (key) => {\n  const result = Cookies.get(JSON.stringify(key));\n  return result ? JSON.parse(result) : result;\n};\n\n// function useLocalState<T>(key: string, defaultValue: T) {\n//   const [value, setValue] = useState(() => {\n//     if (isLocalStorageWorking() == false) {\n//       return getCookie(key);\n//     }\n\n//     let result = null;\n//     if (process.browser) {\n//       const storedValue = localStorage.getItem(key)\n//         ? JSON.parse(localStorage.getItem(key))\n//         : localStorage.getItem(key);\n\n//       if (!storedValue) {\n//         result = defaultValue;\n//       }\n//       result = storedValue === null ? defaultValue : storedValue;\n//     } else {\n//       result = defaultValue;\n//     }\n\n//     return result;\n//   });\n\n//   useEffect(() => {\n//     const listener = (e) => {\n//       if (e.storageArea === localStorage && e.key === key) {\n//         setValue(JSON.parse(e.newValue));\n//       }\n//     };\n//     window.addEventListener(\"storage\", listener);\n\n//     return () => {\n//       window.removeEventListener(\"storage\", listener);\n//     };\n//   }, [key]);\n\n//   const setValueInLocalStorage = (newValue) => {\n//     setValue((currentValue) => {\n//       let value = null;\n//       if (typeof newValue === \"function\") {\n//         setCookie(key, newValue(currentValue));\n//         value = newValue(currentValue);\n//       } else {\n//         setCookie(key, newValue);\n//         value = newValue;\n//       }\n//       // const result =\n//       //   typeof newValue === \"function\" ? newValue(currentValue) : newValue;\n//       // localStorage.setItem(key, JSON.stringify(result));\n//       return value;\n//     });\n//   };\n\n//   useEffect(() => {\n//     const storedValue = JSON.parse(localStorage.getItem(key));\n//     if (storedValue) {\n//       setValueInLocalStorage(storedValue);\n//     } else {\n//       setValueInLocalStorage(value);\n//     }\n//   }, []);\n\n//   return [value, setValueInLocalStorage];\n// }\n\n// export default useLocalState;\n"]},"metadata":{},"sourceType":"module"}