{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nimport useLocalState from \"../../../custom-hooks/useLocalState\";\nimport submitTest from \"../../../repository/QuizTest/submitTest\";\nexport default function useTestState(quizId, questions, test, duration) {\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswersState] = useLocalState(`${user === null || user === void 0 ? void 0 : user.email}-quiz${quizId}-answers`, {});\n  const {\n    0: currentQuestionIndex,\n    1: setCurrentQuestionIndex\n  } = useState(0);\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(getProgress());\n  const {\n    0: secondsRemaining,\n    1: setSecondsRemaining\n  } = useState(() => {\n    if (!test) return 600;\n    return getTimeRemainingInSeconds(test === null || test === void 0 ? void 0 : test.created_at, duration.toString());\n  });\n  const {\n    0: timeRemaining,\n    1: setTimeRemaing\n  } = useState(\"\");\n  const {\n    0: showSubmitButton,\n    1: setShowSubmitButton\n  } = useState(false);\n  const {\n    0: isSubmitting,\n    1: setIsSubmitting\n  } = useState(false);\n  useEffect(() => {\n    setInterval(() => {\n      setSecondsRemaining(getTimeRemainingInSeconds(test === null || test === void 0 ? void 0 : test.created_at, duration));\n    }, 500);\n  }, []);\n  useEffect(() => {\n    if (secondsRemaining <= 0) {\n      handleSubmit();\n      setTimeRemaing(\"Test Finished\");\n    } else {\n      setTimeRemaing(parseSecondsToClock(secondsRemaining));\n    }\n  }, [secondsRemaining]);\n  useEffect(() => {\n    setProgress(getProgress());\n\n    if (currentQuestionIndex == (questions === null || questions === void 0 ? void 0 : questions.length) - 1) {\n      setShowSubmitButton(true);\n    } else {\n      setShowSubmitButton(false);\n    }\n  }, [currentQuestionIndex]);\n\n  const setAnswers = (optionId, question, text) => {\n    setAnswersState(state => {\n      let tempAnswers = _objectSpread({}, state);\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question === null || question === void 0 ? void 0 : question.id}`];\n\n        if (!options || Array.isArray(options) && !options[0]) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question === null || question === void 0 ? void 0 : question.id}`]: [{\n              optionId: optionId\n            }]\n          });\n        }\n\n        if (options && Array.isArray(options) && options[0]) {\n          var _options$;\n\n          if (((_options$ = options[0]) === null || _options$ === void 0 ? void 0 : _options$.optionId) == optionId) {\n            tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n              [`${question === null || question === void 0 ? void 0 : question.id}`]: []\n            });\n          } else {\n            tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n              [`${question === null || question === void 0 ? void 0 : question.id}`]: [{\n                optionId: optionId\n              }]\n            });\n          }\n        }\n      } else if ((question === null || question === void 0 ? void 0 : question.answer_type) === \"checkboxes\") {\n        const options = tempAnswers[`${question === null || question === void 0 ? void 0 : question.id}`];\n\n        if (!options || Array.isArray(options) && !options[0]) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question === null || question === void 0 ? void 0 : question.id}`]: [{\n              optionId: optionId\n            }]\n          });\n        }\n\n        if (options && Array.isArray(options)) {\n          let includes = false;\n          options === null || options === void 0 ? void 0 : options.forEach(option => {\n            if ((option === null || option === void 0 ? void 0 : option.optionId) == optionId) {\n              includes = true;\n            }\n          });\n\n          if (includes) {\n            tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n              [`${question === null || question === void 0 ? void 0 : question.id}`]: options === null || options === void 0 ? void 0 : options.filter(option => {\n                return (option === null || option === void 0 ? void 0 : option.optionId) != optionId;\n              })\n            });\n          } else {\n            tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n              [`${question === null || question === void 0 ? void 0 : question.id}`]: [...options, {\n                optionId: optionId\n              }]\n            });\n          }\n        }\n      } else if ((question === null || question === void 0 ? void 0 : question.answer_type) === \"short_paragraph\") {\n        if (!text) return _objectSpread({}, tempAnswers);\n        tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n          [`${question === null || question === void 0 ? void 0 : question.id}`]: {\n            optionId: optionId,\n            text: text\n          }\n        });\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  const goToNextQuestion = () => {\n    if (currentQuestionIndex >= (questions === null || questions === void 0 ? void 0 : questions.length) - 1) return;\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n  };\n\n  const goToPreviousQuestion = () => {\n    if (currentQuestionIndex <= 0) return;\n    setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n\n  const showPrevious = currentQuestionIndex != 0;\n  const showNext = currentQuestionIndex < (questions === null || questions === void 0 ? void 0 : questions.length) - 1;\n\n  function getProgress() {\n    if ((questions === null || questions === void 0 ? void 0 : questions.length) == 0) return 100;\n    return (currentQuestionIndex + 1) * 100 / (questions === null || questions === void 0 ? void 0 : questions.length);\n  }\n\n  async function handleSubmit() {\n    var _cObject$values;\n\n    if (!answers) alert(\"Not enough answers to submit!\"); // setIsSubmitting(true);\n\n    const processedAnswers = [];\n    (_cObject$values = cObject.values(answers)) === null || _cObject$values === void 0 ? void 0 : _cObject$values.map(value => {\n      return {\n        optionId: value === null || value === void 0 ? void 0 : value.optionId,\n        text: (value === null || value === void 0 ? void 0 : value.text) ? value === null || value === void 0 ? void 0 : value.text : \"\"\n      };\n    });\n    console.log(answers);\n    console.log(processedAnswers);\n    return;\n    const response = await submitTest(test === null || test === void 0 ? void 0 : test.id, processedAnswers, user === null || user === void 0 ? void 0 : user.token);\n    setIsSubmitting(false);\n    console.log(response);\n    return;\n\n    if (response.error) {\n      alert(\"Something went wrong. Please refresh and submit the test.\");\n      return;\n    }\n\n    setAnswersState({});\n    window.location.href = \"/user/profile\";\n  }\n\n  return {\n    answers,\n    setAnswers,\n    progress,\n    currentQuestionIndex,\n    goToNextQuestion,\n    goToPreviousQuestion,\n    showPrevious,\n    showNext,\n    timeRemaining,\n    secondsRemaining,\n    showSubmitButton,\n    isSubmitting,\n    handleSubmit\n  };\n}\n\nfunction getTimeRemainingInSeconds(start_time, duration) {\n  const totalDurationInSeconds = getSecondsFromDuration(duration);\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  const secondsLeft = (end.getTime() - now.getTime()) / 1000;\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration) {\n  const [hours, mins, seconds] = duration.split(\":\");\n  let totalSeconds = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining) {\n  const mins = Math.floor(secondsRemaining / 60);\n  const seconds = Math.floor(secondsRemaining % 60);\n  return `${mins < 10 ? `0${mins}` : mins}:${seconds < 10 ? `0${seconds}` : seconds}`;\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/useTestState.tsx"],"names":["useEffect","useState","useLocalState","submitTest","useTestState","quizId","questions","test","duration","user","answers","setAnswersState","email","currentQuestionIndex","setCurrentQuestionIndex","progress","setProgress","getProgress","secondsRemaining","setSecondsRemaining","getTimeRemainingInSeconds","created_at","toString","timeRemaining","setTimeRemaing","showSubmitButton","setShowSubmitButton","isSubmitting","setIsSubmitting","setInterval","handleSubmit","parseSecondsToClock","length","setAnswers","optionId","question","text","state","tempAnswers","answer_type","options","id","Array","isArray","includes","forEach","option","filter","goToNextQuestion","goToPreviousQuestion","showPrevious","showNext","alert","processedAnswers","cObject","values","map","value","console","log","response","token","error","window","location","href","start_time","totalDurationInSeconds","getSecondsFromDuration","start","Date","now","end","setTime","getTime","secondsLeft","Math","floor","hours","mins","seconds","split","totalSeconds","parseInt"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useLocalState from \"../../../custom-hooks/useLocalState\";\nimport IQuestion from \"../../../Models/IQuestion\";\nimport submitTest from \"../../../repository/QuizTest/submitTest\";\n\nexport default function useTestState(\n  quizId: number,\n  questions: IQuestion[],\n  test: any,\n  duration: string\n) {\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswersState] = useLocalState(\n    `${user?.email}-quiz${quizId}-answers`,\n    {}\n  );\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<number>(0);\n  const [progress, setProgress] = useState(getProgress());\n\n  const [secondsRemaining, setSecondsRemaining] = useState<number>(() => {\n    if (!test) return 600;\n\n    return getTimeRemainingInSeconds(test?.created_at, duration.toString());\n  });\n  const [timeRemaining, setTimeRemaing] = useState<string>(\"\");\n\n  const [showSubmitButton, setShowSubmitButton] = useState<boolean>(false);\n\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n  useEffect(() => {\n    setInterval(() => {\n      setSecondsRemaining(\n        getTimeRemainingInSeconds(test?.created_at, duration)\n      );\n    }, 500);\n  }, []);\n\n  useEffect(() => {\n    if (secondsRemaining <= 0) {\n      handleSubmit();\n      setTimeRemaing(\"Test Finished\");\n    } else {\n      setTimeRemaing(parseSecondsToClock(secondsRemaining));\n    }\n  }, [secondsRemaining]);\n\n  useEffect(() => {\n    setProgress(getProgress());\n    if (currentQuestionIndex == questions?.length - 1) {\n      setShowSubmitButton(true);\n    } else {\n      setShowSubmitButton(false);\n    }\n  }, [currentQuestionIndex]);\n\n  const setAnswers = (optionId: number, question: IQuestion, text?: string) => {\n    setAnswersState((state: any) => {\n      let tempAnswers = { ...state };\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question?.id}`];\n\n        if (!options || (Array.isArray(options) && !options[0])) {\n          tempAnswers = {\n            ...state,\n            [`${question?.id}`]: [{ optionId: optionId }],\n          };\n        }\n\n        if (options && Array.isArray(options) && options[0]) {\n          if (options[0]?.optionId == optionId) {\n            tempAnswers = { ...state, [`${question?.id}`]: [] };\n          } else {\n            tempAnswers = {\n              ...state,\n              [`${question?.id}`]: [{ optionId: optionId }],\n            };\n          }\n        }\n      } else if (question?.answer_type === \"checkboxes\") {\n        const options = tempAnswers[`${question?.id}`];\n\n        if (!options || (Array.isArray(options) && !options[0])) {\n          tempAnswers = {\n            ...state,\n            [`${question?.id}`]: [{ optionId: optionId }],\n          };\n        }\n\n        if (options && Array.isArray(options)) {\n          let includes = false;\n\n          options?.forEach((option) => {\n            if (option?.optionId == optionId) {\n              includes = true;\n            }\n          });\n\n          if (includes) {\n            tempAnswers = {\n              ...state,\n              [`${question?.id}`]: options?.filter((option) => {\n                return option?.optionId != optionId;\n              }),\n            };\n          } else {\n            tempAnswers = {\n              ...state,\n              [`${question?.id}`]: [...options, { optionId: optionId }],\n            };\n          }\n        }\n      } else if (question?.answer_type === \"short_paragraph\") {\n        if (!text) return { ...tempAnswers };\n        tempAnswers = {\n          ...state,\n          [`${question?.id}`]: {\n            optionId: optionId,\n            text: text,\n          },\n        };\n      }\n\n      return { ...tempAnswers };\n    });\n  };\n\n  const goToNextQuestion = () => {\n    if (currentQuestionIndex >= questions?.length - 1) return;\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n  };\n\n  const goToPreviousQuestion = () => {\n    if (currentQuestionIndex <= 0) return;\n    setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n\n  const showPrevious: boolean = currentQuestionIndex != 0;\n  const showNext: boolean = currentQuestionIndex < questions?.length - 1;\n\n  function getProgress() {\n    if (questions?.length == 0) return 100;\n\n    return ((currentQuestionIndex + 1) * 100) / questions?.length;\n  }\n\n  async function handleSubmit() {\n    if (!answers) alert(\"Not enough answers to submit!\");\n    // setIsSubmitting(true);\n\n    const processedAnswers = [];\n\n    cObject.values(answers)?.map((value: any) => {\n      return {\n        optionId: value?.optionId,\n        text: value?.text ? value?.text : \"\",\n      };\n    });\n\n    console.log(answers);\n    console.log(processedAnswers);\n    return;\n\n    const response = await submitTest(test?.id, processedAnswers, user?.token);\n\n    setIsSubmitting(false);\n\n    console.log(response);\n    return;\n\n    if (response.error) {\n      alert(\"Something went wrong. Please refresh and submit the test.\");\n      return;\n    }\n\n    setAnswersState({});\n    window.location.href = \"/user/profile\";\n  }\n\n  return {\n    answers,\n    setAnswers,\n    progress,\n    currentQuestionIndex,\n    goToNextQuestion,\n    goToPreviousQuestion,\n    showPrevious,\n    showNext,\n    timeRemaining,\n    secondsRemaining,\n    showSubmitButton,\n    isSubmitting,\n    handleSubmit,\n  };\n}\n\nfunction getTimeRemainingInSeconds(\n  start_time: string,\n  duration: string\n): number {\n  const totalDurationInSeconds: number = getSecondsFromDuration(duration);\n\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n\n  const secondsLeft: number = (end.getTime() - now.getTime()) / 1000;\n\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration: string): number {\n  const [hours, mins, seconds] = duration.split(\":\");\n\n  let totalSeconds: number = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining: number): string {\n  const mins = Math.floor(secondsRemaining / 60);\n  const seconds = Math.floor(secondsRemaining % 60);\n\n  return `${mins < 10 ? `0${mins}` : mins}:${\n    seconds < 10 ? `0${seconds}` : seconds\n  }`;\n}\n"]},"metadata":{},"sourceType":"module"}