{"ast":null,"code":"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { local_backend_url } from \"../url\";\n\nfunction useSearch(url, query) {\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  useEffect(() => {\n    setData([]);\n  }, [query]);\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    let CancelToken = axios.CancelToken;\n    let source = CancelToken.source();\n    source && axios({\n      method: \"GET\",\n      url: `${local_backend_url}${url}`,\n      params: {\n        query: query\n      },\n      cancelToken: new axios.CancelToken(c => cancel = c),\n      headers: {\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      console.log(\"adsfa\"); // setData(res.data)\n\n      console.log(res.data);\n      setLoading(false);\n      setError(false);\n    }).catch(error => {\n      if (axios.isCancel(error)) return;\n      setError(true);\n    });\n\n    () => {\n      cancel();\n    };\n  }, [query]);\n  return {\n    data,\n    loading,\n    error\n  };\n}\n\nexport default useSearch;","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/custom-hooks/useSearch.tsx"],"names":["axios","useEffect","useState","local_backend_url","useSearch","url","query","data","setData","loading","setLoading","error","setError","CancelToken","source","method","params","cancelToken","c","cancel","headers","Accept","then","res","console","log","catch","isCancel"],"mappings":"AACA,OAAOA,KAAP,MAA4D,OAA5D;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,iBAAT,QAAkC,QAAlC;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAgCC,KAAhC,EAA+C;AAC7C,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACO,OAAD;AAAA,OAAUC;AAAV,MAAwBR,QAAQ,CAAU,KAAV,CAAtC;AACA,QAAM;AAAA,OAACS,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAAU,KAAV,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAFQ,EAEN,CAACF,KAAD,CAFM,CAAT;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,QAAIC,WAA8B,GAAGb,KAAK,CAACa,WAA3C;AACA,QAAIC,MAAyB,GAAGD,WAAW,CAACC,MAAZ,EAAhC;AAEAA,IAAAA,MAAM,IAENd,KAAK,CAAC;AACJe,MAAAA,MAAM,EAAE,KADJ;AAEJV,MAAAA,GAAG,EAAG,GAAEF,iBAAkB,GAAEE,GAAI,EAF5B;AAGJW,MAAAA,MAAM,EAAE;AAAEV,QAAAA,KAAK,EAAEA;AAAT,OAHJ;AAIJW,MAAAA,WAAW,EAAE,IAAIjB,KAAK,CAACa,WAAV,CAAuBK,CAAD,IAAQC,MAAM,GAAGD,CAAvC,CAJT;AAKJE,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE;AADD;AALL,KAAD,CAAL,CASGC,IATH,CASSC,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EADa,CAEb;;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAAChB,IAAhB;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KAfH,EAgBGc,KAhBH,CAgBUf,KAAD,IAAW;AAChB,UAAIX,KAAK,CAAC2B,QAAN,CAAehB,KAAf,CAAJ,EAA2B;AAC3BC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAnBH,CAFA;;AAuBA,UAAM;AACJO,MAAAA,MAAM;AACP,KAFD;AAGD,GAjCQ,EAiCN,CAACb,KAAD,CAjCM,CAAT;AAmCA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACD;;AAED,eAAeP,SAAf","sourcesContent":["import { ControlPointSharp } from \"@material-ui/icons\";\nimport axios, { CancelTokenSource, CancelTokenStatic } from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { local_backend_url } from \"../url\";\n\nfunction useSearch(url: String, query: String) {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n\n  useEffect(() => {\n    setData([]);\n  }, [query]);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n\n    let CancelToken: CancelTokenStatic = axios.CancelToken;\n    let source: CancelTokenSource = CancelToken.source();\n\n    source &&\n\n    axios({\n      method: \"GET\",\n      url: `${local_backend_url}${url}`,\n      params: { query: query },\n      cancelToken: new axios.CancelToken((c) => (cancel = c)),\n      headers: {\n        Accept: \"application/json\",\n      },\n    })\n      .then((res) => {\n        console.log(\"adsfa\");\n        // setData(res.data)\n        console.log(res.data);\n        setLoading(false);\n        setError(false);\n      })\n      .catch((error) => {\n        if (axios.isCancel(error)) return;\n        setError(true);\n      });\n\n    () => {\n      cancel();\n    };\n  }, [query]);\n\n  return { data, loading, error };\n}\n\nexport default useSearch;\n"]},"metadata":{},"sourceType":"module"}