{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { cloneElement, useContext, useState } from \"react\";\nimport { AnswersContext } from \"../Question\";\n\nconst OptionContainer = props => {\n  const {\n    answers,\n    setAnswers,\n    getIsChecked\n  } = useContext(AnswersContext);\n  const {\n    0: isChecked,\n    1: setIsChecked\n  } = useState(getIsChecked(props.option.id));\n  useEffect(() => {\n    console.log(`${option.title}:${option.id} is ${getIsChecked(option.id) ? \"checked\" : \"unchecked\"}`);\n    setIsChecked(getIsChecked(option.id));\n  }, [answers]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/cloneElement(props.children, props)\n  }, void 0, false);\n};\n\nexport default OptionContainer;","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/Question/OptionContainer/OptionContainer.tsx"],"names":["cloneElement","useContext","useState","AnswersContext","OptionContainer","props","answers","setAnswers","getIsChecked","isChecked","setIsChecked","option","id","useEffect","console","log","title","children"],"mappings":";;AAAA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,cAAT,QAA+B,aAA/B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA;AAAvB,MAAwCP,UAAU,CAACE,cAAD,CAAxD;AAEA,QAAM;AAAA,OAACM,SAAD;AAAA,OAAYC;AAAZ,MAA4BR,QAAQ,CACxCM,YAAY,CAACH,KAAK,CAACM,MAAN,CAAaC,EAAd,CAD4B,CAA1C;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,OAAO,CAACC,GAAR,CACG,GAAEJ,MAAM,CAACK,KAAM,IAAGL,MAAM,CAACC,EAAG,OAC3BJ,YAAY,CAACG,MAAM,CAACC,EAAR,CAAZ,GAA0B,SAA1B,GAAsC,WACvC,EAHH;AAKAF,IAAAA,YAAY,CAACF,YAAY,CAACG,MAAM,CAACC,EAAR,CAAb,CAAZ;AACD,GAPQ,EAON,CAACN,OAAD,CAPM,CAAT;AASA,sBAAO;AAAA,2BAAGN,YAAY,CAACK,KAAK,CAACY,QAAP,EAAiBZ,KAAjB;AAAf,mBAAP;AACD,CAjBD;;AAmBA,eAAeD,eAAf","sourcesContent":["import { cloneElement, useContext, useState } from \"react\";\nimport { AnswersContext } from \"../Question\";\n\nconst OptionContainer = (props) => {\n  const { answers, setAnswers, getIsChecked } = useContext(AnswersContext);\n\n  const [isChecked, setIsChecked] = useState<boolean>(\n    getIsChecked(props.option.id)\n  );\n\n  useEffect(() => {\n    console.log(\n      `${option.title}:${option.id} is ${\n        getIsChecked(option.id) ? \"checked\" : \"unchecked\"\n      }`\n    );\n    setIsChecked(getIsChecked(option.id));\n  }, [answers]);\n\n  return <>{cloneElement(props.children, props)}</>;\n};\n\nexport default OptionContainer;\n"]},"metadata":{},"sourceType":"module"}