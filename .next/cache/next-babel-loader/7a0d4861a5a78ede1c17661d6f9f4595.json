{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/QuizTest.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext } from \"react\";\nimport useStartTest from \"./useStartTest\";\nimport { Box, CircularProgress, withStyles } from \"@material-ui/core\";\nimport PageTitle from \"../PageTitle/PageTitle\";\nimport Topbar from \"../Layout/Topbar/Topbar\";\nimport Timer from \"./Timer/Timer\";\nimport Questions from \"../Questions/Questions\";\nexport var QuizIDContext = /*#__PURE__*/createContext(null);\nexport var AnswersContext = /*#__PURE__*/createContext(null);\n\nvar QuizTest = function QuizTest(_ref) {\n  _s();\n\n  var _test$quiz;\n\n  var id = _ref.id;\n\n  var _useStartTest = useStartTest(id),\n      test = _useStartTest.test,\n      isLoading = _useStartTest.isLoading,\n      isError = _useStartTest.isError;\n\n  if (isError) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Sorry some error occured. Please refresh the page.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 23\n  }, _this);\n\n  var _useLocalState = useLocalState(\"user\", \"\"),\n      _useLocalState2 = _slicedToArray(_useLocalState, 1),\n      user = _useLocalState2[0];\n\n  var _useContext = useContext(QuizIDContext),\n      quizID = _useContext.quizID;\n\n  var _useLocalState3 = useLocalState(\"\".concat(user.email, \"-quiz\").concat(quizID, \"-answers\"), {}),\n      _useLocalState4 = _slicedToArray(_useLocalState3, 2),\n      answers = _useLocalState4[0],\n      setAnswersState = _useLocalState4[1];\n\n  var setAnswers = function setAnswers(optionID) {\n    setAnswersState(function (state) {\n      var tempAnswers = _objectSpread({}, state);\n\n      if (question.answer_type === \"multiple_choice\") {\n        var options = tempAnswers[\"\".concat(question.id)];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question.id), []));\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question.id), [optionID]));\n        }\n      } else if (question.answer_type === \"checkboxes\") {\n        var _options = tempAnswers[\"\".concat(question.id)];\n\n        if (_options && _options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question.id), _options.filter(function (option) {\n            return option != optionID;\n          })));\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question.id), [].concat(_toConsumableArray(_options), [optionID])));\n        }\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  console.log(test.quiz);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(PageTitle, {\n        title: isLoading ? \"Starting Test...\" : test.quiz.title,\n        children: isLoading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, _this), test && !isLoading && /*#__PURE__*/_jsxDEV(Timer, {\n        start_time: test.created_at,\n        duration: test === null || test === void 0 ? void 0 : (_test$quiz = test.quiz) === null || _test$quiz === void 0 ? void 0 : _test$quiz.duration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, _this), test && !isLoading && (test === null || test === void 0 ? void 0 : test.quiz.questions) && /*#__PURE__*/_jsxDEV(QuizIDContext.Provider, {\n        value: {\n          quizID: id\n        },\n        children: /*#__PURE__*/_jsxDEV(Questions, {\n          questions: test.quiz.questions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(QuizTest, \"Sl/Xp50S5Ez0NBS2VEe3p/uZd1w=\", true, function () {\n  return [useStartTest];\n});\n\n_c = QuizTest;\nexport default QuizTest;\nvar Container = withStyles({\n  root: {\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: \"#5D00A5\",\n    minHeight: \"100vh\",\n    color: \"white\"\n  }\n})(Box);\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizTest\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/QuizTest.tsx"],"names":["React","createContext","useStartTest","Box","CircularProgress","withStyles","PageTitle","Topbar","Timer","Questions","QuizIDContext","AnswersContext","QuizTest","id","test","isLoading","isError","useLocalState","user","useContext","quizID","email","answers","setAnswersState","setAnswers","optionID","state","tempAnswers","question","answer_type","options","includes","filter","option","console","log","quiz","title","created_at","duration","questions","Container","root","width","display","flexDirection","alignItems","backgroundColor","minHeight","color"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\nimport useStartTest from \"./useStartTest\";\nimport { Box, CircularProgress, withStyles } from \"@material-ui/core\";\nimport PageTitle from \"../PageTitle/PageTitle\";\nimport Topbar from \"../Layout/Topbar/Topbar\";\nimport Timer from \"./Timer/Timer\";\nimport Questions from \"../Questions/Questions\";\n\ninterface IProps {\n  id: number;\n}\n\nexport const QuizIDContext = createContext(null);\nexport const AnswersContext = createContext(null);\n\nconst QuizTest: React.FC<IProps> = ({ id }) => {\n  const { test, isLoading, isError } = useStartTest(id);\n\n  if (isError) return <p>Sorry some error occured. Please refresh the page.</p>;\n\n  const [user] = useLocalState(\"user\", \"\");\n  const { quizID } = useContext(QuizIDContext);\n\n  const [answers, setAnswersState] = useLocalState(\n    `${user.email}-quiz${quizID}-answers`,\n    {}\n  );\n\n  const setAnswers = (optionID: number) => {\n    setAnswersState((state: any) => {\n      let tempAnswers = { ...state };\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = { ...state, [`${question.id}`]: [] };\n        } else {\n          tempAnswers = { ...state, [`${question.id}`]: [optionID] };\n        }\n      } else if (question.answer_type === \"checkboxes\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = {\n            ...state,\n            [`${question.id}`]: options.filter(\n              (option: number) => option != optionID\n            ),\n          };\n        } else {\n          tempAnswers = {\n            ...state,\n            [`${question.id}`]: [...options, optionID],\n          };\n        }\n      }\n\n      return { ...tempAnswers };\n    });\n  };\n\n  console.log(test.quiz)\n\n  return (\n    <>\n      <Topbar />\n      <Container>\n        <PageTitle title={isLoading ? \"Starting Test...\" : test.quiz.title}>\n          {isLoading && <CircularProgress />}\n        </PageTitle>\n        {test && !isLoading && (\n          <Timer start_time={test.created_at} duration={test?.quiz?.duration} />\n        )}\n        {test && !isLoading && test?.quiz.questions && (\n          <QuizIDContext.Provider value={{ quizID: id }}>\n            <Questions questions={test.quiz.questions} />\n          </QuizIDContext.Provider>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default QuizTest;\n\nconst Container = withStyles({\n  root: {\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: \"#5D00A5\",\n    minHeight: \"100vh\",\n    color: \"white\",\n  },\n})(Box);\n"]},"metadata":{},"sourceType":"module"}