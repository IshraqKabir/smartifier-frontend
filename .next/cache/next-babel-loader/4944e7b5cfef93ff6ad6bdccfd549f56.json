{"ast":null,"code":"import { google } from \"googleapis\";\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  redirect: process.env.GOOGLE_REDIRECT_URL\n}; // generate a url that asks permissions for Blogger and Google Calendar scopes\n\nconst scopes = [\"https://www.googleapis.com/auth/blogger\", \"https://www.googleapis.com/auth/calendar\"];\n\nfunction getGoogleUrl() {\n  const oauth2Client = new google.auth.OAuth2(googleConfig.clientId, googleConfig.clientSecret, googleConfig.redirect);\n  const url = oauth2Client.generateAuthUrl({\n    // 'online' (default) or 'offline' (gets refresh_token)\n    access_type: \"offline\",\n    // If you only need one scope you can pass it as a string\n    scope: scopes\n  });\n  return url;\n}\n\nasync function getUserFromCode(code) {\n  const oauth2Client = new google.auth.OAuth2(googleConfig.clientId, googleConfig.clientSecret, googleConfig.redirect);\n  const {\n    tokens\n  } = await oauth2Client.getToken(code);\n  oauth2Client.setCredentials(tokens);\n  return oauth2Client;\n}\n\nexport default (async (req, res) => {\n  const {\n    get\n  } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = getGoogleUrl();\n    res.json({\n      url\n    });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const {\n        code\n      } = req.query; // const user = await getUserFromCode(code);\n\n      const user = {\n        name: \"ishraq\"\n      };\n      res.statusCode = 200;\n      res.json({\n        user\n      });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n}); // function createConnection() {\n//   return new google.auth.OAuth2(\n//     googleConfig.clientId,\n//     googleConfig.clientSecret,\n//     googleConfig.redirect\n//   );\n// }\n// function getConnectionUrl(auth: any) {\n//   return auth.generateAuthUrl({\n//     access_type: \"offline\",\n//     prompt: \"consent\",\n//     scope: scopes,\n//   });\n// }\n// function urlGoogle() {\n//   const auth = createConnection();\n//   const url = getConnectionUrl(auth);\n//   return url;\n// }","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/pages/api/auth/google.ts"],"names":["google","googleConfig","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","redirect","GOOGLE_REDIRECT_URL","scopes","getGoogleUrl","oauth2Client","auth","OAuth2","url","generateAuthUrl","access_type","scope","getUserFromCode","code","tokens","getToken","setCredentials","req","res","get","query","statusCode","json","user","name"],"mappings":"AAAA,SAASA,MAAT,QAAuB,YAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADH;AAEnBC,EAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFP;AAGnBC,EAAAA,QAAQ,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHH,CAArB,C,CAMA;;AACA,MAAMC,MAAM,GAAG,CACb,yCADa,EAEb,0CAFa,CAAf;;AAKA,SAASC,YAAT,GAAwB;AACtB,QAAMC,YAAY,GAAG,IAAIZ,MAAM,CAACa,IAAP,CAAYC,MAAhB,CACnBb,YAAY,CAACC,QADM,EAEnBD,YAAY,CAACK,YAFM,EAGnBL,YAAY,CAACO,QAHM,CAArB;AAMA,QAAMO,GAAG,GAAGH,YAAY,CAACI,eAAb,CAA6B;AACvC;AACAC,IAAAA,WAAW,EAAE,SAF0B;AAIvC;AACAC,IAAAA,KAAK,EAAER;AALgC,GAA7B,CAAZ;AAQA,SAAOK,GAAP;AACD;;AAED,eAAeI,eAAf,CAA+BC,IAA/B,EAAqC;AACnC,QAAMR,YAAY,GAAG,IAAIZ,MAAM,CAACa,IAAP,CAAYC,MAAhB,CACnBb,YAAY,CAACC,QADM,EAEnBD,YAAY,CAACK,YAFM,EAGnBL,YAAY,CAACO,QAHM,CAArB;AAMA,QAAM;AAAEa,IAAAA;AAAF,MAAa,MAAMT,YAAY,CAACU,QAAb,CAAsBF,IAAtB,CAAzB;AACAR,EAAAA,YAAY,CAACW,cAAb,CAA4BF,MAA5B;AAEA,SAAOT,YAAP;AACD;;AAED,gBAAe,OAAOY,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAUF,GAAG,CAACG,KAApB;;AAEA,MAAID,GAAG,KAAK,MAAZ,EAAoB;AAClBD,IAAAA,GAAG,CAACG,UAAJ,GAAiB,GAAjB;AACA,UAAMb,GAAG,GAAGJ,YAAY,EAAxB;AACAc,IAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEd,MAAAA;AAAF,KAAT;AACD,GAJD,MAIO,IAAIW,GAAG,KAAK,MAAZ,EAAoB;AACzB,QAAI,CAACF,GAAG,CAACG,KAAJ,CAAUP,IAAf,EAAqB;AACnBK,MAAAA,GAAG,CAACG,UAAJ,GAAiB,GAAjB;AACD,KAFD,MAEO;AACL,YAAM;AAAER,QAAAA;AAAF,UAAWI,GAAG,CAACG,KAArB,CADK,CAGL;;AACA,YAAMG,IAAI,GAAG;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAb;AAEAN,MAAAA,GAAG,CAACG,UAAJ,GAAiB,GAAjB;AACAH,MAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEC,QAAAA;AAAF,OAAT;AACD;AACF,GAZM,MAYA;AACLL,IAAAA,GAAG,CAACG,UAAJ,GAAiB,GAAjB;AACD;AACF,CAtBD,E,CAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA","sourcesContent":["import { google } from \"googleapis\";\n\nconst googleConfig = {\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  redirect: process.env.GOOGLE_REDIRECT_URL,\n};\n\n// generate a url that asks permissions for Blogger and Google Calendar scopes\nconst scopes = [\n  \"https://www.googleapis.com/auth/blogger\",\n  \"https://www.googleapis.com/auth/calendar\",\n];\n\nfunction getGoogleUrl() {\n  const oauth2Client = new google.auth.OAuth2(\n    googleConfig.clientId,\n    googleConfig.clientSecret,\n    googleConfig.redirect\n  );\n\n  const url = oauth2Client.generateAuthUrl({\n    // 'online' (default) or 'offline' (gets refresh_token)\n    access_type: \"offline\",\n\n    // If you only need one scope you can pass it as a string\n    scope: scopes,\n  });\n\n  return url;\n}\n\nasync function getUserFromCode(code) {\n  const oauth2Client = new google.auth.OAuth2(\n    googleConfig.clientId,\n    googleConfig.clientSecret,\n    googleConfig.redirect\n  );\n\n  const { tokens } = await oauth2Client.getToken(code);\n  oauth2Client.setCredentials(tokens);\n\n  return oauth2Client;\n}\n\nexport default async (req, res) => {\n  const { get } = req.query;\n\n  if (get === \"link\") {\n    res.statusCode = 200;\n    const url = getGoogleUrl();\n    res.json({ url });\n  } else if (get === \"user\") {\n    if (!req.query.code) {\n      res.statusCode = 500;\n    } else {\n      const { code } = req.query;\n\n      // const user = await getUserFromCode(code);\n      const user = { name: \"ishraq\" };\n\n      res.statusCode = 200;\n      res.json({ user });\n    }\n  } else {\n    res.statusCode = 500;\n  }\n};\n\n// function createConnection() {\n//   return new google.auth.OAuth2(\n//     googleConfig.clientId,\n//     googleConfig.clientSecret,\n//     googleConfig.redirect\n//   );\n// }\n\n// function getConnectionUrl(auth: any) {\n//   return auth.generateAuthUrl({\n//     access_type: \"offline\",\n//     prompt: \"consent\",\n//     scope: scopes,\n//   });\n// }\n\n// function urlGoogle() {\n//   const auth = createConnection();\n//   const url = getConnectionUrl(auth);\n\n//   return url;\n// }\n"]},"metadata":{},"sourceType":"module"}