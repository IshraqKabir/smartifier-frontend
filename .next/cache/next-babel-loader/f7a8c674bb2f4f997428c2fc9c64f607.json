{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Box, withStyles } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport useLocalState from \"../../../custom-hooks/useLocalState\";\nimport { local_backend_url } from \"../../../url\";\nimport Topbar from \"../../Layout/Topbar/Topbar\";\nimport QuizTest from \"../QuizTest\";\nimport RetakePrompt from \"./RetakePrompt/RetakePrompt\";\n\nconst CheckTestStatus = ({\n  quizID\n}) => {\n  const {\n    0: status,\n    1: setStatus\n  } = useState(\"unknown\");\n  const {\n    0: percentage,\n    1: setPercentage\n  } = useState(0);\n  const {\n    0: quiz,\n    1: setQuiz\n  } = useState(null);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const [user] = useLocalState(\"user\", \"\");\n  const {\n    0: showTest,\n    1: setShowTest\n  } = useState(false);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    containerRef.current.scrollIntoView({\n      behaviour: \"smooth\"\n    });\n  }, []);\n  useEffect(() => {\n    axios.get(`${local_backend_url}/api/quiz-test/${quizID}/check-status`, {\n      headers: {\n        Accept: \"Application/json\",\n        Authorization: `Bearer ${user.token}`\n      }\n    }).then(response => {\n      setStatus(response.data.status);\n\n      if (response.data.status == \"retake\") {\n        setPercentage(response.data.percentage);\n        setQuiz(response.data.quiz);\n      } else if (response.data.status == \"ongoing\") {\n        setStatus(\"ongoing\");\n        setShowTest(true);\n      } else if (response.data.status == \"new_test\") {\n        setStatus(\"new_test\");\n        setShowTest(true);\n      }\n\n      setIsLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Topbar, {}), /*#__PURE__*/_jsx(\"div\", {\n      ref: containerRef\n    }), /*#__PURE__*/_jsxs(Container, {\n      children: [status == \"unknown\" && !isLoading && /*#__PURE__*/_jsx(\"p\", {\n        children: \"Some Error Occured. Please Refresh or Go Back.\"\n      }), status == \"retake\" && !isLoading && !showTest && /*#__PURE__*/_jsx(RetakePrompt, {\n        quizID: quizID,\n        percentage: percentage,\n        quiz: quiz,\n        setShowTest: () => setShowTest(true)\n      }), showTest && !isLoading && /*#__PURE__*/_jsx(QuizTest, {\n        id: quizID,\n        status: status\n      })]\n    })]\n  });\n};\n\nexport default CheckTestStatus;\nconst Container = withStyles({\n  root: {\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: \"#5D00A5\",\n    minHeight: \"100vh\",\n    color: \"white\"\n  }\n})(Box);","map":null,"metadata":{},"sourceType":"module"}