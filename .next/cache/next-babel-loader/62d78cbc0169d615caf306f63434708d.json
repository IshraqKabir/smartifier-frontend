{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nimport useLocalState from \"../../../custom-hooks/useLocalState\";\nexport default function useTestState(quizId, questions) {\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswersState] = useLocalState(`${user === null || user === void 0 ? void 0 : user.email}-quiz${quizId}-answers`, {});\n  const {\n    0: currentQuestionIndex,\n    1: setCurrentQuestionIndex\n  } = useState(0);\n\n  const setAnswers = (optionID, question) => {\n    setAnswersState(state => {\n      let tempAnswers = _objectSpread({}, state);\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question === null || question === void 0 ? void 0 : question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question === null || question === void 0 ? void 0 : question.id}`]: []\n          });\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question === null || question === void 0 ? void 0 : question.id}`]: [optionID]\n          });\n        }\n      } else if ((question === null || question === void 0 ? void 0 : question.answer_type) === \"checkboxes\") {\n        const options = tempAnswers[`${question === null || question === void 0 ? void 0 : question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question === null || question === void 0 ? void 0 : question.id}`]: options.filter(option => option != optionID)\n          });\n        } else if (options && !options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question === null || question === void 0 ? void 0 : question.id}`]: [...options, optionID]\n          });\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question === null || question === void 0 ? void 0 : question.id}`]: [optionID]\n          });\n        }\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  const goToNextQuestion = () => {\n    if (currentQuestionIndex >= (questions === null || questions === void 0 ? void 0 : questions.length) - 1) return;\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n  };\n\n  const goToPreviousQuestion = () => {\n    if (currentQuestionIndex <= 0) return;\n    setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n\n  const showPrevious = currentQuestionIndex != 0;\n  const showNext = currentQuestionIndex < (questions === null || questions === void 0 ? void 0 : questions.length);\n  return {\n    answers,\n    currentQuestionIndex,\n    goToNextQuestion,\n    goToPreviousQuestion,\n    showPrevious,\n    showNext\n  };\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/useTestState.tsx"],"names":["useState","useLocalState","useTestState","quizId","questions","user","answers","setAnswersState","email","currentQuestionIndex","setCurrentQuestionIndex","setAnswers","optionID","question","state","tempAnswers","answer_type","options","id","includes","filter","option","goToNextQuestion","length","goToPreviousQuestion","showPrevious","showNext"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAGA,eAAe,SAASC,YAAT,CAAsBC,MAAtB,EAAsCC,SAAtC,EAA8D;AAC3E,QAAM,CAACC,IAAD,IAASJ,aAAa,CAAC,MAAD,EAAS,EAAT,CAA5B;AACA,QAAM,CAACK,OAAD,EAAUC,eAAV,IAA6BN,aAAa,CAC7C,GAAEI,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEG,KAAM,QAAOL,MAAO,UADiB,EAE9C,EAF8C,CAAhD;AAKA,QAAM;AAAA,OAACM,oBAAD;AAAA,OAAuBC;AAAvB,MAAkDV,QAAQ,CAAS,CAAT,CAAhE;;AAEA,QAAMW,UAAU,GAAG,CAACC,QAAD,EAAmBC,QAAnB,KAA2C;AAC5DN,IAAAA,eAAe,CAAEO,KAAD,IAAgB;AAC9B,UAAIC,WAAW,qBAAQD,KAAR,CAAf;;AAEA,UAAID,QAAQ,CAACG,WAAT,KAAyB,iBAA7B,EAAgD;AAC9C,cAAMC,OAAO,GAAGF,WAAW,CAAE,GAAEF,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEK,EAAG,EAAjB,CAA3B;;AAEA,YAAID,OAAO,IAAIA,OAAO,CAACE,QAAR,CAAiBP,QAAjB,CAAf,EAA2C;AACzCG,UAAAA,WAAW,mCAAQD,KAAR;AAAe,aAAE,GAAED,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEK,EAAG,EAAjB,GAAqB;AAApC,YAAX;AACD,SAFD,MAEO;AACLH,UAAAA,WAAW,mCAAQD,KAAR;AAAe,aAAE,GAAED,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEK,EAAG,EAAjB,GAAqB,CAACN,QAAD;AAApC,YAAX;AACD;AACF,OARD,MAQO,IAAI,CAAAC,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,WAAV,MAA0B,YAA9B,EAA4C;AACjD,cAAMC,OAAO,GAAGF,WAAW,CAAE,GAAEF,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEK,EAAG,EAAjB,CAA3B;;AAEA,YAAID,OAAO,IAAIA,OAAO,CAACE,QAAR,CAAiBP,QAAjB,CAAf,EAA2C;AACzCG,UAAAA,WAAW,mCACND,KADM;AAET,aAAE,GAAED,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEK,EAAG,EAAjB,GAAqBD,OAAO,CAACG,MAAR,CAClBC,MAAD,IAAoBA,MAAM,IAAIT,QADX;AAFZ,YAAX;AAMD,SAPD,MAOO,IAAIK,OAAO,IAAI,CAACA,OAAO,CAACE,QAAR,CAAiBP,QAAjB,CAAhB,EAA4C;AACjDG,UAAAA,WAAW,mCACND,KADM;AAET,aAAE,GAAED,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEK,EAAG,EAAjB,GAAqB,CAAC,GAAGD,OAAJ,EAAaL,QAAb;AAFZ,YAAX;AAID,SALM,MAKA;AACLG,UAAAA,WAAW,mCACND,KADM;AAET,aAAE,GAAED,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEK,EAAG,EAAjB,GAAqB,CAACN,QAAD;AAFZ,YAAX;AAID;AACF;;AAED,+BAAYG,WAAZ;AACD,KAnCc,CAAf;AAoCD,GArCD;;AAuCA,QAAMO,gBAAgB,GAAG,MAAM;AAC7B,QAAIb,oBAAoB,IAAI,CAAAL,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEmB,MAAX,IAAoB,CAAhD,EAAmD;AACnDb,IAAAA,uBAAuB,CAACD,oBAAoB,GAAG,CAAxB,CAAvB;AACD,GAHD;;AAKA,QAAMe,oBAAoB,GAAG,MAAM;AACjC,QAAIf,oBAAoB,IAAI,CAA5B,EAA+B;AAC/BC,IAAAA,uBAAuB,CAACD,oBAAoB,GAAG,CAAxB,CAAvB;AACD,GAHD;;AAKA,QAAMgB,YAAqB,GAAGhB,oBAAoB,IAAI,CAAtD;AACA,QAAMiB,QAAiB,GAAGjB,oBAAoB,IAAGL,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEmB,MAAd,CAA9C;AAEA,SAAO;AACLjB,IAAAA,OADK;AAELG,IAAAA,oBAFK;AAGLa,IAAAA,gBAHK;AAILE,IAAAA,oBAJK;AAKLC,IAAAA,YALK;AAMLC,IAAAA;AANK,GAAP;AAQD","sourcesContent":["import { useState } from \"react\";\nimport useLocalState from \"../../../custom-hooks/useLocalState\";\nimport IQuestion from \"../../../Models/IQuestion\";\n\nexport default function useTestState(quizId: number, questions: IQuestion[]) {\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswersState] = useLocalState(\n    `${user?.email}-quiz${quizId}-answers`,\n    {}\n  );\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<number>(0);\n\n  const setAnswers = (optionID: number, question: IQuestion) => {\n    setAnswersState((state: any) => {\n      let tempAnswers = { ...state };\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question?.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = { ...state, [`${question?.id}`]: [] };\n        } else {\n          tempAnswers = { ...state, [`${question?.id}`]: [optionID] };\n        }\n      } else if (question?.answer_type === \"checkboxes\") {\n        const options = tempAnswers[`${question?.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = {\n            ...state,\n            [`${question?.id}`]: options.filter(\n              (option: number) => option != optionID\n            ),\n          };\n        } else if (options && !options.includes(optionID)) {\n          tempAnswers = {\n            ...state,\n            [`${question?.id}`]: [...options, optionID],\n          };\n        } else {\n          tempAnswers = {\n            ...state,\n            [`${question?.id}`]: [optionID],\n          };\n        }\n      }\n\n      return { ...tempAnswers };\n    });\n  };\n\n  const goToNextQuestion = () => {\n    if (currentQuestionIndex >= questions?.length - 1) return;\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n  };\n\n  const goToPreviousQuestion = () => {\n    if (currentQuestionIndex <= 0) return;\n    setCurrentQuestionIndex(currentQuestionIndex - 1);\n  };\n\n  const showPrevious: boolean = currentQuestionIndex != 0;\n  const showNext: boolean = currentQuestionIndex < questions?.length;\n\n  return {\n    answers,\n    currentQuestionIndex,\n    goToNextQuestion,\n    goToPreviousQuestion,\n    showPrevious,\n    showNext,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}