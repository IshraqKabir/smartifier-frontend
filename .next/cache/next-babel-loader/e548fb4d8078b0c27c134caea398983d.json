{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport getResultInfo from \"../../repository/QuizTestResult/getResultInfo\";\nexport default function useQuizTestResult(testId) {\n  const [user] = useLocalState(\"user\", \"\");\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  useEffect(() => {\n    setIsLoading(true); // fetchResultInfo();\n  }, []);\n\n  async function fetchResultInfo() {\n    if (!user) return;\n    const response = await getResultInfo(testId, user === null || user === void 0 ? void 0 : user.token);\n    console.log(response);\n  }\n\n  return {\n    isLoading\n  };\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTestResult/useQuizTestResult.tsx"],"names":["useEffect","useState","useLocalState","getResultInfo","useQuizTestResult","testId","user","isLoading","setIsLoading","fetchResultInfo","response","token","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,aAAP,MAA0B,+CAA1B;AAEA,eAAe,SAASC,iBAAT,CAA2BC,MAA3B,EAA2C;AACxD,QAAM,CAACC,IAAD,IAASJ,aAAa,CAAC,MAAD,EAAS,EAAT,CAA5B;AACA,QAAM;AAAA,OAACK,SAAD;AAAA,OAAYC;AAAZ,MAA4BP,QAAQ,CAAU,KAAV,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADc,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,iBAAeC,eAAf,GAAiC;AAC/B,QAAI,CAACH,IAAL,EAAW;AACX,UAAMI,QAAQ,GAAG,MAAMP,aAAa,CAACE,MAAD,EAASC,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEK,KAAf,CAApC;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD;;AAED,SAAO;AAAEH,IAAAA;AAAF,GAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport getResultInfo from \"../../repository/QuizTestResult/getResultInfo\";\n\nexport default function useQuizTestResult(testId: number) {\n  const [user] = useLocalState(\"user\", \"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    // fetchResultInfo();\n  }, []);\n\n  async function fetchResultInfo() {\n    if (!user) return;\n    const response = await getResultInfo(testId, user?.token);\n\n    console.log(response);\n  }\n\n  return { isLoading };\n}\n"]},"metadata":{},"sourceType":"module"}