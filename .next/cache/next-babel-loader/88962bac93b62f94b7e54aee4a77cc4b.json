{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocalState from \"../../../../../../custom-hooks/useLocalState\";\nimport getQuizInfo from \"../../../../../../repository/QuizInfo/getQuizInfo\";\nexport default function useQuizInfo(quizId) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: testStatus,\n    1: setTestStatus\n  } = useState(\"unknown\");\n  const {\n    0: quizInfo,\n    1: setQuizInfo\n  } = useState({});\n  const [userInfo, setUserInfo] = useState < IUser({});\n  const [user] = useLocalState(\"user\", \"\");\n  useEffect(() => {\n    fetchQuizInfo();\n  }, []);\n\n  const fetchQuizInfo = async () => {\n    setIsLoading(true);\n    const response = await getQuizInfo(quizId, user === null || user === void 0 ? void 0 : user.token);\n    setIsLoading(false);\n\n    const _testStatus = response === null || response === void 0 ? void 0 : response.test_status;\n\n    if (_testStatus !== \"new_test\" || _testStatus !== \"retake\" || _testStatus !== \"highest_attempt_count_reached\" || _testStatus !== \"ongoing\") {\n      setTestStatus(\"unknown\");\n      return;\n    }\n\n    setTestStatus(response === null || response === void 0 ? void 0 : response.test_status);\n    setQuizInfo(response === null || response === void 0 ? void 0 : response.quiz_info);\n    setUserInfo(response === null || response === void 0 ? void 0 : response.user_info);\n    console.log(response);\n  };\n\n  return {\n    testStatus,\n    quizInfo,\n    userInfo,\n    isLoading\n  };\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/Quizzes/Quiz/TakeQuizButton/QuizInfoModal/QuizInfo/useQuizInfo.ts"],"names":["useEffect","useState","useLocalState","getQuizInfo","useQuizInfo","quizId","isLoading","setIsLoading","testStatus","setTestStatus","quizInfo","setQuizInfo","userInfo","setUserInfo","IUser","user","fetchQuizInfo","response","token","_testStatus","test_status","quiz_info","user_info","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AAEA,OAAOC,WAAP,MAAwB,mDAAxB;AAEA,eAAe,SAASC,WAAT,CAAqBC,MAArB,EAAqC;AAClD,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM;AAAA,OAACO,UAAD;AAAA,OAAaC;AAAb,MAA8BR,QAAQ,CAM1C,SAN0C,CAA5C;AAOA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAa,EAAb,CAAxC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,GAACa,KAAK,CAAC,EAAD,CAA9C;AACA,QAAM,CAACC,IAAD,IAASb,aAAa,CAAC,MAAD,EAAS,EAAT,CAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,aAAa,GAAG,YAAY;AAChCT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMU,QAAQ,GAAG,MAAMd,WAAW,CAACE,MAAD,EAASU,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEG,KAAf,CAAlC;AACAX,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AAEA,UAAMY,WAAW,GAAGF,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEG,WAA9B;;AAEA,QACED,WAAW,KAAK,UAAhB,IACAA,WAAW,KAAK,QADhB,IAEAA,WAAW,KAAK,+BAFhB,IAGAA,WAAW,KAAK,SAJlB,EAKE;AACAV,MAAAA,aAAa,CAAC,SAAD,CAAb;AACA;AACD;;AAEDA,IAAAA,aAAa,CAACQ,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEG,WAAX,CAAb;AACAT,IAAAA,WAAW,CAACM,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEI,SAAX,CAAX;AACAR,IAAAA,WAAW,CAACI,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEK,SAAX,CAAX;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACD,GAtBD;;AAwBA,SAAO;AACLT,IAAAA,UADK;AAELE,IAAAA,QAFK;AAGLE,IAAAA,QAHK;AAILN,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useLocalState from \"../../../../../../custom-hooks/useLocalState\";\nimport IQuiz from \"../../../../../../Models/IQuiz\";\nimport getQuizInfo from \"../../../../../../repository/QuizInfo/getQuizInfo\";\n\nexport default function useQuizInfo(quizId: number) {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [testStatus, setTestStatus] = useState<\n    | \"unknown\"\n    | \"new_test\"\n    | \"retake\"\n    | \"highest_attempt_count_reached\"\n    | \"ongoing\"\n  >(\"unknown\");\n  const [quizInfo, setQuizInfo] = useState<IQuiz | {}>({});\n  const [userInfo, setUserInfo] = useState<IUser({});\n  const [user] = useLocalState(\"user\", \"\");\n\n  useEffect(() => {\n    fetchQuizInfo();\n  }, []);\n\n  const fetchQuizInfo = async () => {\n    setIsLoading(true);\n    const response = await getQuizInfo(quizId, user?.token);\n    setIsLoading(false);\n\n    const _testStatus = response?.test_status;\n\n    if (\n      _testStatus !== \"new_test\" ||\n      _testStatus !== \"retake\" ||\n      _testStatus !== \"highest_attempt_count_reached\" ||\n      _testStatus !== \"ongoing\"\n    ) {\n      setTestStatus(\"unknown\");\n      return;\n    }\n\n    setTestStatus(response?.test_status);\n    setQuizInfo(response?.quiz_info);\n    setUserInfo(response?.user_info);\n\n    console.log(response);\n  };\n\n  return {\n    testStatus,\n    quizInfo,\n    userInfo,\n    isLoading,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}