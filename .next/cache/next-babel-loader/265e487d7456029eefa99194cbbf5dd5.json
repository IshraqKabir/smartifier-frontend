{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Box, makeStyles, Typography, withStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\n\nvar Timer = function Timer(_ref) {\n  var start_time = _ref.start_time,\n      duration = _ref.duration,\n      secondsRemaining = _ref.secondsRemaining,\n      setSecondsRemaining = _ref.setSecondsRemaining;\n\n  var _useState = useState(\"\"),\n      timeRemaining = _useState[0],\n      setTimeRemaing = _useState[1];\n\n  var _useState2 = useState(getPercentage(start_time, duration)),\n      percentage = _useState2[0],\n      setPercentage = _useState2[1];\n\n  var classes = useStyles({\n    percentage: percentage,\n    secondsRemaining: secondsRemaining\n  });\n  useEffect(function () {\n    setInterval(function () {\n      setSecondsRemaining(getTimeRemainingInSeconds(start_time, duration));\n    }, 500);\n  }, []);\n  useEffect(function () {\n    if (secondsRemaining <= 0) {\n      setTimeRemaing(\"Test Finished\");\n    } else {\n      setPercentage(getPercentage(start_time, duration));\n      setTimeRemaing(parseSecondsToClock(secondsRemaining));\n    }\n  }, [secondsRemaining]);\n  return /*#__PURE__*/_jsx(Container, {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: classes.loader,\n      children: /*#__PURE__*/_jsx(Time, {\n        variant: \"h6\",\n        children: \"\".concat(timeRemaining)\n      })\n    })\n  });\n};\n\nexport default Timer;\nvar Container = withStyles({\n  root: _defineProperty({\n    position: \"fixed\",\n    top: 100,\n    zIndex: 4000,\n    left: 0,\n    textAlign: \"center\",\n    right: 0,\n    backgroundColor: \"transparent\",\n    fontWeight: \"bold\"\n  }, \"@media (max-width: 700px)\", {\n    top: 135\n  })\n})(Box);\nvar MINUTE_LEFT_FOR_WARNING = 1;\nvar useStyles = makeStyles({\n  loader: {\n    display: \"relative\",\n    backgroundColor: function backgroundColor(props) {\n      var secondsRemaining = props.secondsRemaining;\n\n      if (secondsRemaining <= MINUTE_LEFT_FOR_WARNING * 60) {\n        return \"#cc3300\";\n      }\n\n      return \"#209434\";\n    },\n    opacity: 1,\n    width: function width(props) {\n      var percentage = props.percentage;\n      return \"\".concat(percentage, \"%\");\n    }\n  }\n});\nvar Time = withStyles({\n  root: {\n    color: \"white\",\n    opacity: 1\n  }\n})(Typography);\nexport function getTimeRemainingInSeconds(start_time, duration) {\n  var totalDurationInSeconds = getSecondsFromDuration(duration);\n  var start = new Date(\"\".concat(start_time));\n  var now = new Date();\n  var end = new Date(\"\".concat(start_time));\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  var secondsLeft = (end.getTime() - now.getTime()) / 1000;\n  return Math.floor(secondsLeft);\n}\n\nfunction getSecondsFromDuration(duration) {\n  var _duration$split = duration.split(\":\"),\n      _duration$split2 = _slicedToArray(_duration$split, 3),\n      hours = _duration$split2[0],\n      mins = _duration$split2[1],\n      seconds = _duration$split2[2];\n\n  var totalSeconds = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60;\n  totalSeconds += parseInt(seconds);\n  return totalSeconds;\n}\n\nfunction parseSecondsToClock(secondsRemaining) {\n  var mins = Math.floor(secondsRemaining / 60);\n  var seconds = Math.floor(secondsRemaining % 60);\n  return \"\".concat(mins < 10 ? \"0\".concat(mins) : mins, \":\").concat(seconds < 10 ? \"0\".concat(seconds) : seconds);\n}\n\nfunction getPercentage(start_time, duration) {\n  var totalDurationInSeconds = getSecondsFromDuration(duration);\n  var start = new Date(\"\".concat(start_time));\n  var now = new Date();\n  var end = new Date(\"\".concat(start_time));\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  var percentage = (now.getTime() - start.getTime()) / (totalDurationInSeconds * 10);\n  return percentage + 1;\n}","map":null,"metadata":{},"sourceType":"module"}