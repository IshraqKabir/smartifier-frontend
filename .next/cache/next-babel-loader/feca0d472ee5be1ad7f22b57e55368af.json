{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/Question/Question.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, withStyles } from \"@material-ui/core\";\nimport React, { createContext, useContext } from \"react\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport { QuizIDContext } from \"../QuizTest/QuizTest\";\nimport Style1 from \"./Style1/Style1\";\nimport Style2 from \"./Style2/Style2\";\nimport Style3 from \"./Style3/Style3\";\nexport const AnswersContext = /*#__PURE__*/createContext(null);\n\nconst Question = ({\n  question,\n  position\n}) => {\n  const [user] = useLocalState(\"user\", \"\");\n  const {\n    quizID\n  } = useContext(QuizIDContext);\n  const [answers, setAnswersState] = useLocalState(`${user.email}-quiz${quizID}-answers`, {});\n\n  const setAnswers = optionID => {\n    setAnswersState(state => {\n      let tempAnswers = _objectSpread({}, state);\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: []\n          });\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: [optionID]\n          });\n        }\n      } else if (question.answer_type === \"checkboxes\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: tempA\n          });\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, {\n            [`${question.id}`]: [optionID]\n          });\n        }\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  function getIsChecked(optionID) {\n    if (answers[question.id] && answers[question.id].includes(optionID)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  let style = null;\n\n  switch (question.style) {\n    case 1:\n      style = /*#__PURE__*/_jsxDEV(Style1, {\n        question: question,\n        position: position\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }, this);\n      break;\n\n    case 2:\n      style = /*#__PURE__*/_jsxDEV(Style2, {\n        question: question,\n        position: position\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }, this);\n      break;\n\n    case 3:\n      style = /*#__PURE__*/_jsxDEV(Style3, {\n        question: question,\n        position: position\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this);\n      break;\n\n    default:\n      style = /*#__PURE__*/_jsxDEV(Style1, {\n        question: question,\n        position: position\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }, this);\n      break;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AnswersContext.Provider, {\n      value: {\n        answers,\n        setAnswers,\n        getIsChecked\n      },\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: style\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport default Question;\nconst Container = withStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"2rem 5rem\",\n    background: \"transparent linear-gradient(180deg, #966BC2 0%, #437BBE6E 100%) 0% 0% no-repeat padding-box\",\n    borderRadius: 20,\n    minHeight: 150,\n    marginBottom: \"2rem\",\n    width: \"80%\",\n    [\"@media (max-width: 1000px)\"]: {\n      width: \"90%\",\n      padding: \"2rem 3rem\"\n    },\n    [\"@media (max-width: 800px)\"]: {\n      width: \"100%\",\n      padding: \"2rem 1rem\"\n    }\n  }\n})(Box);","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/Question/Question.tsx"],"names":["Box","withStyles","React","createContext","useContext","useLocalState","QuizIDContext","Style1","Style2","Style3","AnswersContext","Question","question","position","user","quizID","answers","setAnswersState","email","setAnswers","optionID","state","tempAnswers","answer_type","options","id","includes","tempA","getIsChecked","style","Container","root","display","flexDirection","padding","background","borderRadius","minHeight","marginBottom","width"],"mappings":";;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,mBAAhC;AACA,OAAOC,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAA4D,OAA5D;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AAEA,SAASC,aAAT,QAA8B,sBAA9B;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAOA,OAAO,MAAMC,cAAc,gBAAGP,aAAa,CAAC,IAAD,CAApC;;AAEP,MAAMQ,QAA0B,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA4B;AAC7D,QAAM,CAACC,IAAD,IAAST,aAAa,CAAC,MAAD,EAAS,EAAT,CAA5B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAaX,UAAU,CAACE,aAAD,CAA7B;AAEA,QAAM,CAACU,OAAD,EAAUC,eAAV,IAA6BZ,aAAa,CAC7C,GAAES,IAAI,CAACI,KAAM,QAAOH,MAAO,UADkB,EAE9C,EAF8C,CAAhD;;AAKA,QAAMI,UAAU,GAAIC,QAAD,IAAsB;AACvCH,IAAAA,eAAe,CAAEI,KAAD,IAAgB;AAC9B,UAAIC,WAAW,qBAAQD,KAAR,CAAf;;AAEA,UAAIT,QAAQ,CAACW,WAAT,KAAyB,iBAA7B,EAAgD;AAC9C,cAAMC,OAAO,GAAGF,WAAW,CAAE,GAAEV,QAAQ,CAACa,EAAG,EAAhB,CAA3B;;AAEA,YAAID,OAAO,IAAIA,OAAO,CAACE,QAAR,CAAiBN,QAAjB,CAAf,EAA2C;AACzCE,UAAAA,WAAW,mCAAQD,KAAR;AAAe,aAAE,GAAET,QAAQ,CAACa,EAAG,EAAhB,GAAoB;AAAnC,YAAX;AACD,SAFD,MAEO;AACLH,UAAAA,WAAW,mCAAQD,KAAR;AAAe,aAAE,GAAET,QAAQ,CAACa,EAAG,EAAhB,GAAoB,CAACL,QAAD;AAAnC,YAAX;AACD;AACF,OARD,MAQO,IAAIR,QAAQ,CAACW,WAAT,KAAyB,YAA7B,EAA2C;AAChD,cAAMC,OAAO,GAAGF,WAAW,CAAE,GAAEV,QAAQ,CAACa,EAAG,EAAhB,CAA3B;;AAEA,YAAID,OAAO,IAAIA,OAAO,CAACE,QAAR,CAAiBN,QAAjB,CAAf,EAA2C;AACzCE,UAAAA,WAAW,mCAAQD,KAAR;AAAe,aAAE,GAAET,QAAQ,CAACa,EAAG,EAAhB,GAAoBE;AAAnC,YAAX;AACD,SAFD,MAEO;AACLL,UAAAA,WAAW,mCAAQD,KAAR;AAAe,aAAE,GAAET,QAAQ,CAACa,EAAG,EAAhB,GAAoB,CAACL,QAAD;AAAnC,YAAX;AACD;AACF;;AAED,+BAAYE,WAAZ;AACD,KAtBc,CAAf;AAuBD,GAxBD;;AA0BA,WAASM,YAAT,CAAsBR,QAAtB,EAAiD;AAC/C,QAAIJ,OAAO,CAACJ,QAAQ,CAACa,EAAV,CAAP,IAAwBT,OAAO,CAACJ,QAAQ,CAACa,EAAV,CAAP,CAAqBC,QAArB,CAA8BN,QAA9B,CAA5B,EAAqE;AACnE,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED,MAAIS,KAAK,GAAG,IAAZ;;AACA,UAAQjB,QAAQ,CAACiB,KAAjB;AACE,SAAK,CAAL;AACEA,MAAAA,KAAK,gBAAG,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEjB,QAAlB;AAA4B,QAAA,QAAQ,EAAEC;AAAtC;AAAA;AAAA;AAAA;AAAA,cAAR;AACA;;AACF,SAAK,CAAL;AACEgB,MAAAA,KAAK,gBAAG,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEjB,QAAlB;AAA4B,QAAA,QAAQ,EAAEC;AAAtC;AAAA;AAAA;AAAA;AAAA,cAAR;AACA;;AACF,SAAK,CAAL;AACEgB,MAAAA,KAAK,gBAAG,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEjB,QAAlB;AAA4B,QAAA,QAAQ,EAAEC;AAAtC;AAAA;AAAA;AAAA;AAAA,cAAR;AACA;;AACF;AACEgB,MAAAA,KAAK,gBAAG,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEjB,QAAlB;AAA4B,QAAA,QAAQ,EAAEC;AAAtC;AAAA;AAAA;AAAA;AAAA,cAAR;AACA;AAZJ;;AAeA,sBACE;AAAA,2BACE,QAAC,cAAD,CAAgB,QAAhB;AACE,MAAA,KAAK,EAAE;AACLG,QAAAA,OADK;AAELG,QAAAA,UAFK;AAGLS,QAAAA;AAHK,OADT;AAAA,6BAOE,QAAC,SAAD;AAAA,kBAAYC;AAAZ;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAaD,CAxED;;AA0EA,eAAelB,QAAf;AAEA,MAAMmB,SAAS,GAAG7B,UAAU,CAAC;AAC3B8B,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,aAAa,EAAE,QAFX;AAGJC,IAAAA,OAAO,EAAE,WAHL;AAIJC,IAAAA,UAAU,EACR,6FALE;AAMJC,IAAAA,YAAY,EAAE,EANV;AAOJC,IAAAA,SAAS,EAAE,GAPP;AAQJC,IAAAA,YAAY,EAAE,MARV;AASJC,IAAAA,KAAK,EAAE,KATH;AAUJ,KAAC,4BAAD,GAAgC;AAC9BA,MAAAA,KAAK,EAAE,KADuB;AAE9BL,MAAAA,OAAO,EAAE;AAFqB,KAV5B;AAcJ,KAAC,2BAAD,GAA+B;AAC7BK,MAAAA,KAAK,EAAE,MADsB;AAE7BL,MAAAA,OAAO,EAAE;AAFoB;AAd3B;AADqB,CAAD,CAAV,CAoBflC,GApBe,CAAlB","sourcesContent":["import { Box, withStyles } from \"@material-ui/core\";\nimport React, { createContext, useContext, useEffect } from \"react\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport IQuestion from \"../../Models/IQuestion\";\nimport { QuizIDContext } from \"../QuizTest/QuizTest\";\n\nimport Style1 from \"./Style1/Style1\";\nimport Style2 from \"./Style2/Style2\";\nimport Style3 from \"./Style3/Style3\";\n\ninterface IProps {\n  question: IQuestion;\n  position: number;\n}\n\nexport const AnswersContext = createContext(null);\n\nconst Question: React.FC<IProps> = ({ question, position }) => {\n  const [user] = useLocalState(\"user\", \"\");\n  const { quizID } = useContext(QuizIDContext);\n\n  const [answers, setAnswersState] = useLocalState(\n    `${user.email}-quiz${quizID}-answers`,\n    {}\n  );\n\n  const setAnswers = (optionID: number) => {\n    setAnswersState((state: any) => {\n      let tempAnswers = { ...state };\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = { ...state, [`${question.id}`]: [] };\n        } else {\n          tempAnswers = { ...state, [`${question.id}`]: [optionID] };\n        }\n      } else if (question.answer_type === \"checkboxes\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = { ...state, [`${question.id}`]: tempA };\n        } else {\n          tempAnswers = { ...state, [`${question.id}`]: [optionID] };\n        }\n      }\n\n      return { ...tempAnswers };\n    });\n  };\n\n  function getIsChecked(optionID: number): boolean {\n    if (answers[question.id] && answers[question.id].includes(optionID)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  let style = null;\n  switch (question.style) {\n    case 1:\n      style = <Style1 question={question} position={position} />;\n      break;\n    case 2:\n      style = <Style2 question={question} position={position} />;\n      break;\n    case 3:\n      style = <Style3 question={question} position={position} />;\n      break;\n    default:\n      style = <Style1 question={question} position={position} />;\n      break;\n  }\n\n  return (\n    <>\n      <AnswersContext.Provider\n        value={{\n          answers,\n          setAnswers,\n          getIsChecked,\n        }}\n      >\n        <Container>{style}</Container>\n      </AnswersContext.Provider>\n    </>\n  );\n};\n\nexport default Question;\n\nconst Container = withStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"2rem 5rem\",\n    background:\n      \"transparent linear-gradient(180deg, #966BC2 0%, #437BBE6E 100%) 0% 0% no-repeat padding-box\",\n    borderRadius: 20,\n    minHeight: 150,\n    marginBottom: \"2rem\",\n    width: \"80%\",\n    [\"@media (max-width: 1000px)\"]: {\n      width: \"90%\",\n      padding: \"2rem 3rem\",\n    },\n    [\"@media (max-width: 800px)\"]: {\n      width: \"100%\",\n      padding: \"2rem 1rem\",\n    },\n  },\n})(Box);\n"]},"metadata":{},"sourceType":"module"}