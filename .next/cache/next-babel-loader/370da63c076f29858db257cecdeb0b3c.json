{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from \"react\";\nimport useLocalState from \"./useLocalState\";\nexport default function useOptionClicked(optionID, questionID, quizID, answerType) {\n  _s();\n\n  var _useLocalState = useLocalState(\"user\", \"\"),\n      _useLocalState2 = _slicedToArray(_useLocalState, 1),\n      user = _useLocalState2[0];\n\n  var _useLocalState3 = useLocalState(\"\".concat(user.email, \"-quiz\").concat(quizID, \"-answers\"), {}),\n      _useLocalState4 = _slicedToArray(_useLocalState3, 2),\n      answers = _useLocalState4[0],\n      setAnswers = _useLocalState4[1];\n\n  var _useState = useState(getIsChecked(answers, questionID, optionID)),\n      isChecked = _useState[0],\n      setIsChecked = _useState[1];\n\n  var handleClick = function handleClick() {\n    console.log(\"\".concat(user.email, \" has clicked option: \").concat(optionID, \" of question: \").concat(questionID));\n    setAnswers(function (state) {\n      var tempAnswers = _objectSpread({}, state);\n\n      if (answerType === \"multiple_choice\") {\n        tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(questionID), [optionID]));\n      } else if (answerType === \"checkboxes\") {\n        tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(questionID), [].concat(_toConsumableArray(tempAnswers[\"\".concat(questionID)]), [optionID])));\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  useEffect(function () {\n    setIsChecked(getIsChecked(answers, questionID, optionID));\n  }, [answers]);\n  return [isChecked, handleClick];\n}\n\n_s(useOptionClicked, \"smm99C7R6mQJDGh5+GA/rgPvN78=\", false, function () {\n  return [useLocalState, useLocalState];\n});\n\nfunction getIsChecked(answers, questionID, optionID) {\n  if (answers[questionID] && answers[questionID].includes(optionID)) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/custom-hooks/useOptionClicked.ts"],"names":["useEffect","useState","useLocalState","useOptionClicked","optionID","questionID","quizID","answerType","user","email","answers","setAnswers","getIsChecked","isChecked","setIsChecked","handleClick","console","log","state","tempAnswers","includes"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAIA,eAAe,SAASC,gBAAT,CACbC,QADa,EAEbC,UAFa,EAGbC,MAHa,EAIbC,UAJa,EAKgC;AAAA;;AAAA,uBAC9BL,aAAa,CAAC,MAAD,EAAS,EAAT,CADiB;AAAA;AAAA,MACtCM,IADsC;;AAAA,wBAEfN,aAAa,WACtCM,IAAI,CAACC,KADiC,kBACpBH,MADoB,eAEzC,EAFyC,CAFE;AAAA;AAAA,MAEtCI,OAFsC;AAAA,MAE7BC,UAF6B;;AAAA,kBAOXV,QAAQ,CACxCW,YAAY,CAACF,OAAD,EAAUL,UAAV,EAAsBD,QAAtB,CAD4B,CAPG;AAAA,MAOtCS,SAPsC;AAAA,MAO3BC,YAP2B;;AAW7C,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,WACKT,IAAI,CAACC,KADV,kCACuCL,QADvC,2BACgEC,UADhE;AAIAM,IAAAA,UAAU,CAAC,UAACO,KAAD,EAAgB;AACzB,UAAIC,WAAW,qBAAQD,KAAR,CAAf;;AAEA,UAAIX,UAAU,KAAK,iBAAnB,EAAsC;AACpCY,QAAAA,WAAW,mCAAQD,KAAR,qCAAmBb,UAAnB,GAAkC,CAACD,QAAD,CAAlC,EAAX;AACD,OAFD,MAEO,IAAIG,UAAU,KAAK,YAAnB,EAAiC;AACtCY,QAAAA,WAAW,mCACND,KADM,qCAELb,UAFK,gCAEcc,WAAW,WAAId,UAAJ,EAFzB,IAE4CD,QAF5C,IAAX;AAID;;AAED,+BAAYe,WAAZ;AACD,KAbS,CAAV;AAcD,GAnBD;;AAqBAnB,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,YAAY,CAACF,YAAY,CAACF,OAAD,EAAUL,UAAV,EAAsBD,QAAtB,CAAb,CAAZ;AACD,GAFQ,EAEN,CAACM,OAAD,CAFM,CAAT;AAIA,SAAO,CAACG,SAAD,EAAYE,WAAZ,CAAP;AACD;;GA1CuBZ,gB;UAMPD,a,EACeA,a;;;AAqChC,SAASU,YAAT,CACEF,OADF,EAEEL,UAFF,EAGED,QAHF,EAIW;AACT,MAAIM,OAAO,CAACL,UAAD,CAAP,IAAuBK,OAAO,CAACL,UAAD,CAAP,CAAoBe,QAApB,CAA6BhB,QAA7B,CAA3B,EAAmE;AACjE,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useLocalState from \"./useLocalState\";\n\ntype answerType = \"multiple_choice\" | \"checkboxes\";\n\nexport default function useOptionClicked(\n  optionID: number,\n  questionID: number,\n  quizID: number,\n  answerType: answerType\n): [isChecked: boolean, handleClick: Function] {\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswers] = useLocalState(\n    `${user.email}-quiz${quizID}-answers`,\n    {}\n  );\n\n  const [isChecked, setIsChecked] = useState<boolean>(\n    getIsChecked(answers, questionID, optionID)\n  );\n\n  const handleClick = () => {\n    console.log(\n      `${user.email} has clicked option: ${optionID} of question: ${questionID}`\n    );\n\n    setAnswers((state: any) => {\n      let tempAnswers = { ...state };\n\n      if (answerType === \"multiple_choice\") {\n        tempAnswers = { ...state, [`${questionID}`]: [optionID] };\n      } else if (answerType === \"checkboxes\") {\n        tempAnswers = {\n          ...state,\n          [`${questionID}`]: [...tempAnswers[`${questionID}`], optionID],\n        };\n      }\n\n      return { ...tempAnswers };\n    });\n  };\n\n  useEffect(() => {\n    setIsChecked(getIsChecked(answers, questionID, optionID));\n  }, [answers]);\n\n  return [isChecked, handleClick];\n}\n\nfunction getIsChecked(\n  answers: any,\n  questionID: number,\n  optionID: number\n): boolean {\n  if (answers[questionID] && answers[questionID].includes(optionID)) {\n    return true;\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}