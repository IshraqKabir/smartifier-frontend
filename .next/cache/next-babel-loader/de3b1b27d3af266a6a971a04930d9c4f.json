{"ast":null,"code":"import { useEffect, useState } from \"react\";\nexport default function useOption(optionId, question, answers, setAnswers) {\n  const {\n    0: isChecked,\n    1: setIsChecked\n  } = useState(getIsOptionChecked(optionId, question, answers));\n  useEffect(() => {\n    setIsChecked(getIsOptionChecked(optionId, question, answers));\n  }, [answers]);\n\n  const handleClick = () => {\n    setAnswers(optionId, question);\n  };\n\n  return {\n    isChecked,\n    handleClick\n  };\n}\n\nfunction getIsOptionChecked(optionId, question, answers) {\n  var _answers$question$id;\n\n  if (!answers) {\n    return false;\n  }\n\n  if (!answers[question === null || question === void 0 ? void 0 : question.id]) {\n    return false;\n  }\n\n  if (!Array.isArray(answers[question === null || question === void 0 ? void 0 : question.id])) {\n    return false;\n  }\n\n  let checked = false;\n  (_answers$question$id = answers[question === null || question === void 0 ? void 0 : question.id]) === null || _answers$question$id === void 0 ? void 0 : _answers$question$id.forEach(option => {\n    if ((option === null || option === void 0 ? void 0 : option.optionId) == optionId) {\n      checked = true;\n    }\n  });\n  return checked;\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Questions/SingleQuestion/Question/Options/Option/useOption.tsx"],"names":["useEffect","useState","useOption","optionId","question","answers","setAnswers","isChecked","setIsChecked","getIsOptionChecked","handleClick","id","Array","isArray","checked","forEach","option"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,eAAe,SAASC,SAAT,CACbC,QADa,EAEbC,QAFa,EAGbC,OAHa,EAIbC,UAJa,EAKb;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BP,QAAQ,CACxCQ,kBAAkB,CAACN,QAAD,EAAWC,QAAX,EAAqBC,OAArB,CADsB,CAA1C;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAACC,kBAAkB,CAACN,QAAD,EAAWC,QAAX,EAAqBC,OAArB,CAAnB,CAAZ;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,QAAMK,WAAW,GAAG,MAAM;AACxBJ,IAAAA,UAAU,CAACH,QAAD,EAAWC,QAAX,CAAV;AACD,GAFD;;AAIA,SAAO;AAAEG,IAAAA,SAAF;AAAaG,IAAAA;AAAb,GAAP;AACD;;AAED,SAASD,kBAAT,CACEN,QADF,EAEEC,QAFF,EAGEC,OAHF,EAIW;AAAA;;AACT,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,KAAP;AACD;;AAED,MAAI,CAACA,OAAO,CAACD,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEO,EAAX,CAAZ,EAA4B;AAC1B,WAAO,KAAP;AACD;;AAED,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcR,OAAO,CAACD,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEO,EAAX,CAArB,CAAL,EAA2C;AACzC,WAAO,KAAP;AACD;;AAED,MAAIG,OAAO,GAAG,KAAd;AAEA,0BAAAT,OAAO,CAACD,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEO,EAAX,CAAP,8EAAuBI,OAAvB,CAAgCC,MAAD,IAAY;AACzC,QAAI,CAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEb,QAAR,KAAoBA,QAAxB,EAAkC;AAChCW,MAAAA,OAAO,GAAG,IAAV;AACD;AACF,GAJD;AAMA,SAAOA,OAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport IQuestion from \"../../../../../../../Models/IQuestion\";\n\nexport default function useOption(\n  optionId: number,\n  question: any,\n  answers: any,\n  setAnswers: (optionId: number, question: any) => void\n) {\n  const [isChecked, setIsChecked] = useState(\n    getIsOptionChecked(optionId, question, answers)\n  );\n\n  useEffect(() => {\n    setIsChecked(getIsOptionChecked(optionId, question, answers));\n  }, [answers]);\n\n  const handleClick = () => {\n    setAnswers(optionId, question);\n  };\n\n  return { isChecked, handleClick };\n}\n\nfunction getIsOptionChecked(\n  optionId: number,\n  question: IQuestion,\n  answers: any\n): boolean {\n  if (!answers) {\n    return false;\n  }\n\n  if (!answers[question?.id]) {\n    return false;\n  }\n\n  if (!Array.isArray(answers[question?.id])) {\n    return false;\n  }\n\n  let checked = false;\n\n  answers[question?.id]?.forEach((option) => {\n    if (option?.optionId == optionId) {\n      checked = true;\n    }\n  });\n\n  return checked;\n}\n"]},"metadata":{},"sourceType":"module"}