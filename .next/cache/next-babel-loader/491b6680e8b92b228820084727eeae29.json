{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Avatar, Checkbox, makeStyles, Radio, Typography, withStyles } from \"@material-ui/core\";\nimport React, { useContext } from \"react\";\nimport { backend_url } from \"../../../../../../../url\";\nimport { QuizTestStateContext } from \"../../../../Questions\";\nimport { QuestionContext } from \"../../../SingleQuestion\";\nimport useOption from \"./useOption\";\nexport default function Option({\n  option\n}) {\n  var _option$image, _option$image2;\n\n  const {\n    answers,\n    setAnswers\n  } = useContext(QuizTestStateContext);\n  const {\n    question\n  } = useContext(QuestionContext);\n  const {\n    isChecked,\n    handleClick\n  } = useOption(option === null || option === void 0 ? void 0 : option.id, question, answers, setAnswers);\n  const shouldCenter = (option === null || option === void 0 ? void 0 : option.image) != null ? true : false;\n  const classes = useStyles({\n    shouldCenter\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classes.container,\n    onClick: handleClick,\n    children: [(question === null || question === void 0 ? void 0 : question.answer_type) === \"multiple_choice\" && /*#__PURE__*/_jsx(Radio, {\n      checked: isChecked\n    }), (question === null || question === void 0 ? void 0 : question.answer_type) === \"checkboxes\" && /*#__PURE__*/_jsx(Checkbox, {\n      checked: isChecked\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: classes.titleAndImageContainer,\n      children: [(option === null || option === void 0 ? void 0 : option.title) && /*#__PURE__*/_jsx(Title, {\n        children: option === null || option === void 0 ? void 0 : option.title\n      }), (option === null || option === void 0 ? void 0 : (_option$image = option.image) === null || _option$image === void 0 ? void 0 : _option$image.image_link) && /*#__PURE__*/_jsx(Avatar, {\n        src: `${backend_url}/storage/${option === null || option === void 0 ? void 0 : (_option$image2 = option.image) === null || _option$image2 === void 0 ? void 0 : _option$image2.image_link}`,\n        variant: \"square\",\n        style: {\n          height: 200,\n          width: 200,\n          margin: \"0.2rem 0\"\n        }\n      })]\n    })]\n  });\n}\nconst useStyles = makeStyles({\n  container: {\n    borderTop: \"1px solid gray\",\n    padding: \"0.1rem 0rem\",\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\"\n  },\n  titleAndImageContainer: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: ({\n      shouldCenter\n    }) => {\n      return shouldCenter ? \"center\" : \"\";\n    }\n  }\n});\nconst Title = withStyles({\n  root: {}\n})(Typography);","map":null,"metadata":{},"sourceType":"module"}