{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\nexport default function useLocalState(key, defaultValue) {\n  const {\n    0: value,\n    1: setValueState\n  } = useState(() => {\n    if (false) {\n      return getValue(key);\n    }\n  });\n  useEffect(() => {\n    const listener = e => {\n      if (e.storageArea === localStorage && e.key === key) {\n        setValueState(JSON.parse(e.newValue));\n      }\n    };\n\n    window.addEventListener(\"storage\", listener);\n    setInterval(() => {\n      if (JSON.stringify(getCookie(key)) != JSON.stringify(value)) {\n        setValueState(getCookie(key));\n      }\n    }, 500);\n    return () => {\n      window.removeEventListener(\"storage\", listener);\n    };\n  }, [key]);\n\n  const setValue = newValue => {\n    setValueState(currentValue => {\n      let value = null;\n\n      if (typeof newValue === \"function\") {\n        value = newValue(currentValue);\n      } else {\n        value = newValue;\n      }\n\n      setCookie(key, value);\n      localStorage.setItem(key, JSON.stringify(value));\n      return value;\n    });\n  };\n\n  return [value, setValue];\n}\n\nconst getValue = key => {\n  if (isLocalStorageWorking()) {\n    // return from local storage\n    const value = localStorage.getItem(key);\n    return value ? JSON.parse(value) : value;\n  } // return from cookie;\n\n\n  return getCookie(key);\n};\n\nconst isLocalStorageWorking = () => {\n  const key = \"local-storage-test\";\n  const value = 19;\n  localStorage.setItem(key, JSON.stringify(value));\n\n  if (JSON.parse(localStorage.getItem(key)) == value) {\n    console.log(\"working\");\n    return true;\n  }\n\n  console.log(\"not working\");\n  return false;\n};\n\nconst setCookie = (key, value) => {\n  Cookies.set(key ? JSON.stringify(key) : key, value ? JSON.stringify(value) : value);\n};\n\nconst getCookie = key => {\n  const result = Cookies.get(JSON.stringify(key));\n  return result ? JSON.parse(result) : result;\n}; // function useLocalState<T>(key: string, defaultValue: T) {\n//   const [value, setValue] = useState(() => {\n//     if (isLocalStorageWorking() == false) {\n//       return getCookie(key);\n//     }\n//     let result = null;\n//     if (process.browser) {\n//       const storedValue = localStorage.getItem(key)\n//         ? JSON.parse(localStorage.getItem(key))\n//         : localStorage.getItem(key);\n//       if (!storedValue) {\n//         result = defaultValue;\n//       }\n//       result = storedValue === null ? defaultValue : storedValue;\n//     } else {\n//       result = defaultValue;\n//     }\n//     return result;\n//   });\n//   useEffect(() => {\n//     const listener = (e) => {\n//       if (e.storageArea === localStorage && e.key === key) {\n//         setValue(JSON.parse(e.newValue));\n//       }\n//     };\n//     window.addEventListener(\"storage\", listener);\n//     return () => {\n//       window.removeEventListener(\"storage\", listener);\n//     };\n//   }, [key]);\n//   const setValueInLocalStorage = (newValue) => {\n//     setValue((currentValue) => {\n//       let value = null;\n//       if (typeof newValue === \"function\") {\n//         setCookie(key, newValue(currentValue));\n//         value = newValue(currentValue);\n//       } else {\n//         setCookie(key, newValue);\n//         value = newValue;\n//       }\n//       // const result =\n//       //   typeof newValue === \"function\" ? newValue(currentValue) : newValue;\n//       // localStorage.setItem(key, JSON.stringify(result));\n//       return value;\n//     });\n//   };\n//   useEffect(() => {\n//     const storedValue = JSON.parse(localStorage.getItem(key));\n//     if (storedValue) {\n//       setValueInLocalStorage(storedValue);\n//     } else {\n//       setValueInLocalStorage(value);\n//     }\n//   }, []);\n//   return [value, setValueInLocalStorage];\n// }\n// export default useLocalState;","map":null,"metadata":{},"sourceType":"module"}