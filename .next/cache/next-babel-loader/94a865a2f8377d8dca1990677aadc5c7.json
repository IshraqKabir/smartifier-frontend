{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/QuizTest.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext, useState } from \"react\";\nimport useStartTest from \"./useStartTest\";\nimport { Box, CircularProgress, withStyles } from \"@material-ui/core\";\nimport PageTitle from \"../PageTitle/PageTitle\";\nimport Timer, { getTimeRemainingInSeconds } from \"./Timer/Timer\";\nimport Questions from \"../Questions/Questions\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport Submit from \"./Submit/Submit\";\nexport var QuizIDContext = /*#__PURE__*/createContext(null);\nexport var AnswersContext = /*#__PURE__*/createContext(null);\n\nvar QuizTest = function QuizTest(_ref) {\n  _s();\n\n  var _test$quiz2;\n\n  var id = _ref.id,\n      status = _ref.status;\n\n  var _useStartTest = useStartTest(id, status),\n      test = _useStartTest.test,\n      isLoading = _useStartTest.isLoading,\n      isError = _useStartTest.isError;\n\n  var _useLocalState = useLocalState(\"user\", \"\"),\n      _useLocalState2 = _slicedToArray(_useLocalState, 1),\n      user = _useLocalState2[0];\n\n  var _useLocalState3 = useLocalState(\"\".concat(user.email, \"-quiz\").concat(id, \"-answers\"), {}),\n      _useLocalState4 = _slicedToArray(_useLocalState3, 2),\n      answers = _useLocalState4[0],\n      setAnswersState = _useLocalState4[1];\n\n  var _useState = useState(function () {\n    var _test$quiz;\n\n    if (!test) return;\n    return getTimeRemainingInSeconds(test === null || test === void 0 ? void 0 : test.created_at, test === null || test === void 0 ? void 0 : (_test$quiz = test.quiz) === null || _test$quiz === void 0 ? void 0 : _test$quiz.duration.toString());\n  }),\n      secondsRemaining = _useState[0],\n      setSecondsRemaining = _useState[1];\n\n  if (isError) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Sorry some error occured. Please refresh the page.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 23\n  }, _this);\n\n  var setAnswers = function setAnswers(optionID, question) {\n    setAnswersState(function (state) {\n      var tempAnswers = _objectSpread({}, state);\n\n      if (question.answer_type === \"multiple_choice\") {\n        var options = tempAnswers[\"\".concat(question.id)];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question.id), []));\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question.id), [optionID]));\n        }\n      } else if (question.answer_type === \"checkboxes\") {\n        var _options = tempAnswers[\"\".concat(question.id)];\n\n        if (_options && _options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question.id), _options.filter(function (option) {\n            return option != optionID;\n          })));\n        } else if (_options && !_options.includes(optionID)) {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question.id), [].concat(_toConsumableArray(_options), [optionID])));\n        } else {\n          tempAnswers = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, \"\".concat(question.id), [optionID]));\n        }\n      }\n\n      return _objectSpread({}, tempAnswers);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(PageTitle, {\n      title: isLoading ? \"Starting Test...\" : test.quiz.title,\n      children: isLoading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 23\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, _this), test && !isLoading && /*#__PURE__*/_jsxDEV(Timer, {\n      start_time: test.created_at,\n      duration: test === null || test === void 0 ? void 0 : (_test$quiz2 = test.quiz) === null || _test$quiz2 === void 0 ? void 0 : _test$quiz2.duration,\n      secondsRemaining: secondsRemaining,\n      setSecondsRemaining: setSecondsRemaining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, _this), test && !isLoading && (test === null || test === void 0 ? void 0 : test.quiz.test_questions) && /*#__PURE__*/_jsxDEV(AnswersContext.Provider, {\n      value: {\n        answers: answers,\n        setAnswers: setAnswers\n      },\n      children: /*#__PURE__*/_jsxDEV(QuizIDContext.Provider, {\n        value: {\n          quizID: id\n        },\n        children: /*#__PURE__*/_jsxDEV(Questions, {\n          questions: test.quiz.test_questions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(Submit, {\n      answers: answers,\n      test_id: test.id,\n      setAnswersState: setAnswersState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(QuizTest, \"8Eg5TwGNRyla9ldqAqFEvpMBJ0E=\", false, function () {\n  return [useStartTest, useLocalState, useLocalState];\n});\n\n_c = QuizTest;\nexport default QuizTest;\nvar Container = withStyles({\n  root: {\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: \"#5D00A5\",\n    minHeight: \"100vh\",\n    color: \"white\"\n  }\n})(Box);\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizTest\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/QuizTest.tsx"],"names":["React","createContext","useState","useStartTest","Box","CircularProgress","withStyles","PageTitle","Timer","getTimeRemainingInSeconds","Questions","useLocalState","Submit","QuizIDContext","AnswersContext","QuizTest","id","status","test","isLoading","isError","user","email","answers","setAnswersState","created_at","quiz","duration","toString","secondsRemaining","setSecondsRemaining","setAnswers","optionID","question","state","tempAnswers","answer_type","options","includes","filter","option","title","test_questions","quizID","Container","root","width","display","flexDirection","alignItems","backgroundColor","minHeight","color"],"mappings":"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","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nimport useStartTest from \"./useStartTest\";\nimport { Box, CircularProgress, withStyles } from \"@material-ui/core\";\nimport PageTitle from \"../PageTitle/PageTitle\";\nimport Timer, { getTimeRemainingInSeconds } from \"./Timer/Timer\";\nimport Questions from \"../Questions/Questions\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport IQuestion from \"../../Models/IQuestion\";\nimport Submit from \"./Submit/Submit\";\n\ninterface IProps {\n  id: number;\n  status: \"retake\" | \"ongoing\" | \"new_test\" | \"unknown\";\n}\n\nexport const QuizIDContext = createContext(null);\nexport const AnswersContext = createContext(null);\n\nconst QuizTest: React.FC<IProps> = ({ id, status }) => {\n  const { test, isLoading, isError } = useStartTest(id, status);\n\n  const [user] = useLocalState(\"user\", \"\");\n  const [answers, setAnswersState] = useLocalState(\n    `${user.email}-quiz${id}-answers`,\n    {}\n  );\n\n  const [secondsRemaining, setSecondsRemaining] = useState<number>(() => {\n    if (!test) return ;\n\n    return getTimeRemainingInSeconds(\n      test?.created_at,\n      test?.quiz?.duration.toString()\n    );\n  });\n\n  if (isError) return <p>Sorry some error occured. Please refresh the page.</p>;\n\n  const setAnswers = (optionID: number, question: IQuestion) => {\n    setAnswersState((state: any) => {\n      let tempAnswers = { ...state };\n\n      if (question.answer_type === \"multiple_choice\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = { ...state, [`${question.id}`]: [] };\n        } else {\n          tempAnswers = { ...state, [`${question.id}`]: [optionID] };\n        }\n      } else if (question.answer_type === \"checkboxes\") {\n        const options = tempAnswers[`${question.id}`];\n\n        if (options && options.includes(optionID)) {\n          tempAnswers = {\n            ...state,\n            [`${question.id}`]: options.filter(\n              (option: number) => option != optionID\n            ),\n          };\n        } else if (options && !options.includes(optionID)) {\n          tempAnswers = {\n            ...state,\n            [`${question.id}`]: [...options, optionID],\n          };\n        } else {\n          tempAnswers = {\n            ...state,\n            [`${question.id}`]: [optionID],\n          };\n        }\n      }\n\n      return { ...tempAnswers };\n    });\n  };\n\n  return (\n    <Container>\n      <PageTitle title={isLoading ? \"Starting Test...\" : test.quiz.title}>\n        {isLoading && <CircularProgress />}\n      </PageTitle>\n      {test && !isLoading && (\n        <Timer\n          start_time={test.created_at}\n          duration={test?.quiz?.duration}\n          secondsRemaining={secondsRemaining}\n          setSecondsRemaining={setSecondsRemaining}\n        />\n      )}\n      {test && !isLoading && test?.quiz.test_questions && (\n        <AnswersContext.Provider\n          value={{\n            answers,\n            setAnswers,\n          }}\n        >\n          <QuizIDContext.Provider value={{ quizID: id }}>\n            <Questions questions={test.quiz.test_questions} />\n          </QuizIDContext.Provider>\n        </AnswersContext.Provider>\n      )}\n      <Submit\n        answers={answers}\n        test_id={test.id}\n        setAnswersState={setAnswersState}\n      />\n    </Container>\n  );\n};\n\nexport default QuizTest;\n\nconst Container = withStyles({\n  root: {\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    backgroundColor: \"#5D00A5\",\n    minHeight: \"100vh\",\n    color: \"white\",\n  },\n})(Box);\n"]},"metadata":{},"sourceType":"module"}