{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport getResultInfo from \"../../repository/QuizTestResult/getResultInfo\";\nexport default function useQuizTestResult(testId) {\n  const [user] = useLocalState(\"user\", \"\");\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isAuthorized,\n    1: setIsAuthorized\n  } = useState(true);\n  const {\n    0: test,\n    1: setTest\n  } = useState();\n  const {\n    0: quiz,\n    1: setQuiz\n  } = useState();\n  useEffect(() => {\n    fetchResultInfo();\n  }, []);\n\n  async function fetchResultInfo() {\n    if (!user) return;\n    setIsLoading(true);\n    const response = await getResultInfo(testId, user === null || user === void 0 ? void 0 : user.token);\n    setIsAuthorized(response === null || response === void 0 ? void 0 : response.is_authorized);\n    setTest(response === null || response === void 0 ? void 0 : response.test);\n    setIsLoading(false);\n    console.log(response);\n  }\n\n  return {\n    isLoading,\n    isAuthorized\n  };\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTestResult/useQuizTestResult.tsx"],"names":["useEffect","useState","useLocalState","getResultInfo","useQuizTestResult","testId","user","isLoading","setIsLoading","isAuthorized","setIsAuthorized","test","setTest","quiz","setQuiz","fetchResultInfo","response","token","is_authorized","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AAGA,OAAOC,aAAP,MAA0B,+CAA1B;AAEA,eAAe,SAASC,iBAAT,CAA2BC,MAA3B,EAA2C;AACxD,QAAM,CAACC,IAAD,IAASJ,aAAa,CAAC,MAAD,EAAS,EAAT,CAA5B;AACA,QAAM;AAAA,OAACK,SAAD;AAAA,OAAYC;AAAZ,MAA4BP,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM;AAAA,OAACQ,YAAD;AAAA,OAAeC;AAAf,MAAkCT,QAAQ,CAAU,IAAV,CAAhD;AAEA,QAAM;AAAA,OAACU,IAAD;AAAA,OAAOC;AAAP,MAAkBX,QAAQ,EAAhC;AACA,QAAM;AAAA,OAACY,IAAD;AAAA,OAAOC;AAAP,MAAkBb,QAAQ,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,eAAe;AAChB,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,eAAf,GAAiC;AAC/B,QAAI,CAACT,IAAL,EAAW;AACXE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,UAAMQ,QAAQ,GAAG,MAAMb,aAAa,CAACE,MAAD,EAASC,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEW,KAAf,CAApC;AAEAP,IAAAA,eAAe,CAACM,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEE,aAAX,CAAf;AACAN,IAAAA,OAAO,CAACI,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEL,IAAX,CAAP;AAEAH,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACD;;AAED,SAAO;AAAET,IAAAA,SAAF;AAAaE,IAAAA;AAAb,GAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useLocalState from \"../../custom-hooks/useLocalState\";\nimport IQuiz from \"../../Models/IQuiz\";\nimport ITest from \"../../Models/ITest\";\nimport getResultInfo from \"../../repository/QuizTestResult/getResultInfo\";\n\nexport default function useQuizTestResult(testId: number) {\n  const [user] = useLocalState(\"user\", \"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isAuthorized, setIsAuthorized] = useState<boolean>(true);\n\n  const [test, setTest] = useState<ITest>();\n  const [quiz, setQuiz] = useState<IQuiz>();\n\n  useEffect(() => {\n    fetchResultInfo();\n  }, []);\n\n  async function fetchResultInfo() {\n    if (!user) return;\n    setIsLoading(true);\n\n    const response = await getResultInfo(testId, user?.token);\n\n    setIsAuthorized(response?.is_authorized);\n    setTest(response?.test)\n\n    setIsLoading(false);\n\n    console.log(response);\n  }\n\n  return { isLoading, isAuthorized };\n}\n"]},"metadata":{},"sourceType":"module"}