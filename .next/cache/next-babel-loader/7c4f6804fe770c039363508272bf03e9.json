{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { local_backend_url } from \"../url\";\nconst initialState = {\n  posts: [],\n  topics: [],\n  tags: []\n};\nexport default function useSearch(url, query) {\n  const {\n    0: data,\n    1: setData\n  } = useState(_objectSpread({}, initialState));\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  useEffect(() => {\n    setData(_objectSpread({}, initialState));\n  }, [query]);\n  useEffect(() => {\n    if (!query) return () => {};\n    setLoading(true);\n    setError(false);\n    let cancel;\n    axios({\n      method: \"GET\",\n      url: `${local_backend_url}${url}`,\n      params: {\n        query: query\n      },\n      cancelToken: new axios.CancelToken(c => cancel = c),\n      headers: {\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      setData(res.data);\n      setLoading(false);\n    }).catch(error => {\n      if (axios.isCancel(error)) return;\n      setError(true);\n    });\n    return () => {\n      cancel();\n    };\n  }, [query]);\n  return {\n    data,\n    loading,\n    error\n  };\n}","map":null,"metadata":{},"sourceType":"module"}