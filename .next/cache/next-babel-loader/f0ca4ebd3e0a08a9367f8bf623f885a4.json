{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Timer = ({\n  start_time,\n  duration\n}) => {\n  const {\n    0: timeRemaining,\n    1: setTimeRemaining\n  } = useState(getTimeRemainingInSeconds(start_time, duration));\n  useEffect(() => {\n    setInterval(() => {\n      setTimeRemaining;\n    }, 200);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: `${timeRemaining}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Timer;\n\nfunction getTimeRemainingInSeconds(start_time, duration) {\n  const totalDurationInSeconds = getSecondsFromDuration(duration);\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n  const secondsLeft = (end.getTime() - now.getTime()) / 1000;\n  return secondsLeft;\n}\n\nfunction getSecondsFromDuration(duration) {\n  const [hours, mins, seconds] = duration.split(\":\");\n  let totalSeconds = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60 * 60;\n  totalSeconds += parseInt(seconds);\n  return totalSeconds;\n}","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/QuizTest/Timer/Timer.tsx"],"names":["React","useEffect","useState","Timer","start_time","duration","timeRemaining","setTimeRemaining","getTimeRemainingInSeconds","setInterval","totalDurationInSeconds","getSecondsFromDuration","start","Date","now","end","setTime","getTime","secondsLeft","hours","mins","seconds","split","totalSeconds","parseInt"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAOA,MAAMC,KAAuB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAA8B;AAC5D,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCL,QAAQ,CAChDM,yBAAyB,CAACJ,UAAD,EAAaC,QAAb,CADuB,CAAlD;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAAC,MAAM;AACdF,MAAAA,gBAAgB;AACnB,KAFU,EAER,GAFQ,CAAX;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,sBAAO;AAAA,cAAK,GAAED,aAAc;AAArB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAZD;;AAcA,eAAeH,KAAf;;AAEA,SAASK,yBAAT,CAAmCJ,UAAnC,EAAuDC,QAAvD,EAAyE;AACvE,QAAMK,sBAA8B,GAAGC,sBAAsB,CAACN,QAAD,CAA7D;AAEA,QAAMO,KAAK,GAAG,IAAIC,IAAJ,CAAU,GAAET,UAAW,EAAvB,CAAd;AACA,QAAMU,GAAG,GAAG,IAAID,IAAJ,EAAZ;AACA,QAAME,GAAG,GAAG,IAAIF,IAAJ,CAAU,GAAET,UAAW,EAAvB,CAAZ;AACAW,EAAAA,GAAG,CAACC,OAAJ,CAAYJ,KAAK,CAACK,OAAN,KAAkBP,sBAAsB,GAAG,IAAvD;AAEA,QAAMQ,WAAmB,GAAG,CAACH,GAAG,CAACE,OAAJ,KAAgBH,GAAG,CAACG,OAAJ,EAAjB,IAAkC,IAA9D;AAEA,SAAOC,WAAP;AACD;;AAED,SAASP,sBAAT,CAAgCN,QAAhC,EAA0D;AACxD,QAAM,CAACc,KAAD,EAAQC,IAAR,EAAcC,OAAd,IAAyBhB,QAAQ,CAACiB,KAAT,CAAe,GAAf,CAA/B;AAEA,MAAIC,YAAoB,GAAG,CAA3B;AACAA,EAAAA,YAAY,IAAIC,QAAQ,CAACL,KAAD,CAAR,GAAkB,EAAlB,GAAuB,EAAvC;AACAI,EAAAA,YAAY,IAAIC,QAAQ,CAACJ,IAAD,CAAR,GAAiB,EAAjB,GAAsB,EAAtC;AACAG,EAAAA,YAAY,IAAIC,QAAQ,CAACH,OAAD,CAAxB;AAEA,SAAOE,YAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\ninterface IProps {\n  start_time: string;\n  duration: string;\n}\n\nconst Timer: React.FC<IProps> = ({ start_time, duration }) => {\n  const [timeRemaining, setTimeRemaining] = useState<number>(\n    getTimeRemainingInSeconds(start_time, duration)\n  );\n\n  useEffect(() => {\n    setInterval(() => {\n        setTimeRemaining\n    }, 200);\n  }, []);\n\n  return <p>{`${timeRemaining}`}</p>;\n};\n\nexport default Timer;\n\nfunction getTimeRemainingInSeconds(start_time: string, duration: string) {\n  const totalDurationInSeconds: number = getSecondsFromDuration(duration);\n\n  const start = new Date(`${start_time}`);\n  const now = new Date();\n  const end = new Date(`${start_time}`);\n  end.setTime(start.getTime() + totalDurationInSeconds * 1000);\n\n  const secondsLeft: number = (end.getTime() - now.getTime()) / 1000;\n\n  return secondsLeft;\n}\n\nfunction getSecondsFromDuration(duration: string): number {\n  const [hours, mins, seconds] = duration.split(\":\");\n\n  let totalSeconds: number = 0;\n  totalSeconds += parseInt(hours) * 60 * 60;\n  totalSeconds += parseInt(mins) * 60 * 60;\n  totalSeconds += parseInt(seconds);\n\n  return totalSeconds;\n}\n"]},"metadata":{},"sourceType":"module"}