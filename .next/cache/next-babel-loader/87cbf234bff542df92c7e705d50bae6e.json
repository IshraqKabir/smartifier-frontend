{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _s = $RefreshSig$();\n\nimport { cloneElement, useContext, useState } from \"react\";\nimport { AnswersContext } from \"../Question\";\n\nvar OptionContainer = function OptionContainer(props) {\n  _s();\n\n  var _useContext = useContext(AnswersContext),\n      answers = _useContext.answers,\n      setAnswers = _useContext.setAnswers,\n      getIsChecked = _useContext.getIsChecked;\n\n  var _useState = useState(getIsChecked(props.option.id)),\n      isChecked = _useState[0],\n      setIsChecked = _useState[1];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/cloneElement(props.children, props)\n  }, void 0, false);\n};\n\n_s(OptionContainer, \"Y6yXvr2S2cNv4IwTA/Ffj8VIKlA=\");\n\n_c = OptionContainer;\nexport default OptionContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptionContainer\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/Question/OptionContainer/OptionContainer.tsx"],"names":["cloneElement","useContext","useState","AnswersContext","OptionContainer","props","answers","setAnswers","getIsChecked","option","id","isChecked","setIsChecked","children"],"mappings":";;;;;AAAA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,cAAT,QAA+B,aAA/B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAAA;;AAAA,oBACaJ,UAAU,CAACE,cAAD,CADvB;AAAA,MACzBG,OADyB,eACzBA,OADyB;AAAA,MAChBC,UADgB,eAChBA,UADgB;AAAA,MACJC,YADI,eACJA,YADI;;AAAA,kBAGCN,QAAQ,CACxCM,YAAY,CAACH,KAAK,CAACI,MAAN,CAAaC,EAAd,CAD4B,CAHT;AAAA,MAG1BC,SAH0B;AAAA,MAGfC,YAHe;;AAOjC,sBAAO;AAAA,2BAAGZ,YAAY,CAACK,KAAK,CAACQ,QAAP,EAAiBR,KAAjB;AAAf,mBAAP;AACD,CARD;;GAAMD,e;;KAAAA,e;AAUN,eAAeA,eAAf","sourcesContent":["import { cloneElement, useContext, useState } from \"react\";\nimport { AnswersContext } from \"../Question\";\n\nconst OptionContainer = (props) => {\n  const { answers, setAnswers, getIsChecked } = useContext(AnswersContext);\n\n  const [isChecked, setIsChecked] = useState<boolean>(\n    getIsChecked(props.option.id)\n  );\n\n  return <>{cloneElement(props.children, props)}</>;\n};\n\nexport default OptionContainer;\n"]},"metadata":{},"sourceType":"module"}