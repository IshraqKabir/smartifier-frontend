{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _s = $RefreshSig$();\n\nimport { cloneElement } from \"react\";\n\nvar OptionContainer = function OptionContainer(props) {\n  _s();\n\n  var _useContext = useContext(AnswersContext),\n      answers = _useContext.answers,\n      setAnswers = _useContext.setAnswers,\n      getIsChecked = _useContext.getIsChecked;\n\n  var _useState = useState(getIsChecked(option.id)),\n      _useState2 = _slicedToArray(_useState, 2),\n      isChecked = _useState2[0],\n      setIsChecked = _useState2[1];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/cloneElement(props.children, props)\n  }, void 0, false);\n};\n\n_s(OptionContainer, \"CdLGPjDGWKWICdPaDsr7hZV/rv0=\");\n\n_c = OptionContainer;\nexport default OptionContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptionContainer\");","map":{"version":3,"sources":["/home/ishraqkabir/workspace/smartifier-frontend/Components/Question/OptionContainer/OptionContainer.tsx"],"names":["cloneElement","OptionContainer","props","useContext","AnswersContext","answers","setAnswers","getIsChecked","useState","option","id","isChecked","setIsChecked","children"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,OAA7B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAAA;;AAAA,oBACYC,UAAU,CAACC,cAAD,CADtB;AAAA,MAC1BC,OAD0B,eAC1BA,OAD0B;AAAA,MACjBC,UADiB,eACjBA,UADiB;AAAA,MACLC,YADK,eACLA,YADK;;AAAA,kBAGCC,QAAQ,CAAUD,YAAY,CAACE,MAAM,CAACC,EAAR,CAAtB,CAHT;AAAA;AAAA,MAG1BC,SAH0B;AAAA,MAGfC,YAHe;;AAKjC,sBAAO;AAAA,2BAAGZ,YAAY,CAACE,KAAK,CAACW,QAAP,EAAiBX,KAAjB;AAAf,mBAAP;AACD,CAND;;GAAMD,e;;KAAAA,e;AAQN,eAAeA,eAAf","sourcesContent":["import { cloneElement } from \"react\";\n\nconst OptionContainer = (props) => {\n const { answers, setAnswers, getIsChecked } = useContext(AnswersContext);\n\n  const [isChecked, setIsChecked] = useState<boolean>(getIsChecked(option.id));\n\n  return <>{cloneElement(props.children, props)}</>;\n};\n\nexport default OptionContainer;\n"]},"metadata":{},"sourceType":"module"}